{"version":3,"sources":["webpack://gamelib/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://gamelib/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://gamelib/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://gamelib/./src/core/data/Persistence.ts","webpack://gamelib/./src/core/menus/Router.ts","webpack://gamelib/./src/core/menus/GlobalState.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","PersistenceManager","name","initializer","typeGuard","this","state","localStorage","getItem","getDefault","val","JSON","parse","console","warn","assign","initState","put","setItem","stringify","SimpleRouter","_currentPage","undefined","_transitionData","_pages","_history","requestTransition","_requestTransition","id","page","fn","purge","data","log","canTransition","push","pages","el","document","getElementById","innerHTML","classList","forEach","it","remove","add","load","init","bind","prev","slice","cleanup","splice","BaseGlobalState","defaultData","router","persistence","get","score","scores","sort","a","b","reverse","action","keyMap"],"mappings":"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","file":"390.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export class PersistenceManager<T, R> {\n  private initializer: (state: T) => R;\n  private typeGuard: (obj: unknown) => boolean;\n  private name: string;\n\n  constructor(\n    name: string,\n    initializer: (state: T) => R,\n    typeGuard?: (obj: unknown) => boolean\n  ) {\n    this.initializer = initializer;\n    this.typeGuard = typeGuard;\n    this.name = name;\n  }\n\n  get(state: T): R {\n    if (localStorage.getItem(this.name) === null) {\n      return this.getDefault(state);\n    } else {\n      const val = JSON.parse(localStorage.getItem(this.name));\n      if (this.typeGuard && !this.typeGuard(val)) {\n        console.warn(\n          `Found invalid shape of persistent data ${this.name}, assigning to default.`\n        );\n        const res = Object.assign(this.getDefault(state), val);\n        return res;\n      }\n      const res = Object.assign(this.getDefault(state), val);\n      return res;\n    }\n  }\n\n  private getDefault(state: T): R {\n    const initState = this.initializer(state) as R;\n    this.put(initState);\n    return initState;\n  }\n\n  put(value: R): void {\n    localStorage.setItem(this.name, JSON.stringify(value));\n  }\n}\n","import { Page } from \"./Page\";\n\nexport interface Router<T> {\n  pages: Record<string, Page<T>>;\n  currentPage: Page<T>;\n  transitionData: Record<string, unknown>;\n  requestTransition(\n    id: string,\n    purge?: boolean,\n    data?: Record<string, unknown>\n  ): void;\n  previous(state: T): void;\n}\n\nexport class SimpleRouter<T> implements Router<T> {\n  private _currentPage: Page<T> = undefined as Page<T>;\n  private _transitionData: Record<string, unknown> = {};\n  private _pages: Record<string, Page<T>> = {};\n  private _history: Array<string> = [];\n  requestTransition: (\n    id: string,\n    purge?: boolean,\n    data?: Record<string, unknown>\n  ) => void;\n\n  constructor(state: T) {\n    this.requestTransition = this._requestTransition(state);\n  }\n\n  public addPage(id: string, page: Page<T>): void {\n    if (!(id in this._pages)) {\n      this._pages[id] = page;\n    } else {\n      console.warn(`Trying to register duplicate page ${id}!`);\n    }\n  }\n\n  public get transitionData(): Record<string, unknown> {\n    return this._transitionData;\n  }\n\n  public get pages(): Record<string, Page<T>> {\n    return this._pages;\n  }\n\n  public get currentPage(): Page<T> {\n    return this._currentPage;\n  }\n\n  private _requestTransition(state: T) {\n    let fn = function (\n      id: string,\n      purge = false,\n      data?: Record<string, unknown>\n    ) {\n      console.log(`[ROUTER] Moving to ${id}`);\n      if (this._pages[id] === undefined || this._pages[id] === null) {\n        return;\n      }\n      if (\n        this._currentPage === undefined ||\n        this._currentPage.canTransition(this, id)\n      ) {\n        if (purge) {\n          this._history = [];\n        }\n        this._history.push(id);\n        this._currentPage = this.pages[id];\n        this._transitionData = data;\n        const el = document.getElementById(\"main\");\n        el.innerHTML = \"\";\n        el.classList.forEach((it) => el.classList.remove(it));\n        el.classList.add(id);\n        this._currentPage.load(el, this, state);\n        this._currentPage.init(this, state);\n      }\n    };\n    fn = fn.bind(this);\n    return fn;\n  }\n\n  previous(state: T): void {\n    const prev = this._history.slice(-2)[0];\n    if (prev !== undefined) {\n      this._currentPage.cleanup(this, state);\n      this._history.splice(-2, 2);\n      this.requestTransition(prev, false);\n    }\n  }\n}\n","import { BasePersistedData, Score } from \"../data/BasePersistedData\";\nimport { PersistenceManager } from \"../data/Persistence\";\nimport { SimpleRouter } from \"./Router\";\n\nexport interface GlobalState<T extends BasePersistedData> {\n  router: SimpleRouter<GlobalState<T>>;\n  persistence: PersistenceManager<GlobalState<T>, BasePersistedData>;\n  addScore(score: Score): void;\n  remapControl(action: string, key: string): void;\n  getData(): T;\n  setData(data: T): void;\n}\n\nexport class BaseGlobalState<T extends BasePersistedData>\n  implements GlobalState<T> {\n  public router: SimpleRouter<GlobalState<T>>;\n  public persistence: PersistenceManager<GlobalState<T>, BasePersistedData>;\n  private data: T;\n\n  constructor(name: string, defaultData: T) {\n    this.router = new SimpleRouter<GlobalState<T>>(this);\n    this.persistence = new PersistenceManager<GlobalState<T>, T>(\n      name,\n      () => defaultData\n    );\n    this.data = this.persistence.get(this) as T;\n    this.persistence.put(this.data);\n  }\n\n  public addScore(score: Score): void {\n    this.data.scores.push(score);\n    this.data.scores.sort((a, b) => a.score - b.score).reverse();\n    this.data.scores = this.data.scores.slice(0, 5);\n    this.persistence.put(this.data);\n  }\n\n  public remapControl(action: string, key: string): void {\n    this.data.keyMap[action] = key;\n    this.persistence.put(this.data);\n  }\n\n  public getData(): T {\n    return { ...this.data };\n  }\n\n  public setData(data: T): void {\n    this.data = data;\n    this.persistence.put(data);\n  }\n}\n"],"sourceRoot":""}