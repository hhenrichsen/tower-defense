{"version":3,"sources":["webpack://gamelib/./src/core/ecs/Component.ts","webpack://gamelib/./src/core/geometry/Vector2.ts","webpack://gamelib/./src/core/components/data/Position.ts","webpack://gamelib/./src/core/components/data/Rotation.ts","webpack://gamelib/./src/core/data/ActionMap.ts","webpack://gamelib/./src/core/components/data/Range.ts","webpack://gamelib/./src/core/ecs/decorators/AutoName.ts","webpack://gamelib/./src/core/components/marker/Selected.ts","webpack://gamelib/./src/core/components/rendering/RangeDisplay.ts","webpack://gamelib/./src/core/ecs/Entity.ts","webpack://gamelib/./src/core/ecs/ECSManager.ts","webpack://gamelib/./src/core/input/KeyboardInput.ts","webpack://gamelib/./src/core/input/MouseInput.ts","webpack://gamelib/./src/core/rendering/VirtualCoordinate.ts","webpack://gamelib/./src/core/rendering/VirtualCanvas.ts","webpack://gamelib/./src/core/components/behavior/click/AbstractClick.ts","webpack://gamelib/./src/core/components/behavior/click/Clickable.ts","webpack://gamelib/./src/core/ecs/System.ts","webpack://gamelib/./src/core/systems/AbstractClickSystem.ts","webpack://gamelib/./src/core/components/data/Acceleration.ts","webpack://gamelib/./src/core/data/DynamicConstant.ts","webpack://gamelib/./src/core/components/data/Velocity.ts","webpack://gamelib/./src/core/systems/AccelerationSystem.ts","webpack://gamelib/./src/core/rendering/Texture.ts","webpack://gamelib/./src/core/components/rendering/AnimatedSprite.ts","webpack://gamelib/./src/core/systems/AnimatedSpriteRenderSystem.ts","webpack://gamelib/./src/core/components/ui/ClickableDisplay.ts","webpack://gamelib/./src/core/systems/ClickableDisplaySystem.ts","webpack://gamelib/./src/core/geometry/Collision.ts","webpack://gamelib/./src/core/systems/ClickableSystem.ts","webpack://gamelib/./src/core/components/behavior/click/ClickComponentAdd.ts","webpack://gamelib/./src/core/systems/ClickComponentAddSystem.ts","webpack://gamelib/./src/core/components/behavior/click/ClickComponentToggleMultiple.ts","webpack://gamelib/./src/core/systems/ClickComponentToggleMultipleSystem.ts","webpack://gamelib/./src/core/components/behavior/click/ClickComponentToggle.ts","webpack://gamelib/./src/core/systems/ClickComponentToggleSystem.ts","webpack://gamelib/./src/core/components/behavior/click/ClickDataMutate.ts","webpack://gamelib/./src/core/systems/ClickDataMutationSystem.ts","webpack://gamelib/./src/core/components/behavior/Draggable.ts","webpack://gamelib/./src/core/systems/DraggableSystem.ts","webpack://gamelib/./src/core/components/data/Footprint.ts","webpack://gamelib/./src/core/ecs/decorators/Basis.ts","webpack://gamelib/./src/core/ecs/decorators/Required.ts","webpack://gamelib/./src/core/systems/FootprintSystem.ts","webpack://gamelib/./src/core/components/marker/HealthDisplay.ts","webpack://gamelib/./src/core/components/data/Health.ts","webpack://gamelib/./src/core/systems/HealthDisplaySystem.ts","webpack://gamelib/./src/core/systems/HealthSystem.ts","webpack://gamelib/./src/core/components/behavior/Lifetime.ts","webpack://gamelib/./src/core/components/rendering/LifetimeRender.ts","webpack://gamelib/./src/core/components/rendering/Sprite.ts","webpack://gamelib/./src/core/systems/LifetimeRenderSystem.ts","webpack://gamelib/./src/core/systems/LifetimeSystem.ts","webpack://gamelib/./src/core/components/rendering/LowSprite.ts","webpack://gamelib/./src/core/systems/LowSpriteRenderSystem.ts","webpack://gamelib/./src/core/components/behavior/Magnet.ts","webpack://gamelib/./src/core/components/marker/MagnetAttracted.ts","webpack://gamelib/./src/core/geometry/Circle.ts","webpack://gamelib/./src/core/systems/MagnetSystem.ts","webpack://gamelib/./src/core/components/behavior/PathFollower.ts","webpack://gamelib/./src/core/components/behavior/PositionTarget.ts","webpack://gamelib/./src/core/components/behavior/RotationTarget.ts","webpack://gamelib/./src/core/systems/PathFollowerSystem.ts","webpack://gamelib/./src/core/components/rendering/PositionDebug.ts","webpack://gamelib/./src/core/systems/PositionDebugSystem.ts","webpack://gamelib/./src/core/systems/RangeDisplaySystem.ts","webpack://gamelib/./src/core/components/ui/RegionRender.ts","webpack://gamelib/./src/core/systems/RegionRenderSystem.ts","webpack://gamelib/./src/core/components/rendering/RotationDebug.ts","webpack://gamelib/./src/core/systems/RotationDebugSystem.ts","webpack://gamelib/./src/core/systems/RotationTargetSystem.ts","webpack://gamelib/./src/core/components/rendering/SelectionDisplay.ts","webpack://gamelib/./src/core/systems/SelectionRenderSystem.ts","webpack://gamelib/./src/core/components/behavior/Spawner.ts","webpack://gamelib/./src/core/systems/SpawnerSystem.ts","webpack://gamelib/./src/core/systems/SpriteRenderSystem.ts","webpack://gamelib/./src/core/components/behavior/Stack.ts","webpack://gamelib/./src/core/systems/StackSystem.ts","webpack://gamelib/./src/core/components/ui/TextRender.ts","webpack://gamelib/./src/core/systems/TextRenderSystem.ts","webpack://gamelib/./src/core/systems/VelocitySystem.ts","webpack://gamelib/./src/core/systems/VelocityTargetSystem.ts","webpack://gamelib/./src/core/data/GameMap.ts","webpack://gamelib/./src/core/data/BaseGameModel.ts","webpack://gamelib/./src/core/rendering/ParticleManager.ts","webpack://gamelib/./src/core/components/marker/Sellable.ts","webpack://gamelib/./src/content/components/BaseComponent.ts","webpack://gamelib/./src/content/systems/BaseRenderSystem.ts","webpack://gamelib/./src/content/types/ProjectileType.ts","webpack://gamelib/./src/content/components/Weapon.ts","webpack://gamelib/./src/content/components/Creep.ts","webpack://gamelib/./src/content/systems/WeaponSystem.ts","webpack://gamelib/./src/content/components/Damage.ts","webpack://gamelib/./src/content/components/DamageTarget.ts","webpack://gamelib/./src/content/systems/DamageTargetSystem.ts","webpack://gamelib/./src/core/Random.ts","webpack://gamelib/./src/content/components/SplashDamage.ts","webpack://gamelib/./src/content/systems/SplashDamageSystem.ts","webpack://gamelib/./src/content/towers/MinigunTower.ts","webpack://gamelib/./src/content/towers/MissileTower.ts","webpack://gamelib/./src/content/towers/SwarmerTower.ts","webpack://gamelib/./src/content/towers/SniperTower.ts","webpack://gamelib/./src/content/GameUI.ts","webpack://gamelib/./src/core/components/behavior/Upgrade.ts","webpack://gamelib/./src/content/particles/Blood.ts","webpack://gamelib/./src/core/components/data/Name.ts","webpack://gamelib/./src/core/components/data/Value.ts","webpack://gamelib/./src/content/prefabs/Bullet.ts","webpack://gamelib/./src/core/prefabs/SmokeParticle.ts","webpack://gamelib/./src/content/prefabs/Rocket.ts","webpack://gamelib/./src/content/prefabs/SwarmMissile.ts","webpack://gamelib/./src/content/towers/TowerManager.ts","webpack://gamelib/./src/core/geometry/Direction.ts","webpack://gamelib/./src/core/data/Pathfinder.ts","webpack://gamelib/./src/content/PathChecker.ts","webpack://gamelib/./src/content/creeps/Fast.ts","webpack://gamelib/./src/content/creeps/Flying.ts","webpack://gamelib/./src/content/creeps/Normal.ts","webpack://gamelib/./src/content/creeps/CreepManager.ts","webpack://gamelib/./src/core/SoundEffect.ts","webpack://gamelib/./src/content/GlobalUtil.ts","webpack://gamelib/./src/core/SoundEffectPool.ts","webpack://gamelib/./src/content/GameModel.ts"],"names":["Component","initialData","Object","assign","this","defaultData","Vector2","x","y","_x","_y","Math","pow","sqrt","magnitude","ZERO","scalar","other","floor","ceil","degrees","rad","PI","cos","sin","atan2","undefined","prototype","hasOwnProperty","call","random","normalize","angle","number","pos1","pos2","ONES","PositionComponent","lowerFirst","constructor","name","position","RotationComponent","rotation","Action","_name","handlers","handler","push","data","length","ActionMap","actions","serializeActions","Map","serialize","action","set","has","get","addHandler","console","warn","invoke","clear","RangeComponent","range","AutoName","target","RangeDisplayComponent","strokeStyle","fillStyle","lineWidth","offset","Entity","id","active","ECSManager","initialPoolSize","nextId","entities","entityComponents","systems","interestedSystems","allSystems","systemOrder","availableIDs","events","listeners","Set","update","bind","getEntityIDsWithComponent","getEntitiesWithComponent","i","createEntity","removeEntity","allowReuse","splice","entity","emitEvent","event","listener","extra","quiet","entityID","e","system","wave","sort","add","basis","getBasisComponent","getName","setManager","forEach","systemSet","component","resolveEntity","init","notify","componentName","res","elapsedTime","model","eventIdx","listenerIdx","orderIdx","keys","KeyboardInput","keyListeners","keyPushed","keyDown","keyUp","window","addEventListener","evt","key","down","toLowerCase","removeEventListener","MouseState","isLeftMouseDown","isRightMouseDown","mouseCoordinate","MouseInput","mouse","getMousePosition","element","virtualCanvas","coordinates","getCoordinates","getOffset","inverseTranslate","subtract","_evt","coordinate","leftDown","VirtualCoordinateSystem","scaleX","scaleY","translate","translateValueX","translateValueY","v1","p","VirtualCanvas","virtualSize","canvas","context","aspectRatio","vcs","installed","parent","document","createElement","initCanvas","appendChild","resize","getContext","width","height","line","el","getElementById","nodeName","error","text","style","size","font","textAlign","weight","splits","trim","split","adjustedPosition","addConstant","fillText","texture","opacity","ready","globalAlpha","adjustedSize","save","rotate","drawImage","restore","center","radius","adjustedRadius","beginPath","arc","fill","stroke","frameSize","frame","p1","p2","p1adj","p2adj","fillRect","strokeRect","lineTo","vec","clearRect","rect","getBoundingClientRect","clientWidth","clientHeight","AbstractClickComponent","ClickableComponent","delta","thisClick","BaseSystem","manager","deltaTime","rate","elapsed","notification","checkBasis","isInterested","onManagerAwake","required","getRequiredComponents","excluded","getExcludedComponents","checkRequired","checkExcluded","requirement","exclusion","systemUpdate","values","updateEntity","entityEvent","onEvent","requireComponent","listenEvent","listenerNoCheck","_componentName","_entity","mode","AbstractClickSystem","listen","_event","abstractClick","AccelerationComponent","acceleration","getDynamic","dc","VelocityComponent","velocity","AccelerationSystem","addScaled","Texture","Image","src","naturalWidth","naturalHeight","AnimatedSprite","source","NoTex","frames","currentDuration","AnimatedSpriteRenderSystem","animatedSprite","drawImageAnimated","AnimatedSpriteComponent","ClickableDisplayComponent","background","backgroundHover","ClickableDisplaySystem","clickable","clickableDisplay","pos","northWest","southEast","drawRectangle","circlePointCollision","circle","point","PointRadiusPointCollision","point1","point2","rectRectCollision","nw1","se1","nw2","se2","ClickableSystem","runCheck","getMouseAction","best","bestNW","bestSE","targetEntity","mouseAdj","offsetDelta","nw","se","pt","ClickComponentAddComponent","SelectedComponent","ClickComponentAddSystem","clickComponentAdd","addComponent","ClickComponentToggleMultipleComponent","components","ClickComponentToggleMultipleSystem","clickComponentToggleMultiple","compIdx","comp","hasComponent","removeComponent","ClickComponentToggleComponent","ClickComponentToggleSystem","clickComponentToggle","cmp","ClickDataMutateComponent","ClickDataMutateSystem","clickDataMutate","merge","DraggableComponent","dragging","DraggableSystem","draggable","FootprintComponent","tracked","Basis","basisComponent","Required","FootprintSystem","map","footprint","nwOffset","swOffset","createEntityLink","HealthDisplayComponent","HealthComponent","health","maxHealth","HealthRenderSystem","proportion","southEast2","drawWorldRectangle","HealthSystem","LifetimeComponent","lifetime","Sprite","NO_TEXTURE","DEFAULT_SIZE","rotationOffset","LifetimeRenderSystem","sprite","LifetimeRenderComponent","SpriteComponent","LifetimeSystem","LowSprite","LowSpriteRenderSystem","LowSpriteComponent","lowSprite","MagnetComponent","onSnap","Circle","_center","_radius","MagnetSystem","magnet","MagnetAttractedComponent","PathFollowerComponent","path","invalidated","VelocityTargetComponent","strictness","RotationTargetComponent","turnRate","PathFollowerSystem","velocityTarget","rotationTarget","pathFollower","md","idx","dist","checkRelativeThreshold","a","b","threshold","abs","PositionDebugSystem","PositionDebugComponent","RangeDisplaySystem","rangeDisplay","drawCircle","RegionComponent","fillColor","strokeColor","RegionRenderSystem","region","RotationDebugSystem","rotVec","scale","vecTarget","RotationDebugComponent","RotationTargetSystem","relativeTarget","currentRotation","currentRotationVector","targetRotation","toAngle","rotationDirection","sign","determinant","desiredRotation","deltaRotation","min","SelectionDisplayComponent","SelectionSystem","selectionDisplay","count","producer","limit","total","SpawnerSystem","spawner","checkInterval","spawn","SpawnerComponent","SpriteRenderSystem","StackComponent","child","index","StackSystem","handleAttach","handleDetach","handleSwap","indexOffset","getEntity","originalParent","stack","parentPosition","parentStack","oldParent","align","TextRenderSystem","textRender","drawText","TextRenderComponent","VelocitySystem","VelocityTargetSystem","perSecond","GameMap","minimum","maximum","positions","owners","minimumBound","maximumBound","yScale","vector","space","hasEntityAt","coord","getCoordinate","toString","loc","results","dx","dy","neighborCoordinate","getEntityAt","v","BaseGameModel","eventQueue","ecs","lastTime","entityMap","running","parentElement","paused","timeScale","keySet","mouseAction","clicksPerFrame","actionSet","selection","firstLoad","setSelection","getSelection","ids","findCanvas","_deltaTime","install","performance","now","firstInit","initSystems","addListener","interaction","uninstall","createSystem","addSystems","time","updateInput","onUpdate","ParticleManager","creators","mutators","renderers","particles","nextParticle","effectName","creator","renderer","mutator","effect","state","create","particle","draw","TurretBase","TurretBaseRenderSystem","TurretBaseComponent","turretBase","ProjectileType","speed","damage","splashRadius","DEFAULT","projectile","canFire","barrelOffsets","barrel","fireStrictness","arcReached","projectileType","tags","WeaponSystem","WeaponComponent","creeps","eventName","weapon","CreepComponent","bestInRange","creepInRange","creepIdx","creep","isValidCreep","tagIntersection","intersection","creepPos","pointRadiusPointCollision","DamageTargetSystem","DamageTargetComponent","DamageComponent","_","damageTarget","rand","top","arr","shuffleArray","array","j","temp","SplashDamageSystem","SplashDamageComponent","targets","fireTex","splashDamage","entityIdx","createExplosion","gaussian","MinigunTower","description","rotationRate","fireRate","cost","levelSprites","upgrades","dataDelta","projectileSpawner","MissileTower","t2","t3","SwarmerTower","barrels","SniperTower","createUIText","createUIRegion","makeBlood","ppos","NameComponent","ValueComponent","value","tex","bullet","makeSmokeTrail","baseVelocity","vel","equals","missile","swarmMissile","TowerManager","towerTextures","towers","projectileSpawners","baseSprite","towerType","combineUpgrades","towerName","tower","SellableComponent","UpgradeComponent","cloneDeep","baseData","dataLayer","slice","upgrade","dryRun","money","checkCollision","collides","blocked","eastWestPath","getPath","findEastWest","northSouthPath","findNorthSouth","setEastWestPath","setNorthSouthPath","it","checkVector","getMap","Direction","cardinal","NORTH","EAST","SOUTH","WEST","all","NORTHEAST","SOUTHEAST","SOUTHWEST","NORTHWEST","PathNode","Pathfinder","pathable","startingPosition","endingPositions","allowedDirections","getAllCardinal","nwBound","seBound","compress","queue","newEndingPositions","newBlocked","visited","node","dir","isBlocked","fromPath","JSON","stringify","current","newSolution","prev","curr","next","prevDelta","newDelta","PathChecker","southEnd","eastEnd","findPath","getVirtualSize","makeFastCreepProducer","statModifier","modifier","makeFlyingCreepProducer","makeNormalCreepProducer","CreepManager","northNormalCreepGenerator","eastNormalCreepGenerator","northNormalPlusCreepGenerator","eastNormalPlusCreepGenerator","northFastCreepGenerator","eastFastCreepGenerator","northFlyingCreepGenerator","eastFlyingCreepGenerator","getStatModifier","_getStatModifier","getNorthSouthPath","getEastWestPath","waveType","isNorthWave","isEastWave","SoundEffect","cutoff","loop","start","onLoad","duration","end","_playing","currentCutoffTimeout","currentLoopTimeout","currentDurationTimeout","Audio","getDuration","play","currentTime","setTimeout","playRec","clearTimeout","stop","pause","isAudioEnabled","globalState","audio","SoundEffectPool","poolSize","pool","baseEffect","GameModel","particleManager","unstructured","lives","waveSet","persistence","_actionMap","actionQueue","mouseEntity","towerManager","pathChecker","floorTile","creepManager","activeTower","northSpawnerID","eastSpawnerID","score","arrow","first","audioLoop","turretFireSound","sellSound","creepDeathSound","creepEscapeSound","buildSound","initActions","_getEastWestPath","_getNorthSouthPath","initParticleEffects","handleClick","ent","northSpawner","eastSpawner","northSpawnerData","northSprite","eastSpawnerData","eastSprite","getEastWave","eastCount","eastEntity","nextEast","getNorthWave","northCount","northEntity","nextNorth","nextWave","createAction","addEffectManager","east","eid","keyMap","clearListeners","addKeyListener","attemptSell","sendWave","attemptUpgrade","clearMouseMode","setMouseMode","toFixed","tower1","actionMap","tower2","tower3","tower4","sel","val","join","sellButton","upgradeButton","exitButton","createUI","createSpawner","createBlocker","buildTower","_action","createDemoTower","invalidateSelection","canPlace","createTower","getTower","blockerID","asImmutable"],"mappings":"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","file":"440.js","sourcesContent":["export abstract class Component {\n  public abstract getName(): string;\n  protected defaultData(): Record<string, unknown> {\n    return {};\n  }\n\n  public init(initialData?: Record<string, unknown>): Record<string, unknown> {\n    return Object.assign(this.defaultData(), initialData || {});\n  }\n}\n","/**\n * Immutable Vector2 class.\n */\nexport class Vector2 {\n  /**\n   * A constant zero vector.\n   */\n  static ZERO: Vector2 = new Vector2(0, 0);\n\n  /**\n   * A constant one vector.\n   */\n  static ONES: Vector2 = new Vector2(1, 1);\n\n  private _x = 0;\n  private _y = 0;\n\n  /**\n   * Initializes a vector with X and Y components.\n   *\n   * @param x The X component.\n   * @param y The Y component.\n   */\n  constructor(x: number, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  /**\n   * @returns A normalized random vector in Quadrant 1.\n   */\n  static random(): Vector2 {\n    return new Vector2(Math.random(), Math.random()).normalize();\n  }\n\n  /**\n   * @param angle The angle to create the vector from, in degrees.\n   * @returns A unit vector pointing towards the given angle.\n   */\n  static fromAngle(angle: number, scalar?: number): Vector2 {\n    return new Vector2(\n      Math.cos(angle * (Math.PI / 180)) * (scalar || 1),\n      Math.sin(angle * (Math.PI / 180)) * (scalar || 1)\n    );\n  }\n\n  /**\n   * @param number The number to put into both components of the vector.\n   * @returns A vector with both components equal to number.\n   */\n  static matching(number: number): Vector2 {\n    return new Vector2(number, number);\n  }\n\n  /**\n   * Finds the distance between two Vector2s.\n   *\n   * @param pos1 The first point.\n   * @param pos2 The second point.\n   * @returns The distance between the two points.\n   */\n  public static distance(pos1: Vector2, pos2: Vector2): number {\n    return Math.sqrt(\n      Math.pow(pos1.x - pos2.x, 2) + Math.pow(pos1.y - pos2.y, 2)\n    );\n  }\n\n  /**\n   * Finds the square distance between two Vector2s. Tends to be faster than\n   * {@link Vector2#distance}.\n   *\n   * @param pos1 The first point.\n   * @param pos2 The second point.\n   * @returns The distance between the two points.\n   */\n  public static squareDistance(pos1: Vector2, pos2: Vector2): number {\n    return Math.pow(pos1.x - pos2.x, 2) + Math.pow(pos1.y - pos2.y, 2);\n  }\n\n  get x(): number {\n    return this._x;\n  }\n\n  get y(): number {\n    return this._y;\n  }\n\n  squareMagnitude(): number {\n    return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n  }\n\n  magnitude(): number {\n    return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n  }\n\n  normalize(): Vector2 {\n    const magnitude = this.magnitude();\n    if (magnitude == 0) {\n      return Vector2.ZERO;\n    }\n    return new Vector2(this.x / magnitude, this.y / magnitude);\n  }\n\n  piecewiseScale(scalar: Vector2): Vector2 {\n    return new Vector2(this.x * scalar.x, this.y * scalar.y);\n  }\n\n  scale(scalar: number): Vector2 {\n    return new Vector2(this.x * scalar, this.y * scalar);\n  }\n\n  add(other: Vector2): Vector2 {\n    return new Vector2(this.x + other.x, this.y + other.y);\n  }\n\n  addConstant(x: number, y: number): Vector2 {\n    return new Vector2(this.x + x, this.y + y);\n  }\n\n  floor(): Vector2 {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  }\n\n  ceil(): Vector2 {\n    return new Vector2(Math.ceil(this.x), Math.ceil(this.y));\n  }\n\n  /**\n   * Adds another vector to this vector, scaling the other by a given factor.\n   *\n   * @param other The other vector to add.\n   * @param scalar The amount to scale the other vector by.\n   * @returns The resulting vector of this + other * scalar.\n   */\n  addScaled(other: Vector2, scalar: number): Vector2 {\n    return new Vector2(this.x + other.x * scalar, this.y + other.y * scalar);\n  }\n\n  subtract(other: Vector2): Vector2 {\n    return new Vector2(this.x - other.x, this.y - other.y);\n  }\n\n  /**\n   * Subtracts another vector from this vector, scaling the other by a given factor.\n   *\n   * @param other The other vector to subtract.\n   * @param scalar The amount to scale the other vector by.\n   * @returns The resulting vector of this - other * scalar.\n   */\n  subtractScaled(other: Vector2, scalar: number): Vector2 {\n    return new Vector2(this.x - other.x * scalar, this.y - other.y * scalar);\n  }\n\n  rotate(degrees: number): Vector2 {\n    const rad = (degrees * Math.PI) / 180;\n    const val = new Vector2(\n      this.x * Math.cos(rad) - Math.sin(rad) * this.y,\n      this.x * Math.sin(rad) + this.y * Math.cos(rad)\n    );\n    return val;\n  }\n\n  toAngle(): number {\n    return Math.atan2(this.y, this.x) * (180 / Math.PI);\n  }\n\n  determinant(other: Vector2): number {\n    return this.x * other.y - this.y * other.x;\n  }\n\n  toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  public equals(other: unknown): boolean {\n    return (\n      other !== undefined &&\n      typeof other === \"object\" &&\n      Object.prototype.hasOwnProperty.call(other, \"_x\") &&\n      Object.prototype.hasOwnProperty.call(other, \"_y\") &&\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore We literally test for it above\n      other.x === this.x &&\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore We literally test for it above\n      other.y === this.y\n    );\n  }\n\n  public hashCode(): number {\n    return 31 * this.x + this.y;\n  }\n}\n\nexport default Vector2;\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport Vector2 from \"../../geometry/Vector2\";\n\nexport interface PositionData extends Record<string, unknown> {\n  position: DynamicConstant<Vector2>; // virtual coordinate units\n}\n\nexport type PositionEntity = Entity & { data: { position: PositionData } };\n\nexport class Position extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): PositionData {\n    return { position: Vector2.ZERO };\n  }\n}\n\nexport const PositionComponent = new Position();\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\n\nexport interface RotationData extends Record<string, unknown> {\n  rotation: DynamicConstant<number>; // degrees\n}\n\nexport type RotationEntity = Entity & { data: { rotation: RotationData } };\n\nexport class Rotation extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n  protected defaultData(): RotationData {\n    return { rotation: 0 };\n  }\n}\n\nexport const RotationComponent = new Rotation();\n","export interface ActionHandler {\n  (action: Action, data?: Record<string, unknown>): void;\n}\n\nexport class Action {\n  public _name: string;\n  private handlers: Array<ActionHandler> = [];\n\n  constructor(name: string) {\n    this._name = name;\n  }\n\n  public addHandler(handler: ActionHandler): void {\n    this.handlers.push(handler);\n  }\n\n  public invoke(data?: Record<string, unknown>): void {\n    for (let handler = 0; handler < this.handlers.length; handler++) {\n      this.handlers[handler](this, data);\n    }\n  }\n\n  public clear(): void {\n    this.handlers = [];\n  }\n\n  public get name(): string {\n    return this._name;\n  }\n}\n\nexport interface ImmutableActionMap {\n  invoke(name: string, data?: Record<string, unknown>): void;\n}\n\nexport class ActionMap {\n  private actions: Map<string, Action>;\n  private serializeActions: Array<string>;\n\n  constructor() {\n    this.actions = new Map();\n    this.serializeActions = [];\n  }\n\n  public createAction(name: string, serialize = false): void {\n    const action = new Action(name);\n    this.actions.set(name, action);\n    if (serialize) {\n      this.serializeActions.push(name);\n    }\n  }\n\n  public addHandler(name: string, handler: ActionHandler): void {\n    if (!this.actions.has(name)) {\n      console.warn(\"Trying to add a handler on a nonexistent action.\");\n      return;\n    }\n    this.actions.get(name).addHandler(handler);\n  }\n\n  public invoke(name: string, data?: Record<string, unknown>): void {\n    if (!this.actions.has(name)) {\n      return;\n    }\n\n    this.actions.get(name).invoke(data);\n  }\n\n  public clear(): void {\n    this.actions.clear();\n  }\n\n  public clearListeners(): void {\n    for (const action of this.actions) {\n      action[1].clear();\n    }\n  }\n\n  public serialize(): Array<string> {\n    return [...this.serializeActions];\n  }\n\n  public asImmutable(): ImmutableActionMap {\n    return this;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport { PositionEntity } from \"./Position\";\n\nexport interface RangeData extends Record<string, unknown> {\n  range: number; // virtual coordinate units per second\n}\n\nexport type RangeEntity = Entity &\n  PositionEntity & { data: { range: RangeData } };\n\nexport class Range extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): RangeData {\n    return { range: 1 };\n  }\n}\n\nexport const RangeComponent = new Range();\n","import { Constructor } from \"./Constructor\";\nimport { lowerFirst } from \"lodash\";\nimport { Component } from \"../Component\";\n\nexport function AutoName(target: Constructor<Component>) {\n  return class extends target {\n    getName(): string {\n      return lowerFirst(target.name);\n    }\n  };\n}\n","import { Component } from \"../../ecs/Component\";\nimport { AutoName } from \"../../ecs/decorators/AutoName\";\n\n@AutoName\nexport class Selected extends Component {}\n\nexport const SelectedComponent = new Selected();\nexport default SelectedComponent;\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"../data/Position\";\nimport { RangeEntity } from \"../data/Range\";\n\nexport interface RangeDisplayData extends Record<string, unknown> {\n  strokeStyle: string;\n  fillStyle: string;\n  lineWidth: number;\n  offset: DynamicConstant<Vector2>;\n}\n\nexport type RangeDisplayEntity = Entity &\n  PositionEntity &\n  RangeEntity & { data: { rangeDisplay: RangeDisplayData } };\n\nexport class RangeDisplay extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): RangeDisplayData {\n    return {\n      range: 1,\n      strokeStyle: \"#ff0000ff\",\n      fillStyle: \"#ffffff00\",\n      lineWidth: 0,\n      offset: Vector2.ZERO,\n    };\n  }\n}\n\nexport const RangeDisplayComponent = new RangeDisplay();\n","export class Entity {\n  id: number;\n  data: Record<string, Record<string, unknown>>;\n  active = true;\n\n  constructor(\n    id: number,\n    initialData?: Record<string, Record<string, unknown>>\n  ) {\n    this.id = id;\n    this.data = initialData || {};\n  }\n}\n","import { BaseGameModel } from \"../data/BaseGameModel\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { System } from \"./System\";\n\nexport interface EntityEvent {\n  event: string;\n  entity: Entity;\n  extra?: Record<string, unknown>;\n}\n\ninterface EntityEventListener {\n  (event: EntityEvent): void;\n}\n\nexport type EntityResolvable = Entity | number;\n\nexport class ECSManager {\n  private nextId = 0;\n  private entities: Map<number, Entity>;\n  private entityComponents: Map<string, Set<number>>;\n  private systems: Map<number, Set<System>>;\n  private interestedSystems: Map<string, Set<System>>;\n  private allSystems: Set<System>;\n  private systemOrder: Array<number>;\n  private availableIDs: Array<number>;\n  private events: Array<EntityEvent>;\n  private listeners: Map<string, Array<EntityEventListener>>;\n\n  constructor(initialPoolSize = 250) {\n    this.entities = new Map();\n    this.systems = new Map();\n    this.entityComponents = new Map();\n    this.allSystems = new Set();\n    this.systemOrder = [];\n    this.update = this.update.bind(this);\n    this.getEntityIDsWithComponent = this.getEntityIDsWithComponent.bind(this);\n    this.getEntitiesWithComponent = this.getEntitiesWithComponent.bind(this);\n    this.interestedSystems = new Map();\n    this.availableIDs = [];\n    this.events = [];\n    this.listeners = new Map();\n    for (let i = 0; i < initialPoolSize; i++) {\n      this.createEntity({}, false);\n      this.removeEntity(i);\n    }\n  }\n\n  public createEntity(\n    initialData?: Record<string, Record<string, unknown>>,\n    allowReuse = true\n  ): number {\n    if (this.availableIDs.length > 0 && allowReuse) {\n      const id = this.availableIDs.splice(0, 1)[0];\n      const entity = this.entities.get(id);\n      entity.data = initialData || {};\n      entity.active = true;\n      this.emitEvent(\"ecs:create\", entity);\n      return id;\n    } else {\n      const id = this.nextId++;\n      const entity = new Entity(id, initialData);\n      this.entities.set(id, entity);\n      this.emitEvent(\"ecs:create\", entity);\n      return id;\n    }\n  }\n\n  public listenEvent(event: string, listener: EntityEventListener): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(listener);\n  }\n\n  public emitEvent(\n    event: string,\n    entity: Entity,\n    extra?: Record<string, unknown>\n  ): void {\n    this.events.push({ event, entity, extra });\n  }\n\n  private resolveId(entity: EntityResolvable): number {\n    if (typeof entity === \"number\" || typeof entity === \"bigint\") {\n      if (entity >= this.nextId || !this.entities.has(entity)) {\n        console.warn(`Cannot resolve entity ${entity}; it does not exist.`);\n        return -1;\n      }\n      return entity;\n    }\n    return entity.id;\n  }\n\n  private resolveEntity(\n    entity: EntityResolvable,\n    quiet = false\n  ): Entity | null {\n    if (typeof entity === \"number\" || typeof entity === \"bigint\") {\n      const entityID = entity;\n      if (entityID >= this.nextId || !this.entities.has(entityID)) {\n        if (!quiet) {\n          console.warn(`Cannot resolve entity ${entity}; it does not exist.`);\n        }\n        return null;\n      }\n      const e = this.entities.get(entity);\n      if (!e.active) {\n        if (!quiet) {\n          console.warn(`Cannot resolve entity ${entity}; it has been deleted.`);\n        }\n        return null;\n      }\n      return e;\n    }\n    return entity;\n  }\n\n  public createSystem(system: System, wave = 1): void {\n    if (!this.systems.has(wave)) {\n      this.systems.set(wave, new Set());\n      this.systemOrder.push(wave);\n      this.systemOrder.sort();\n    }\n    this.systems.get(wave).add(system);\n    this.allSystems.add(system);\n    const basis = system.getBasisComponent();\n    if (basis !== null) {\n      if (!this.interestedSystems.has(basis.getName())) {\n        this.interestedSystems.set(basis.getName(), new Set());\n      }\n      this.interestedSystems.get(basis.getName()).add(system);\n    }\n    system.setManager(this);\n  }\n\n  public removeSystem(system: System): void {\n    this.allSystems.delete(system);\n    this.systems.forEach((systemSet) => {\n      if (systemSet.has(system)) {\n        systemSet.delete(system);\n      }\n    });\n  }\n\n  public hasComponent(entity: EntityResolvable, component: Component): boolean {\n    const e = this.resolveEntity(entity);\n    if (e === null || e === undefined) {\n      return false;\n    }\n    return component.getName() in e.data;\n  }\n\n  public addComponent(\n    entityID: EntityResolvable,\n    component: Component,\n    initialData?: Record<string, unknown>\n  ): void {\n    const entity = this.resolveEntity(entityID);\n    if (entity === null) return;\n    entity.data[component.getName()] = component.init(initialData);\n\n    if (this.interestedSystems.get(component.getName()) !== undefined) {\n      for (const system of this.interestedSystems.get(component.getName())) {\n        system.notify(component.getName(), entity);\n      }\n    }\n    this.emitEvent(\"ecs:addComponent\", entity, { component });\n\n    if (!this.entityComponents.has(component.getName())) {\n      this.entityComponents.set(component.getName(), new Set());\n    }\n    this.entityComponents.get(component.getName()).add(entity.id);\n  }\n\n  public getEntity(entity: EntityResolvable, quiet = false): Entity | null {\n    return this.resolveEntity(entity, quiet);\n  }\n\n  public getEntityIDsWithComponent(component: Component): Array<number> {\n    const componentName = component.getName();\n    if (this.entityComponents.has(componentName)) {\n      const res: Array<number> = [];\n      for (const id of this.entityComponents.get(componentName)) {\n        const entity = this.resolveEntity(id, true);\n        if (entity !== null && entity.active) {\n          res.push(id);\n        }\n      }\n      return res;\n    }\n    return [];\n  }\n\n  public getEntitiesWithComponent(component: Component): Array<Entity> {\n    const componentName = component.getName();\n    if (this.entityComponents.has(componentName)) {\n      const res: Array<Entity> = [];\n      for (const id of this.entityComponents.get(componentName)) {\n        const entity = this.resolveEntity(id, true);\n        if (\n          entity !== null &&\n          entity.active &&\n          entity.data[componentName] !== undefined\n        ) {\n          res.push(entity);\n        }\n      }\n      return res;\n    }\n    return [];\n  }\n\n  public removeComponent(\n    entityID: EntityResolvable,\n    component: Component\n  ): void {\n    const entity = this.resolveEntity(entityID);\n    if (entity === null) return;\n    if (component.getName() in entity.data) {\n      delete entity.data[component.getName()];\n    }\n\n    if (!this.entityComponents.has(component.getName())) {\n      this.entityComponents.set(component.getName(), new Set());\n    }\n    this.emitEvent(\"ecs:removeComponent\", entity, { component });\n\n    this.entityComponents.get(component.getName()).delete(entity.id);\n\n    if (this.interestedSystems.has(component.getName())) {\n      const systems = this.interestedSystems.get(component.getName());\n      for (const system of systems) {\n        system.notify(\"__delete\", this.entities.get(entity.id));\n      }\n    }\n  }\n\n  public update(elapsedTime: number, model: BaseGameModel): void {\n    for (let eventIdx = 0; eventIdx < this.events.length; eventIdx++) {\n      const { event } = this.events[eventIdx];\n      if (this.listeners.has(event)) {\n        const listeners = this.listeners.get(event);\n        for (\n          let listenerIdx = 0;\n          listenerIdx < listeners.length;\n          listenerIdx++\n        ) {\n          listeners[listenerIdx](this.events[eventIdx]);\n        }\n      }\n    }\n    this.events.length = 0;\n    for (let orderIdx = 0; orderIdx < this.systemOrder.length; orderIdx++) {\n      const wave = this.systemOrder[orderIdx];\n      const systems = this.systems.get(wave);\n      for (const system of systems) {\n        system.update(elapsedTime, model);\n      }\n    }\n  }\n\n  public removeEntity(entityID: EntityResolvable): void {\n    const entity = this.resolveEntity(entityID);\n    if (entity === null) return;\n    for (const system of this.allSystems) {\n      system.notify(\"__delete\", this.entities.get(entity.id));\n    }\n    this.emitEvent(\"ecs:delete\", entity);\n    entity.data = {};\n    entity.active = false;\n    this.availableIDs.push(entity.id);\n  }\n\n  clear(): void {\n    // Notify all systems that we're done with this.\n    for (const system of this.allSystems) {\n      system.notify(\"__clear\", null);\n    }\n    // Actually remove the entity.\n    for (const entityID of this.entities.keys()) {\n      this.entities.delete(entityID);\n    }\n    this.availableIDs = [];\n    this.nextId = 0;\n  }\n}\n\nexport const DefaultManager = new ECSManager();\nexport default DefaultManager;\n","export class KeyboardInput {\n  private listeners: Array<KeyboardListener> = [];\n  private events: Array<KeyboardInteraction> = [];\n  private keyListeners: Map<string, Array<KeyboardListener>> = new Map();\n  private keyPushed: Map<string, boolean> = new Map();\n\n  constructor() {\n    this.keyDown = this.keyDown.bind(this);\n    this.keyUp = this.keyUp.bind(this);\n  }\n\n  public install(): void {\n    window.addEventListener(\"keydown\", this.keyDown);\n    window.addEventListener(\"keyup\", this.keyUp);\n  }\n\n  private keyDown(evt: KeyboardEvent) {\n    this.events.push({ key: evt.key, down: true });\n  }\n\n  private keyUp(evt: KeyboardEvent) {\n    this.events.push({ key: evt.key, down: false });\n  }\n\n  public addListener(listener: KeyboardListener): void {\n    this.listeners.push(listener);\n  }\n\n  public addKeyListener(key: string, listener: KeyboardListener): void {\n    if (!this.keyListeners.has(key.toLowerCase())) {\n      this.keyListeners.set(key.toLowerCase(), []);\n    }\n    this.keyListeners.get(key.toLowerCase()).push(listener);\n  }\n\n  public clearListeners(): void {\n    this.keyListeners.clear();\n    this.listeners = [];\n  }\n\n  public update(): void {\n    for (let i = 0; i < this.events.length; i++) {\n      const event = this.events[i];\n      const key = event.key.toLowerCase();\n      if (this.keyPushed.get(key) !== event.down) {\n        this.keyPushed.set(key, event.down);\n        if (this.keyListeners.has(key)) {\n          const keyListeners = this.keyListeners.get(key);\n          for (let listener = 0; listener < keyListeners.length; listener++) {\n            keyListeners[listener](event);\n          }\n        }\n        for (let listener = 0; listener < this.listeners.length; listener++) {\n          this.listeners[listener](event);\n        }\n      }\n    }\n    this.events.length = 0;\n  }\n\n  public uninstall(): void {\n    window.removeEventListener(\"keydown\", this.keyDown);\n    window.removeEventListener(\"keyup\", this.keyUp);\n  }\n}\n\nexport interface KeyboardInteraction {\n  down: boolean;\n  key: string;\n}\n\nexport interface KeyboardListener {\n  (interaction: KeyboardInteraction): void;\n}\n","import { BaseGameModel } from \"../data/BaseGameModel\";\nimport Vector2 from \"../geometry/Vector2\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nexport class MouseState {\n  public isLeftMouseDown = false;\n  public isRightMouseDown = false;\n  public mouseCoordinate: Vector2 = Vector2.ZERO;\n}\n\nexport class MouseInput {\n  private mouse: MouseState = new MouseState();\n  private listeners: Array<OnClickListener> = [];\n  private events: Array<MouseInteraction> = [];\n\n  constructor() {\n    this.getMousePosition = this.getMousePosition.bind(this);\n  }\n\n  public install(element: HTMLElement, virtualCanvas: VirtualCanvas) {\n    element.addEventListener(\"mousemove\", (evt) => {\n      const coordinates = virtualCanvas.getCoordinates();\n      const offset = virtualCanvas.getOffset();\n      this.mouse.mouseCoordinate = coordinates.inverseTranslate(\n        new Vector2(evt.x, evt.y).subtract(offset)\n      );\n    });\n    element.addEventListener(\"mousedown\", (_evt) => {\n      this.mouse.isLeftMouseDown = true;\n      this.events.push({\n        coordinate: this.mouse.mouseCoordinate,\n        leftDown: true,\n      });\n    });\n    element.addEventListener(\"mouseup\", (_evt) => {\n      this.mouse.isLeftMouseDown = false;\n      this.events.push({\n        coordinate: this.mouse.mouseCoordinate,\n        leftDown: false,\n      });\n    });\n  }\n\n  public addListener(listener: OnClickListener) {\n    this.listeners.push(listener);\n  }\n\n  public update() {\n    for (let i = 0; i < this.events.length; i++) {\n      const event = this.events[i];\n      for (let listener = 0; listener < this.listeners.length; listener++) {\n        this.listeners[listener](event);\n      }\n    }\n    this.events.length = 0;\n  }\n\n  public getMousePosition(): Vector2 {\n    return this.mouse.mouseCoordinate;\n  }\n}\n\nexport interface MouseInteraction {\n  coordinate: Vector2;\n  leftDown: boolean;\n}\n\nexport interface OnClickListener {\n  (interaction: MouseInteraction): void;\n}\n","import Vector2 from \"../geometry/Vector2\";\n\nexport class VirtualCoordinateSystem {\n  private scaleX: number;\n  private scaleY: number;\n\n  constructor(scaleX: number, scaleY: number) {\n    this.scaleX = scaleX;\n    this.scaleY = scaleY;\n    this.translate = this.translate.bind(this);\n    this.translateValueX = this.translateValueX.bind(this);\n    this.translateValueY = this.translateValueY.bind(this);\n  }\n\n  translate(v1: Vector2): Vector2 {\n    return new Vector2(v1.x * this.scaleX, v1.y * this.scaleY);\n  }\n\n  inverseTranslate(v1: Vector2): Vector2 {\n    return new Vector2(v1.x / this.scaleX, v1.y / this.scaleY);\n  }\n\n  translateValueX(p: number): number {\n    return p * this.scaleX;\n  }\n\n  translateValueY(p: number): number {\n    return p * this.scaleY;\n  }\n}\n\nexport interface CoordinateTranslatable {\n  translate(v1: Vector2): Vector2;\n  translateValueX(p: number): number;\n  translateValueY(p: number): number;\n}\n","import Vector2 from \"../geometry/Vector2\";\nimport { Texture } from \"./Texture\";\nimport { VirtualCoordinateSystem } from \"./VirtualCoordinate\";\n\nexport class VirtualCanvas {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private virtualSize: Vector2;\n  private aspectRatio: Vector2;\n  private offset: Vector2 = Vector2.matching(0.5);\n  private vcs: VirtualCoordinateSystem;\n  private installed = false;\n  private parent: HTMLElement;\n\n  constructor(virtualSize: Vector2) {\n    this.virtualSize = virtualSize;\n    this.aspectRatio = virtualSize.normalize();\n  }\n\n  public install(element: HTMLElement): void {\n    const canvas = document.createElement(\"canvas\");\n    this.canvas = canvas;\n    this.initCanvas();\n    element.appendChild(canvas);\n    this.parent = element;\n    this.installed = true;\n    this.resize();\n  }\n\n  private initCanvas() {\n    const canvas = this.canvas;\n    this.context = this.canvas.getContext(\"2d\");\n    canvas.width = this.virtualSize.x;\n    canvas.height = this.virtualSize.y;\n    canvas.id = \"canvas\";\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  public drawGrid(): void {\n    for (let x = 0; x < this.virtualSize.x; x++) {\n      this.line(\n        new Vector2(x, 0),\n        new Vector2(x, this.virtualSize.y),\n        \"#000000ff\"\n      );\n    }\n    for (let y = 0; y < this.virtualSize.y; y++) {\n      this.line(\n        new Vector2(0, y),\n        new Vector2(this.virtualSize.x, y),\n        \"#000000ff\"\n      );\n    }\n  }\n\n  public findCanvas(): void {\n    const el = document.getElementById(\"canvas\");\n    if (el.nodeName.toLowerCase() !== \"canvas\") {\n      console.error(`Cannot find valid canvas, found ${el.nodeName} instead.`);\n    } else {\n      this.canvas = el as HTMLCanvasElement;\n      this.initCanvas();\n    }\n  }\n\n  public uninstall(): void {\n    this.installed = false;\n    this.parent.removeEventListener(\"resize\", this.resize);\n  }\n\n  public drawWorldText(\n    text: string,\n    position: Vector2,\n    style?: string,\n    size = 1,\n    font = \"Montserrat\",\n    textAlign: CanvasTextAlign = \"center\",\n    weight = 500\n  ): void {\n    const splits = text.trim().split(\"\\n\");\n    this.context.fillStyle = style || \"#ffffff\";\n    this.context.font = `${weight} ${\n      size * this.vcs.translateValueY(0.5)\n    }px ${font}`;\n    this.context.textAlign = textAlign;\n    for (let i = 0; i < splits.length; i++) {\n      const adjustedPosition = this.vcs.translate(\n        position.addConstant(0.5, i + 0.5)\n      );\n      this.context.fillText(splits[i], adjustedPosition.x, adjustedPosition.y);\n    }\n  }\n\n  public drawText(\n    text: string,\n    position: Vector2,\n    style?: string,\n    size = 1,\n    font = \"Montserrat\",\n    textAlign: CanvasTextAlign = \"center\",\n    weight = 500\n  ): void {\n    const splits = text.trim().split(\"\\n\");\n    this.context.fillStyle = style || \"#ffffff\";\n    this.context.font = `${weight} ${\n      size * this.vcs.translateValueY(0.5)\n    }px ${font}`;\n    this.context.textAlign = textAlign;\n    for (let i = 0; i < splits.length; i++) {\n      const adjustedPosition = this.vcs.translate(position.addConstant(0, i));\n      this.context.fillText(splits[i], adjustedPosition.x, adjustedPosition.y);\n    }\n  }\n\n  public drawImage(\n    texture: Texture,\n    position: Vector2,\n    size: Vector2,\n    rotation = 0,\n    opacity = 1\n  ): void {\n    if (!texture || !texture.ready) {\n      return;\n    }\n    this.context.globalAlpha = opacity;\n    const adjustedPosition = this.vcs.translate(position.add(this.offset));\n    const adjustedSize = this.vcs.translate(size);\n    this.context.save();\n    this.context.translate(adjustedPosition.x, adjustedPosition.y);\n    this.context.rotate((rotation * Math.PI) / 180);\n    this.context.translate(-adjustedPosition.x, -adjustedPosition.y);\n    this.context.drawImage(\n      texture.texture,\n      adjustedPosition.x - adjustedSize.x / 2,\n      adjustedPosition.y - adjustedSize.y / 2,\n      adjustedSize.x,\n      adjustedSize.y\n    );\n    this.context.restore();\n    this.context.globalAlpha = 1;\n  }\n\n  public drawCircle(\n    center: Vector2,\n    radius: number,\n    fillStyle?: string,\n    strokeStyle?: string,\n    lineWidth?: number\n  ): void {\n    const adjustedPosition = this.vcs.translate(center.add(this.offset));\n    const adjustedRadius = this.vcs.translateValueX(radius);\n\n    this.context.fillStyle = fillStyle || \"#ffffff00\";\n    this.context.beginPath();\n    this.context.arc(\n      adjustedPosition.x,\n      adjustedPosition.y,\n      adjustedRadius,\n      0,\n      2 * Math.PI\n    );\n    this.context.fill();\n\n    this.context.strokeStyle = strokeStyle || \"#ff0000\";\n    this.context.lineWidth = this.vcs.translateValueX(lineWidth) || 1;\n    this.context.arc(\n      adjustedPosition.x,\n      adjustedPosition.y,\n      adjustedRadius,\n      0,\n      2 * Math.PI\n    );\n    this.context.stroke();\n  }\n\n  public drawImageAnimated(\n    texture: Texture,\n    position: Vector2,\n    rotation: number,\n    size: Vector2,\n    frameSize: Vector2,\n    frame: number,\n    opacity = 1\n  ): void {\n    if (!texture.ready) {\n      return;\n    }\n    this.context.globalAlpha = opacity;\n    const adjustedPosition = this.vcs.translate(position.add(this.offset));\n    const adjustedSize = this.vcs.translate(size);\n    this.context.save();\n    this.context.translate(adjustedPosition.x, adjustedPosition.y);\n    this.context.rotate((rotation * Math.PI) / 180);\n    this.context.translate(-adjustedPosition.x, -adjustedPosition.y);\n    this.context.drawImage(\n      texture.texture,\n      frameSize.x * frame,\n      0,\n      frameSize.x,\n      frameSize.y,\n      adjustedPosition.x - adjustedSize.x / 2,\n      adjustedPosition.y - adjustedSize.y / 2,\n      adjustedSize.x,\n      adjustedSize.y\n    );\n    this.context.restore();\n    this.context.globalAlpha = 1;\n  }\n\n  public drawWorldRectangle(\n    p1: Vector2,\n    p2: Vector2,\n    fillStyle: string | CanvasPattern | CanvasGradient = \"#ffffff00\",\n    strokeStyle: string | CanvasPattern | CanvasGradient = \"#ffffff00\"\n  ): void {\n    const p1adj = this.vcs.translate(p1.addConstant(0.5, 0.5));\n    const p2adj = this.vcs.translate(p2.addConstant(0.5, 0.5));\n\n    this.context.fillStyle = fillStyle || \"#ff0000\";\n    this.context.fillRect(\n      p1adj.x,\n      p1adj.y,\n      p2adj.x - p1adj.x,\n      p2adj.y - p1adj.y\n    );\n\n    this.context.strokeStyle = strokeStyle || \"#ff0000\";\n    this.context.strokeRect(\n      p1adj.x,\n      p1adj.y,\n      p2adj.x - p1adj.x,\n      p2adj.y - p1adj.y\n    );\n  }\n\n  public drawRectangle(\n    p1: Vector2,\n    p2: Vector2,\n    fillStyle: string | CanvasPattern | CanvasGradient = \"#ffffff00\",\n    strokeStyle: string | CanvasPattern | CanvasGradient = \"#ffffff00\"\n  ): void {\n    const p1adj = this.vcs.translate(p1);\n    const p2adj = this.vcs.translate(p2);\n\n    this.context.fillStyle = fillStyle || \"#ff0000\";\n    this.context.fillRect(\n      p1adj.x,\n      p1adj.y,\n      p2adj.x - p1adj.x,\n      p2adj.y - p1adj.y\n    );\n\n    this.context.strokeStyle = strokeStyle || \"#ff0000\";\n    this.context.strokeRect(\n      p1adj.x,\n      p1adj.y,\n      p2adj.x - p1adj.x,\n      p2adj.y - p1adj.y\n    );\n  }\n\n  public line(\n    p1: Vector2,\n    p2: Vector2,\n    style?: string | CanvasPattern | CanvasGradient\n  ): void {\n    const p1adj = this.vcs.translate(p1);\n    const p2adj = this.vcs.translate(p2);\n    this.beginPath();\n    this.strokeStyle = style || \"#ff0000\";\n    this.context.lineTo(p1adj.x, p1adj.y);\n    this.context.lineTo(p2adj.x, p2adj.y);\n    this.stroke();\n  }\n\n  public beginPath(): void {\n    this.context.beginPath();\n  }\n\n  public set strokeStyle(style: string | CanvasPattern | CanvasGradient) {\n    this.context.strokeStyle = style;\n  }\n\n  public stroke(): void {\n    this.context.stroke();\n  }\n\n  private translate(vec: Vector2): void {\n    const target = this.vcs.translate(vec);\n    this.context.translate(target.x, target.y);\n  }\n\n  public clear(): void {\n    this.context.clearRect(\n      0,\n      0,\n      this.vcs.translateValueX(this.virtualSize.x),\n      this.vcs.translateValueY(this.virtualSize.y)\n    );\n  }\n\n  public getCoordinates(): VirtualCoordinateSystem {\n    return this.vcs;\n  }\n\n  public getOffset(): Vector2 {\n    const rect = this.canvas.getBoundingClientRect();\n    return new Vector2(rect.x, rect.y);\n  }\n\n  private resize(): void {\n    if (\n      this.parent.clientWidth / this.aspectRatio.x <\n      this.parent.clientHeight / this.aspectRatio.y\n    ) {\n      this.canvas.width = this.parent.clientWidth;\n      this.canvas.height =\n        (this.parent.clientWidth * this.aspectRatio.y) / this.aspectRatio.x;\n    } else {\n      this.canvas.width =\n        (this.parent.clientHeight * this.aspectRatio.x) / this.aspectRatio.y;\n      this.canvas.height = this.parent.clientHeight;\n    }\n\n    this.vcs = new VirtualCoordinateSystem(\n      this.canvas.width / this.virtualSize.x,\n      this.canvas.height / this.virtualSize.y\n    );\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../../ecs/Component\";\nimport { ECSManager } from \"../../../ecs/ECSManager\";\nimport { Entity } from \"../../../ecs/Entity\";\nimport { ClickableEntity } from \"./Clickable\";\n\nexport interface AbstractClickData extends Record<string, unknown> {\n  action: (entity: Entity, ecs: ECSManager) => void;\n}\n\nexport type AbstractClickEntity = ClickableEntity & {\n  data: { abstractClick: AbstractClickData };\n};\n\nexport class AbstractClick extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): AbstractClickData {\n    return {\n      action: () => {\n        return;\n      },\n    };\n  }\n}\n\nexport const AbstractClickComponent = new AbstractClick();\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../../data/DynamicConstant\";\nimport { Component } from \"../../../ecs/Component\";\nimport Vector2 from \"../../../geometry/Vector2\";\nimport { PositionEntity } from \"../../data/Position\";\n\nexport interface ClickableData extends Record<string, unknown> {\n  delta: DynamicConstant<Vector2>; // virtual coordinate units\n  offset: DynamicConstant<Vector2>;\n  thisClick: boolean;\n}\n\nexport type ClickableEntity = PositionEntity & {\n  data: { clickable: ClickableData };\n};\n\nexport class Clickable extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): ClickableData {\n    return {\n      delta: Vector2.ZERO,\n      offset: Vector2.ZERO,\n      thisClick: false,\n    };\n  }\n}\n\nexport const ClickableComponent = new Clickable();\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { BaseGameModel } from \"../data/BaseGameModel\";\nimport { Component } from \"./Component\";\nimport { ECSManager, EntityEvent } from \"./ECSManager\";\nimport { Entity } from \"./Entity\";\n\nexport interface System {\n  update(elapsedTime: number, gameMode: BaseGameModel): void;\n  notify(\n    deltaTime: string,\n    entity: Entity,\n    data?: Record<string, unknown>\n  ): void;\n  setManager(manager: ECSManager): void;\n\n  /**\n   * @returns The component that triggers interest in an entity.\n   */\n  getBasisComponent(): Component | null;\n\n  /**\n   * @returns The components that must already be present on the entity.\n   */\n  getRequiredComponents(): Set<Component>;\n\n  /**\n   * @returns The components that must not be present on the entity.\n   */\n  getExcludedComponents(): Set<Component>;\n}\n\nexport interface IntervalStorage {\n  rate: number;\n  elapsed: number;\n}\n\nexport abstract class BaseSystem implements System {\n  protected entities: Map<number, Entity> = new Map();\n  protected manager: ECSManager;\n\n  protected checkInterval(deltaTime: number, data: IntervalStorage): boolean {\n    if (deltaTime < 0) {\n      return false;\n    }\n    if (data.rate <= 0 || data.elapsed < 0) {\n      return false;\n    }\n    data.elapsed += deltaTime;\n    if (data.elapsed >= data.rate) {\n      data.elapsed -= data.rate;\n      return true;\n    }\n    return false;\n  }\n\n  public notify(\n    notification: string,\n    entity: Entity,\n    data?: Record<string, unknown>\n  ): void {\n    if (notification === \"__clear\") {\n      this.entities.clear();\n    } else if (notification === \"__delete\") {\n      this.entities.delete(entity.id);\n    } else if (notification === \"__remove_component\") {\n      const { componentName } = data;\n      const basis = this.getBasisComponent();\n      if (basis.getName() === componentName) {\n        this.entities.delete(entity.id);\n      }\n    } else if (this.checkBasis(notification, entity)) {\n      if (this.isInterested(notification, entity)) {\n        this.entities.set(entity.id, entity);\n      }\n    }\n  }\n\n  protected onManagerAwake(): void {\n    return;\n  }\n\n  public setManager(manager: ECSManager): void {\n    this.manager = manager;\n    this.onManagerAwake();\n  }\n\n  protected checkBasis(componentName: string, entity: Entity): boolean {\n    const required = this.getRequiredComponents();\n    const excluded = this.getExcludedComponents();\n    return (\n      this.checkRequired(componentName, entity, required) &&\n      this.checkExcluded(componentName, entity, excluded)\n    );\n  }\n\n  protected checkRequired(\n    componentName: string,\n    entity: Entity,\n    required: Set<Component>\n  ): boolean {\n    for (const requirement of required) {\n      if (!(requirement.getName() in entity.data)) {\n        console.warn(\n          `Could not find required component ${requirement.getName()} while adding ${componentName}; this is a required component and ${componentName} will not trigger related systems' interest.`\n        );\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected checkExcluded(\n    componentName: string,\n    entity: Entity,\n    excluded: Set<Component>\n  ): boolean {\n    for (const exclusion of excluded) {\n      if (exclusion.getName() in entity.data) {\n        console.warn(\n          `Found excluded component ${exclusion.getName()} while adding ${componentName}; this is an excluded component and ${componentName} will not trigger related systems' interest.`\n        );\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public update(deltaTime: number, model: BaseGameModel): void {\n    this.systemUpdate(deltaTime, model);\n    for (const entity of this.entities.values()) {\n      this.updateEntity(deltaTime, entity, model);\n    }\n  }\n\n  protected systemUpdate(deltaTime: number, model: BaseGameModel): void {\n    return;\n  }\n\n  private listener(entityEvent: EntityEvent) {\n    const { event, entity, extra } = entityEvent;\n    if (!this.entities.has(entity.id)) {\n      return;\n    }\n    this.onEvent(event, entity, extra);\n  }\n\n  private listenerNoCheck(entityEvent: EntityEvent) {\n    const { event, entity, extra } = entityEvent;\n    this.onEvent(event, entity, extra);\n  }\n\n  protected listen(event: string, requireComponent = true): void {\n    if (requireComponent) {\n      this.manager.listenEvent(event, this.listener.bind(this));\n    } else {\n      this.manager.listenEvent(event, this.listenerNoCheck.bind(this));\n    }\n  }\n\n  protected onEvent(\n    event: string,\n    entity: Entity,\n    extra?: Record<string, unknown>\n  ): void {\n    return;\n  }\n\n  /**\n   * @returns The component that triggers interest in an entity.\n   */\n  getBasisComponent(): Component | null {\n    return null;\n  }\n\n  /**\n   * @returns The components that must already be present on the entity.\n   */\n  getRequiredComponents(): Set<Component> {\n    return new Set();\n  }\n\n  /**\n   * @returns The components that must not be present on the entity.\n   */\n  getExcludedComponents(): Set<Component> {\n    return new Set();\n  }\n\n  protected isInterested(_componentName: string, _entity: Entity): boolean {\n    return true;\n  }\n\n  protected updateEntity(\n    deltaTime: number,\n    entity: Entity,\n    mode: BaseGameModel\n  ): void {\n    return;\n  }\n}\n","import {\n  AbstractClickComponent,\n  AbstractClickEntity,\n} from \"../components/behavior/click/AbstractClick\";\nimport { ClickableComponent } from \"../components/behavior/click/Clickable\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class AbstractClickSystem extends BaseSystem {\n  protected onManagerAwake(): void {\n    this.listen(\"click\");\n  }\n\n  protected onEvent(_event: string, entity: Entity): void {\n    const targetEntity = entity as AbstractClickEntity;\n    const { abstractClick } = targetEntity.data;\n    abstractClick.action(entity, this.manager);\n  }\n\n  getBasisComponent(): Component {\n    return AbstractClickComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    set.add(ClickableComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { VelocityEntity } from \"./Velocity\";\n\nexport interface AccelerationData extends Record<string, unknown> {\n  acceleration: DynamicConstant<Vector2>; // virtual coordinate units per second\n}\n\nexport type AccelerationEntity = VelocityEntity & {\n  data: { acceleration: AccelerationData };\n};\n\nexport class Acceleration extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): AccelerationData {\n    return { acceleration: Vector2.ZERO };\n  }\n}\n\nexport const AccelerationComponent = new Acceleration();\n","// eslint-disable-next-line @typescript-eslint/ban-types\nexport type DynamicConstant<T> = T extends Function ? never : T | (() => T);\n\nexport function getDynamic<T>(dc: DynamicConstant<T>): T {\n  return typeof dc === \"function\" ? dc() : dc;\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"./Position\";\n\nexport interface VelocityData extends Record<string, unknown> {\n  velocity: DynamicConstant<Vector2>; // virtual coordinate units per second\n}\n\nexport type VelocityEntity = Entity &\n  PositionEntity & { data: { velocity: VelocityData } };\n\nexport class Velocity extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): VelocityData {\n    return { velocity: Vector2.ZERO };\n  }\n}\n\nexport const VelocityComponent = new Velocity();\n","import { PositionComponent } from \"../components/data/Position\";\nimport {\n  AccelerationComponent,\n  AccelerationEntity,\n} from \"../components/data/Acceleration\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { VelocityComponent } from \"../components/data/Velocity\";\n\nexport class AccelerationSystem extends BaseSystem {\n  protected updateEntity(elapsedTime: number, entity: Entity): void {\n    const targetEntity = entity as AccelerationEntity;\n    const { velocity, acceleration } = targetEntity.data;\n    velocity.velocity = getDynamic(velocity.velocity).addScaled(\n      getDynamic(acceleration.acceleration),\n      elapsedTime\n    );\n  }\n\n  getBasisComponent(): Component {\n    return AccelerationComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    set.add(VelocityComponent);\n    return set;\n  }\n}\n","import Vector2 from \"../geometry/Vector2\";\n\nexport class Texture {\n  size: Vector2;\n  el: HTMLImageElement;\n  ready = false;\n  constructor(texture: string, size?: Vector2) {\n    this.el = new Image();\n    this.el.src = texture;\n    this.el.addEventListener(\"load\", (evt) => {\n      this.ready = true;\n      if (!size) {\n        this.size = new Vector2(this.el.naturalWidth, this.el.naturalHeight);\n      }\n    });\n  }\n\n  get texture(): CanvasImageSource {\n    return this.el;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport { Vector2 } from \"../../geometry/Vector2\";\nimport { Texture } from \"../../rendering/Texture\";\nimport { PositionEntity } from \"../data/Position\";\nimport { RotationEntity } from \"../data/Rotation\";\n\nexport interface AnimatedSpriteData extends Record<string, unknown> {\n  size: Vector2; // in virtual coordinates\n  frameSize: Vector2; // in pixel coordinates\n  source: Texture;\n  frames: Array<number>; // in seconds per frame\n  frame: number;\n  currentDuration: number; // in seconds\n  opacity: DynamicConstant<number>;\n}\n\nexport type AnimatedSpriteEntity = Entity &\n  PositionEntity &\n  RotationEntity & { data: { animatedSprite: AnimatedSpriteData } };\n\nexport class AnimatedSprite extends Component {\n  private static NoTex = new Texture(\n    \"assets/notex-anim.png\",\n    new Vector2(64, 32)\n  );\n\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): Record<string, unknown> {\n    return {\n      size: Vector2.ONES,\n      frameSize: Vector2.matching(32),\n      source: AnimatedSprite.NoTex,\n      frames: [1, 1],\n      frame: 0,\n      currentDuration: 0,\n      opacity: 1,\n    };\n  }\n}\n\nexport const AnimatedSpriteComponent = new AnimatedSprite();\nexport default AnimatedSpriteComponent;\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { Component } from \"../ecs/Component\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { RotationComponent } from \"../components/data/Rotation\";\nimport AnimatedSpriteComponent, {\n  AnimatedSpriteEntity,\n} from \"../components/rendering/AnimatedSprite\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport { getDynamic } from \"../data/DynamicConstant\";\n\nexport class AnimatedSpriteRenderSystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as AnimatedSpriteEntity;\n    const { animatedSprite, rotation, position } = targetEntity.data;\n    animatedSprite.currentDuration += deltaTime;\n    while (\n      animatedSprite.currentDuration >\n      animatedSprite.frames[animatedSprite.frame]\n    ) {\n      animatedSprite.currentDuration -=\n        animatedSprite.frames[animatedSprite.frame];\n      animatedSprite.frame =\n        (animatedSprite.frame + 1) % animatedSprite.frames.length;\n    }\n    this.virtualCanvas.drawImageAnimated(\n      animatedSprite.source,\n      getDynamic(position.position),\n      getDynamic(rotation.rotation),\n      animatedSprite.size,\n      animatedSprite.frameSize,\n      animatedSprite.frame,\n      getDynamic(animatedSprite.opacity)\n    );\n  }\n\n  getBasisComponent(): Component | null {\n    return AnimatedSpriteComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    set.add(RotationComponent);\n    return set;\n  }\n}\n","import { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { ClickableEntity } from \"../behavior/Clickable\";\nimport { lowerFirst } from \"lodash\";\n\nexport interface ClickableDisplayData extends Record<string, unknown> {\n  background: DynamicConstant<string | CanvasGradient | CanvasPattern>;\n  backgroundHover: DynamicConstant<string | CanvasGradient | CanvasPattern>;\n}\n\nexport type ClickableDisplayEntity = ClickableEntity & {\n  data: { clickableDisplay: ClickableDisplayData };\n};\n\nexport class ClickableDisplay extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): ClickableDisplayData {\n    return {\n      background: \"#77777755\",\n      backgroundHover: \"#aaaaaa55\",\n    };\n  }\n}\n\nexport const ClickableDisplayComponent = new ClickableDisplay();\n","import {\n  ClickableDisplayComponent,\n  ClickableDisplayEntity,\n} from \"../components/ui/ClickableDisplay\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { DynamicConstant, getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport Vector2 from \"../geometry/Vector2\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\n\nexport class ClickableDisplaySystem extends BaseSystem {\n  private mouse: DynamicConstant<Vector2>;\n  virtualCanvas: VirtualCanvas;\n\n  constructor(mouse: DynamicConstant<Vector2>, virtualCanvas: VirtualCanvas) {\n    super();\n    this.mouse = mouse;\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const mouse = getDynamic(this.mouse);\n    const targetEntity = entity as ClickableDisplayEntity;\n    const { position, clickable, clickableDisplay } = targetEntity.data;\n    const delta = getDynamic(clickable.delta);\n    const pos = getDynamic(position.position);\n    const northWest = pos.subtract(delta);\n    const southEast = pos.add(delta);\n    if (\n      mouse.x > northWest.x &&\n      mouse.y > northWest.y &&\n      mouse.x < southEast.x &&\n      mouse.y < southEast.y\n    ) {\n      this.virtualCanvas.drawRectangle(\n        northWest,\n        southEast,\n        getDynamic(clickableDisplay.backgroundHover)\n      );\n    } else {\n      this.virtualCanvas.drawRectangle(\n        northWest,\n        southEast,\n        getDynamic(clickableDisplay.backgroundHover)\n      );\n    }\n  }\n\n  getBasisComponent(): Component {\n    return ClickableDisplayComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import Vector2 from \"./Vector2\";\nimport Circle from \"./Circle\";\n\n/**\n * Line-Circle Intersection\n * @source https://stackoverflow.com/questions/37224912/circle-line-segment-collision\n *\n * @param circle The circle to test for intersection.\n * @param pt1 The first point of the line.\n * @param pt2 The second point of the line.\n */\nexport function circleLineCollision(\n  circle: Circle,\n  pt1: Vector2,\n  pt2: Vector2\n): boolean {\n  const v1 = new Vector2(pt2.x - pt1.x, pt2.y - pt1.y);\n  const v2 = new Vector2(pt1.x - circle.center.x, pt1.y - circle.center.y);\n  const b = -2 * (v1.x * v2.x + v1.y * v2.y);\n  const c = 2 * (v1.x * v1.x + v1.y * v1.y);\n  const d = Math.sqrt(\n    b * b - 2 * c * (v2.x * v2.x + v2.y * v2.y - circle.radius * circle.radius)\n  );\n  if (isNaN(d)) {\n    // no intercept\n    return false;\n  }\n  // These represent the unit distance of point one and two on the line\n  const u1 = (b - d) / c;\n  const u2 = (b + d) / c;\n  if (u1 <= 1 && u1 >= 0) {\n    // If point on the line segment\n    return true;\n  }\n  if (u2 <= 1 && u2 >= 0) {\n    // If point on the line segment\n    return true;\n  }\n  return false;\n}\n\nexport function circlePointCollision(circle: Circle, point: Vector2): boolean {\n  return PointRadiusPointCollision(circle.center, circle.radius, point);\n}\n\nexport function PointRadiusPointCollision(\n  point1: Vector2,\n  radius: number,\n  point2: Vector2\n): boolean {\n  return Vector2.distance(point1, point2) <= radius;\n}\n\nexport function rectPointCollision(\n  nw1: Vector2,\n  se1: Vector2,\n  pt: Vector2\n): boolean {\n  return pt.x >= nw1.x && pt.x <= se1.x && pt.y >= nw1.y && pt.y <= se1.y;\n}\n\nexport function rectRectCollision(\n  nw1: Vector2,\n  se1: Vector2,\n  nw2: Vector2,\n  se2: Vector2\n): boolean {\n  return nw1.x <= se2.x && se1.x >= nw2.x && nw1.y <= se2.y && se1.x >= nw2.y;\n}\n","import {\n  ClickableComponent,\n  ClickableEntity,\n} from \"../components/behavior/click/Clickable\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { BaseGameModel } from \"../data/BaseGameModel\";\nimport { DynamicConstant, getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { rectPointCollision, rectRectCollision } from \"../geometry/Collision\";\nimport Vector2 from \"../geometry/Vector2\";\n\nexport class ClickableSystem extends BaseSystem {\n  private mouse: DynamicConstant<Vector2>;\n  private runCheck: boolean;\n\n  constructor(mouse: DynamicConstant<Vector2>) {\n    super();\n    this.mouse = mouse;\n    this.runCheck = false;\n  }\n\n  public update(elapsedTime: number, model: BaseGameModel): void {\n    if (model.getMouseAction() === \"click\") {\n      const entities = this.entities as Map<number, ClickableEntity>;\n      let best = undefined as ClickableEntity;\n      let bestNW = undefined as Vector2;\n      let bestSE = undefined as Vector2;\n      const mouse = getDynamic(this.mouse);\n      for (const targetEntity of entities.values()) {\n        const { position, clickable } = targetEntity.data;\n        const mouseAdj = mouse.add(getDynamic(clickable.offset));\n        const [nw, se] = this.offsetDelta(\n          getDynamic(position.position),\n          getDynamic(clickable.delta)\n        );\n\n        // No need to keep on working if there's no collision.\n        if (!rectPointCollision(nw, se, mouseAdj)) {\n          continue;\n        }\n\n        // Best check.\n        if (best === undefined) {\n          best = targetEntity;\n          bestNW = nw;\n          bestSE = se;\n          continue;\n        }\n\n        // See if these two collide; we already know the first one is within click range.\n        if (rectRectCollision(nw, se, bestNW, bestSE)) {\n          if (targetEntity.id > best.id) {\n            best = targetEntity;\n          }\n        }\n      }\n      if (best !== undefined) {\n        this.manager.emitEvent(\"click\", best);\n      }\n    }\n  }\n\n  updateEntity(): void {\n    return;\n  }\n\n  offsetDelta(v1: Vector2, delta: Vector2): [Vector2, Vector2] {\n    return [v1.subtract(delta), v1.add(delta)];\n  }\n\n  getBasisComponent(): Component {\n    return ClickableComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../../data/DynamicConstant\";\nimport { Component } from \"../../../ecs/Component\";\nimport SelectedComponent from \"../../marker/Selected\";\nimport { ClickableEntity } from \"./Clickable\";\n\nexport interface ClickComponentAddData extends Record<string, unknown> {\n  component: DynamicConstant<Component>;\n  data: DynamicConstant<Record<string, unknown>>;\n}\n\nexport type ClickComponentAddEntity = ClickableEntity & {\n  data: { clickComponentAdd: ClickComponentAddData };\n};\n\nexport class ClickComponentAdd extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): ClickComponentAddData {\n    return {\n      component: SelectedComponent,\n      data: {},\n    };\n  }\n}\n\nexport const ClickComponentAddComponent = new ClickComponentAdd();\n","import {\n  ClickComponentAddComponent,\n  ClickComponentAddEntity,\n} from \"../components/behavior/click/ClickComponentAdd\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class ClickComponentAddSystem extends BaseSystem {\n  protected onManagerAwake(): void {\n    this.listen(\"click\");\n  }\n\n  protected onEvent(_event: string, entity: Entity): void {\n    const { clickComponentAdd } = (entity as ClickComponentAddEntity).data;\n    this.manager.addComponent(\n      entity.id,\n      getDynamic(clickComponentAdd.component),\n      getDynamic(clickComponentAdd.data)\n    );\n  }\n\n  getBasisComponent(): Component {\n    return ClickComponentAddComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../../data/DynamicConstant\";\nimport { Component } from \"../../../ecs/Component\";\nimport { ClickableEntity } from \"./Clickable\";\n\nexport interface ClickComponentToggleMultipleData\n  extends Record<string, unknown> {\n  components: DynamicConstant<Array<Component>>;\n  data: DynamicConstant<Array<Record<string, unknown>>>;\n}\n\nexport type ClickComponentToggleMultipleEntity = ClickableEntity & {\n  data: { clickComponentToggleMultiple: ClickComponentToggleMultipleData };\n};\n\nexport class ClickComponentToggleMultiple extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): ClickComponentToggleMultipleData {\n    return {\n      components: [],\n      data: [],\n    };\n  }\n}\n\nexport const ClickComponentToggleMultipleComponent = new ClickComponentToggleMultiple();\n","import { ClickableComponent } from \"../components/behavior/click/Clickable\";\nimport {\n  ClickComponentToggleMultipleComponent,\n  ClickComponentToggleMultipleEntity,\n} from \"../components/behavior/click/ClickComponentToggleMultiple\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class ClickComponentToggleMultipleSystem extends BaseSystem {\n  protected onManagerAwake(): void {\n    this.listen(\"click\");\n  }\n\n  protected onEvent(_event: string, entity: Entity): void {\n    const targetEntity = entity as ClickComponentToggleMultipleEntity;\n    const { clickComponentToggleMultiple } = targetEntity.data;\n    const components = getDynamic(clickComponentToggleMultiple.components);\n    const data = getDynamic(clickComponentToggleMultiple.data);\n    for (let compIdx = 0; compIdx < components.length; compIdx++) {\n      const comp = components[compIdx];\n      if (this.manager.hasComponent(targetEntity.id, comp)) {\n        this.manager.removeComponent(targetEntity.id, comp);\n      } else {\n        this.manager.addComponent(targetEntity.id, comp, data[compIdx]);\n      }\n    }\n  }\n\n  getBasisComponent(): Component {\n    return ClickComponentToggleMultipleComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(ClickableComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../../data/DynamicConstant\";\nimport { Component } from \"../../../ecs/Component\";\nimport SelectedComponent from \"../../marker/Selected\";\nimport { ClickableEntity } from \"./Clickable\";\n\nexport interface ClickComponentToggleData extends Record<string, unknown> {\n  component: DynamicConstant<Component>;\n  data: DynamicConstant<Record<string, unknown>>;\n}\n\nexport type ClickComponentToggleEntity = ClickableEntity & {\n  data: { clickComponentToggle: ClickComponentToggleData };\n};\n\nexport class ClickComponentToggle extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): ClickComponentToggleData {\n    return {\n      component: SelectedComponent,\n      data: {},\n    };\n  }\n}\n\nexport const ClickComponentToggleComponent = new ClickComponentToggle();\n","import { ClickableComponent } from \"../components/behavior/click/Clickable\";\nimport {\n  ClickComponentToggleComponent,\n  ClickComponentToggleEntity,\n} from \"../components/behavior/click/ClickComponentToggle\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class ClickComponentToggleSystem extends BaseSystem {\n  protected onManagerAwake(): void {\n    this.listen(\"click\");\n  }\n\n  protected onEvent(_event: string, entity: Entity): void {\n    const targetEntity = entity as ClickComponentToggleEntity;\n    const { clickComponentToggle } = targetEntity.data;\n    const cmp = getDynamic(clickComponentToggle.component);\n    if (this.manager.hasComponent(targetEntity.id, cmp)) {\n      this.manager.removeComponent(targetEntity.id, cmp);\n    } else {\n      this.manager.addComponent(\n        targetEntity.id,\n        cmp,\n        getDynamic(clickComponentToggle.data)\n      );\n    }\n  }\n\n  getBasisComponent(): Component {\n    return ClickComponentToggleComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(ClickableComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../../ecs/Component\";\nimport { ClickableEntity } from \"./Clickable\";\n\nexport interface ClickDataMutateData extends Record<string, unknown> {\n  data: Record<string, Record<string, unknown>>;\n}\n\nexport type ClickDataMutateEntity = ClickableEntity & {\n  data: { clickDataMutate: ClickDataMutateData };\n};\n\nexport class ClickDataMutate extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): ClickDataMutateData {\n    return {\n      data: {},\n    };\n  }\n}\n\nexport const ClickDataMutateComponent = new ClickDataMutate();\n","import { merge } from \"lodash\";\nimport { ClickableComponent } from \"../components/behavior/click/Clickable\";\nimport {\n  ClickDataMutateComponent,\n  ClickDataMutateEntity,\n} from \"../components/behavior/click/ClickDataMutate\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class ClickDataMutateSystem extends BaseSystem {\n  protected onManagerAwake(): void {\n    this.listen(\"click\");\n  }\n\n  onEvent(_event: string, entity: Entity): void {\n    const targetEntity = entity as ClickDataMutateEntity;\n    const { clickDataMutate } = targetEntity.data;\n    targetEntity.data = merge(\n      targetEntity.data,\n      getDynamic(clickDataMutate.data)\n    );\n  }\n\n  getBasisComponent(): Component {\n    return ClickDataMutateComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(ClickableComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"../data/Position\";\n\nexport type DraggableEntity = PositionEntity & {\n  data: { draggable: DraggableData };\n};\n\nexport interface DraggableData extends Record<string, unknown> {\n  dragging: boolean;\n  offset: DynamicConstant<Vector2>;\n}\n\nexport class Draggable extends Component {\n  protected defaultData(): DraggableData {\n    return {\n      dragging: false,\n      offset: Vector2.ZERO,\n    };\n  }\n\n  getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n}\n\nexport const DraggableComponent = new Draggable();\nexport default DraggableComponent;\n","import { PositionComponent } from \"../components/data/Position\";\nimport {\n  DraggableComponent,\n  DraggableEntity,\n} from \"../components/behavior/Draggable\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport Vector2 from \"../geometry/Vector2\";\nimport { getDynamic } from \"../data/DynamicConstant\";\n\nexport class DraggableSystem extends BaseSystem {\n  constructor(private source: () => Vector2) {\n    super();\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as DraggableEntity;\n    const { draggable, position } = targetEntity.data;\n    if (!draggable.dragging) {\n      return;\n    }\n    position.position = this.source().add(getDynamic(draggable.offset));\n  }\n\n  getBasisComponent(): Component {\n    return DraggableComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\nimport { PositionEntity } from \"./Position\";\n\nexport interface FootprintData extends Record<string, unknown> {\n  size: number; // virtual coordinate units^2\n  tracked: boolean;\n}\n\nexport type FootprintEntity = PositionEntity & {\n  data: { footprint: FootprintData };\n};\n\n/**\n * Deals with grid-aligned sizes of entities.\n */\nexport class Footprint extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): FootprintData {\n    return { size: 1, tracked: false };\n  }\n}\n\nexport const FootprintComponent = new Footprint();\n","import { Component } from \"../Component\";\nimport { BaseSystem } from \"../System\";\nimport { Constructor } from \"./Constructor\";\n\nexport const Basis = (\n  basisComponent: Component\n): ((target: Constructor<BaseSystem>) => void) => {\n  return function (target: Constructor<BaseSystem>) {\n    target.prototype.getBasisComponent = function (): Component {\n      return basisComponent;\n    };\n  };\n};\n","import { Component } from \"../Component\";\nimport { BaseSystem } from \"../System\";\nimport { Constructor } from \"./Constructor\";\n\nexport const Required = (\n  components: Array<Component>\n): ((target: Constructor<BaseSystem>) => void) => {\n  return function (target: Constructor<BaseSystem>) {\n    const set = new Set<Component>();\n    for (let i = 0; i < components.length; i++) {\n      set.add(components[i]);\n    }\n    target.prototype.getRequiredComponents = function (): Set<Component> {\n      return set;\n    };\n  };\n};\n","import {\n  FootprintComponent,\n  FootprintEntity,\n} from \"../components/data/Footprint\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { GameMap } from \"../data/GameMap\";\nimport { Basis } from \"../ecs/decorators/Basis\";\nimport { Required } from \"../ecs/decorators/Required\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport Vector2 from \"../geometry/Vector2\";\n\n@Basis(FootprintComponent)\n@Required([PositionComponent])\nexport class FootprintSystem extends BaseSystem {\n  private map: GameMap;\n\n  constructor(map: GameMap) {\n    super();\n    this.map = map;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as FootprintEntity;\n    const { position, footprint } = targetEntity.data;\n    if (!footprint.tracked) {\n      footprint.tracked = true;\n      const pos = getDynamic(position.position).floor();\n\n      const nwOffset = Math.floor((footprint.size - 1) / 2);\n      const northWest = new Vector2(pos.x - nwOffset, pos.y - nwOffset);\n      const swOffset = Math.floor(footprint.size / 2);\n      const southEast = new Vector2(pos.x + swOffset, pos.y + swOffset);\n      for (let x = northWest.x; x <= southEast.x; x++) {\n        for (let y = northWest.y; y <= southEast.y; y++) {\n          this.map.createEntityLink(new Vector2(x, y), entity);\n        }\n      }\n    }\n  }\n}\n","import { Component } from \"../../ecs/Component\";\nimport { AutoName } from \"../../ecs/decorators/AutoName\";\n\n@AutoName\nexport class HealthDisplay extends Component {}\n\nexport const HealthDisplayComponent = new HealthDisplay();\nexport default HealthDisplayComponent;\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\n\nexport interface HealthData extends Record<string, unknown> {\n  health: number; // health units\n  maxHealth: number;\n}\n\nexport type HealthEntity = Entity & { data: { health: HealthData } };\n\nexport class Health extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): HealthData {\n    return { health: 10, maxHealth: 10 };\n  }\n}\n\nexport const HealthComponent = new Health();\n","import { HealthDisplayComponent } from \"../components/marker/HealthDisplay\";\nimport { HealthComponent, HealthEntity } from \"../components/data/Health\";\nimport { PositionComponent, PositionEntity } from \"../components/data/Position\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Basis } from \"../ecs/decorators/Basis\";\nimport { Required } from \"../ecs/decorators/Required\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\n\n@Basis(HealthDisplayComponent)\n@Required([PositionComponent, HealthComponent])\nexport class HealthRenderSystem extends BaseSystem {\n  constructor(private virtualCanvas: VirtualCanvas) {\n    super();\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as HealthEntity & PositionEntity;\n\n    const { position, health } = targetEntity.data;\n    const pos = getDynamic(position.position);\n    const northWest = pos.addConstant(-0.5, -0.5);\n    const southEast = pos.addConstant(0.5, -0.4);\n    const proportion = health.health / health.maxHealth;\n    const southEast2 = pos.addConstant(proportion - 0.5, -0.4);\n    this.virtualCanvas.drawWorldRectangle(\n      northWest,\n      southEast,\n      \"#ff000099\",\n      \"#00000099\"\n    );\n    this.virtualCanvas.drawWorldRectangle(\n      northWest,\n      southEast2,\n      \"#00ff0099\",\n      \"#00000099\"\n    );\n  }\n}\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { Basis } from \"../ecs/decorators/Basis\";\nimport { HealthComponent, HealthEntity } from \"../components/data/Health\";\n\n@Basis(HealthComponent)\nexport class HealthSystem extends BaseSystem {\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as HealthEntity;\n    const { health } = targetEntity.data;\n\n    if (health.health <= 0) {\n      this.manager.emitEvent(\"health:die\", targetEntity, {\n        ...targetEntity.data,\n      });\n      this.manager.removeEntity(targetEntity);\n    }\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\n\nexport interface LifetimeData extends Record<string, unknown> {\n  lifetime: number; // seconds\n  elapsed: number; // seconds\n}\n\nexport type LifetimeEntity = Entity & { data: { lifetime: LifetimeData } };\n\nexport class Lifetime extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): LifetimeData {\n    return { lifetime: 1, elapsed: 0 };\n  }\n}\n\nexport const LifetimeComponent = new Lifetime();\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\nimport { LifetimeEntity } from \"../behavior/Lifetime\";\nimport { SpriteEntity } from \"./Sprite\";\n\nexport type LifetimeRenderEntity = SpriteEntity & LifetimeEntity;\n\nexport class LifetimeRender extends Component {\n  protected defaultData(): Record<string, unknown> {\n    return {};\n  }\n\n  getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n}\n\nexport const LifetimeRenderComponent = new LifetimeRender();\nexport default LifetimeRenderComponent;\n","import { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"../data/Position\";\nimport { RotationEntity } from \"../data/Rotation\";\nimport { Texture } from \"../../rendering/Texture\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { AutoName } from \"../../ecs/decorators/AutoName\";\n\nexport interface SpriteData extends Record<string, unknown> {\n  size: Vector2; // in virtual coordinates\n  source: Texture;\n  opacity: DynamicConstant<number>; // percent\n  offset: DynamicConstant<Vector2>; // in virtual coordinates, added to position\n  rotationOffset: DynamicConstant<number>; // degrees, added to rotation\n}\n\nexport type SpriteEntity = Entity &\n  PositionEntity &\n  RotationEntity & { data: { sprite: SpriteData } };\n\n@AutoName\nexport class Sprite extends Component {\n  private static NO_TEXTURE: Texture = undefined;\n  private static DEFAULT_SIZE = Vector2.ONES;\n\n  constructor() {\n    super();\n    if (Sprite.NO_TEXTURE === undefined) {\n      Sprite.NO_TEXTURE = new Texture(\"assets/notex.png\", Vector2.matching(32));\n    }\n  }\n\n  protected defaultData(): SpriteData {\n    return {\n      source: Sprite.NO_TEXTURE,\n      size: Sprite.DEFAULT_SIZE,\n      opacity: 1,\n      offset: Vector2.ZERO,\n      rotationOffset: 0,\n    };\n  }\n}\n\nexport const SpriteComponent = new Sprite();\nexport default SpriteComponent;\n","import { LifetimeComponent } from \"../components/behavior/Lifetime\";\nimport LifetimeRenderComponent, {\n  LifetimeRenderEntity,\n} from \"../components/rendering/LifetimeRender\";\nimport SpriteComponent from \"../components/rendering/Sprite\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class LifetimeRenderSystem extends BaseSystem {\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as LifetimeRenderEntity;\n    const { lifetime, sprite } = targetEntity.data;\n\n    sprite.opacity = (lifetime.lifetime - lifetime.elapsed) / lifetime.lifetime;\n  }\n\n  getBasisComponent(): Component {\n    return LifetimeRenderComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(SpriteComponent);\n    set.add(LifetimeComponent);\n    return set;\n  }\n}\n","import {\n  LifetimeComponent,\n  LifetimeEntity,\n} from \"../components/behavior/Lifetime\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class LifetimeSystem extends BaseSystem {\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as LifetimeEntity;\n    const { lifetime } = targetEntity.data;\n    lifetime.elapsed += deltaTime;\n    if (lifetime.elapsed >= lifetime.lifetime) {\n      this.manager.removeEntity(entity.id);\n    }\n  }\n\n  getBasisComponent(): Component {\n    return LifetimeComponent;\n  }\n}\n","import { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"../data/Position\";\nimport { RotationEntity } from \"../data/Rotation\";\nimport { Texture } from \"../../rendering/Texture\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { AutoName } from \"../../ecs/decorators/AutoName\";\n\nexport interface LowSpriteData extends Record<string, unknown> {\n  size: Vector2; // in virtual coordinates\n  source: Texture;\n  offset: DynamicConstant<Vector2>; // in virtual coordinates, added to position\n}\n\nexport type LowSpriteEntity = PositionEntity & {\n  data: { lowSprite: LowSpriteData };\n};\n\n@AutoName\nexport class LowSprite extends Component {\n  private static NO_TEXTURE: Texture = undefined;\n  private static DEFAULT_SIZE = Vector2.ONES;\n\n  constructor() {\n    super();\n    if (LowSprite.NO_TEXTURE === undefined) {\n      LowSprite.NO_TEXTURE = new Texture(\n        \"assets/notex.png\",\n        Vector2.matching(32)\n      );\n    }\n  }\n\n  protected defaultData(): LowSpriteData {\n    return {\n      source: LowSprite.NO_TEXTURE,\n      size: LowSprite.DEFAULT_SIZE,\n      offset: Vector2.ZERO,\n    };\n  }\n}\n\nexport const LowSpriteComponent = new LowSprite();\nexport default LowSpriteComponent;\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport LowSpriteComponent, {\n  LowSpriteEntity,\n} from \"../components/rendering/LowSprite\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { RotationComponent } from \"../components/data/Rotation\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Basis } from \"../ecs/decorators/Basis\";\nimport { Required } from \"../ecs/decorators/Required\";\n\n@Basis(LowSpriteComponent)\n@Required([PositionComponent, RotationComponent])\nexport class LowSpriteRenderSystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const spriteEntity = entity as LowSpriteEntity;\n    const { lowSprite, position } = spriteEntity.data;\n    this.virtualCanvas.drawImage(\n      lowSprite.source,\n      getDynamic(position.position).add(getDynamic(lowSprite.offset)),\n      lowSprite.size\n    );\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { ECSManager } from \"../../ecs/ECSManager\";\nimport { Entity } from \"../../ecs/Entity\";\nimport { PositionEntity } from \"../data/Position\";\n\nexport interface MagnetData extends Record<string, unknown> {\n  radius: DynamicConstant<number>;\n  onSnap: (magnet: Entity, target: Entity, manager: ECSManager) => void;\n}\n\nexport type MagnetEntity = PositionEntity & { data: { magnet: MagnetData } };\nexport class Magnet extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): MagnetData {\n    return {\n      radius: 1,\n      onSnap: () => {\n        return;\n      },\n    };\n  }\n}\n\nexport const MagnetComponent = new Magnet();\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\n\nexport class MagnetAttracted extends Component {\n  protected defaultData(): Record<string, unknown> {\n    return {};\n  }\n\n  getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n}\n\nexport const MagnetAttractedComponent = new MagnetAttracted();\nexport default MagnetAttractedComponent;\n","import Vector2 from \"./Vector2\";\n\nexport default class Circle {\n  private _center: Vector2;\n  private _radius: number;\n\n  constructor(center: Vector2, radius: number) {\n    this._center = center;\n    this._radius = radius;\n  }\n\n  public get center(): Vector2 {\n    return this._center;\n  }\n\n  public get radius(): number {\n    return this._radius;\n  }\n}\n","import { PositionComponent, PositionEntity } from \"../components/data/Position\";\nimport { MagnetComponent, MagnetEntity } from \"../components/behavior/Magnet\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport MagnetAttractedComponent from \"../components/marker/MagnetAttracted\";\nimport { circlePointCollision } from \"../geometry/Collision\";\nimport Circle from \"../geometry/Circle\";\n\nexport class MagnetSystem extends BaseSystem {\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as MagnetEntity;\n    const { magnet, position } = targetEntity.data;\n    const circle = new Circle(\n      getDynamic(position.position),\n      getDynamic(magnet.radius)\n    );\n    const entities = this.manager.getEntitiesWithComponent(\n      MagnetAttractedComponent\n    ) as Array<PositionEntity>;\n    for (let i = 0; i < entities.length; i++) {\n      const entity = entities[i];\n      if (\n        circlePointCollision(circle, getDynamic(entity.data.position.position))\n      ) {\n        entity.data.position.position = targetEntity.data.position.position;\n        magnet.onSnap(targetEntity, entity, this.manager);\n        this.manager.emitEvent(\"magnet:snap\", entity);\n        this.manager.emitEvent(\"magnet:pull\", entity);\n      }\n    }\n  }\n\n  getBasisComponent(): Component {\n    return MagnetComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { VelocityTargetEntity } from \"./PositionTarget\";\nimport { RotationTargetEntity } from \"./RotationTarget\";\n\nexport interface PathFollowerData extends Record<string, unknown> {\n  path: DynamicConstant<Array<DynamicConstant<Vector2>>>; // virtual coordinate units\n  invalidated: boolean;\n  point: number;\n}\n\nexport type PathFollowerEntity = RotationTargetEntity &\n  VelocityTargetEntity & { data: { pathFollower: PathFollowerData } };\n\nexport class PathFollower extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): PathFollowerData {\n    return { path: [], point: 0, invalidated: false };\n  }\n}\n\nexport const PathFollowerComponent = new PathFollower();\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"../data/Position\";\nimport { VelocityEntity } from \"../data/Velocity\";\n\nexport interface VelocityTargetData extends Record<string, unknown> {\n  target: DynamicConstant<Vector2>;\n  velocity: number; // virtual coordinate units per second\n  strictness: number;\n}\n\nexport type VelocityTargetEntity = Entity &\n  PositionEntity &\n  VelocityEntity & { data: { velocityTarget: VelocityTargetData } };\n\nexport class VelocityTarget extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): VelocityTargetData {\n    return { target: Vector2.ZERO, velocity: 3, strictness: 0.01 };\n  }\n}\n\nexport const VelocityTargetComponent = new VelocityTarget();\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"../data/Position\";\nimport { RotationEntity } from \"../data/Rotation\";\n\nexport interface RotationTargetData extends Record<string, unknown> {\n  target: DynamicConstant<Vector2>; // virtual coordinate units\n  turnRate: number; // degrees per second\n  strictness: number; // degrees\n}\n\nexport type RotationTargetEntity = Entity &\n  PositionEntity &\n  RotationEntity & { data: { rotationTarget: RotationTargetData } };\n\nexport class RotationTarget extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): RotationTargetData {\n    return { target: Vector2.ZERO, turnRate: 180, strictness: 0.05 };\n  }\n}\n\nexport const RotationTargetComponent = new RotationTarget();\n","import {\n  PathFollowerComponent,\n  PathFollowerEntity,\n} from \"../components/behavior/PathFollower\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { VelocityTargetComponent } from \"../components/behavior/PositionTarget\";\nimport { RotationTargetComponent } from \"../components/behavior/RotationTarget\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport Vector2 from \"../geometry/Vector2\";\n\nexport class PathFollowerSystem extends BaseSystem {\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as PathFollowerEntity;\n    const {\n      position,\n      velocityTarget,\n      rotationTarget,\n      pathFollower,\n    } = targetEntity.data;\n    const pos = getDynamic(position.position);\n    const target = getDynamic(velocityTarget.target);\n    const path = getDynamic(pathFollower.path);\n    if (pathFollower.invalidated) {\n      if (path.length === 0) {\n        velocityTarget.target = pos;\n        pathFollower.point = 0;\n      }\n      let md = Vector2.squareDistance(pos, getDynamic(path[0]));\n      let idx = 0;\n      for (let i = 1; i < path.length; i++) {\n        const el = getDynamic(path[i]);\n        const dist = Vector2.distance(pos, el);\n        if (dist < md) {\n          md = dist;\n          idx = i;\n        }\n      }\n      pathFollower.point = idx + 1;\n      pathFollower.invalidated = false;\n    }\n\n    if (\n      this.checkRelativeThreshold(\n        target,\n        getDynamic(position.position),\n        velocityTarget.strictness\n      ) &&\n      pathFollower.point < path.length\n    ) {\n      pathFollower.point++;\n    }\n    if (pathFollower.point < path.length) {\n      const pt = path[pathFollower.point];\n      velocityTarget.target = pt;\n      rotationTarget.target = pt;\n    } else {\n      this.manager.emitEvent(\"pathFollower:done\", targetEntity);\n    }\n  }\n\n  private checkRelativeThreshold(\n    a: Vector2,\n    b: Vector2,\n    threshold: number\n  ): boolean {\n    return Math.abs(a.x - b.x) < threshold && Math.abs(a.y - b.y) < threshold;\n  }\n\n  getBasisComponent(): Component {\n    return PathFollowerComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    set.add(RotationTargetComponent);\n    set.add(VelocityTargetComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\n\nexport class PositionDebug extends Component {\n  protected defaultData(): Record<string, unknown> {\n    return {};\n  }\n\n  getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n}\n\nexport const PositionDebugComponent = new PositionDebug();\nexport default PositionDebugComponent;\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { Component } from \"../ecs/Component\";\nimport { PositionComponent, PositionEntity } from \"../components/data/Position\";\nimport PositionDebugComponent from \"../components/rendering/PositionDebug\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport { getDynamic } from \"../data/DynamicConstant\";\n\nexport class PositionDebugSystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as PositionEntity & PositionEntity;\n    const { position } = targetEntity.data.position;\n    const pos = getDynamic(position);\n    this.virtualCanvas.line(\n      pos.addConstant(-1, 0),\n      pos.addConstant(1, 0),\n      \"#ff0000\"\n    );\n    this.virtualCanvas.line(\n      pos.addConstant(0, -1),\n      pos.addConstant(0, 1),\n      \"#ff0000\"\n    );\n  }\n\n  getBasisComponent(): Component | null {\n    return PositionDebugComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { Component } from \"../ecs/Component\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport {\n  RangeDisplayComponent,\n  RangeDisplayEntity,\n} from \"../components/rendering/RangeDisplay\";\nimport { RangeComponent } from \"../components/data/Range\";\nimport { getDynamic } from \"../data/DynamicConstant\";\n\nexport class RangeDisplaySystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as RangeDisplayEntity;\n    const { position } = targetEntity.data.position;\n    const { range } = targetEntity.data.range;\n    const {\n      strokeStyle,\n      fillStyle,\n      lineWidth,\n      offset,\n    } = targetEntity.data.rangeDisplay;\n    this.virtualCanvas.drawCircle(\n      getDynamic(position).add(getDynamic(offset)),\n      range,\n      fillStyle,\n      strokeStyle,\n      lineWidth >= 1 ? lineWidth : undefined\n    );\n  }\n\n  getBasisComponent(): Component | null {\n    return RangeDisplayComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    set.add(RangeComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"../data/Position\";\n\nexport interface RegionData extends Record<string, unknown> {\n  delta: DynamicConstant<Vector2>; // virtual coordinate units\n  fillColor: DynamicConstant<string | CanvasGradient | CanvasPattern>;\n  strokeColor: DynamicConstant<string | CanvasGradient | CanvasPattern>;\n}\n\nexport type RegionEntity = PositionEntity & {\n  data: { region: RegionData };\n};\n\nexport class Region extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): RegionData {\n    return {\n      delta: Vector2.ZERO,\n      fillColor: \"#555555\",\n      strokeColor: \"#55555500\",\n    };\n  }\n}\n\nexport const RegionComponent = new Region();\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { Component } from \"../ecs/Component\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { RegionComponent, RegionEntity } from \"../components/ui/RegionRender\";\n\nexport class RegionRenderSystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as RegionEntity;\n    const { position } = targetEntity.data.position;\n    const { region } = targetEntity.data;\n    const delta = getDynamic(region.delta);\n    const fillColor = getDynamic(region.fillColor);\n    const strokeColor = getDynamic(region.strokeColor);\n    const pos = getDynamic(position);\n    this.virtualCanvas.drawRectangle(\n      pos.subtract(delta),\n      pos.add(delta),\n      fillColor,\n      strokeColor\n    );\n  }\n\n  getBasisComponent(): Component | null {\n    return RegionComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\n\nexport class RotationDebug extends Component {\n  protected defaultData(): Record<string, unknown> {\n    return {};\n  }\n\n  getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n}\n\nexport const RotationDebugComponent = new RotationDebug();\nexport default RotationDebugComponent;\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { Component } from \"../ecs/Component\";\nimport { PositionComponent, PositionEntity } from \"../components/data/Position\";\nimport { RotationComponent, RotationEntity } from \"../components/data/Rotation\";\nimport RotationDebugComponent from \"../components/rendering/RotationDebug\";\nimport Vector2 from \"../geometry/Vector2\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport { getDynamic } from \"../data/DynamicConstant\";\n\nexport class RotationDebugSystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as RotationEntity & PositionEntity;\n    const { rotation } = targetEntity.data.rotation;\n    const { position } = targetEntity.data.position;\n    const rotVec = Vector2.fromAngle(getDynamic(rotation)).scale(2);\n    const vecTarget = getDynamic(position).add(rotVec);\n    this.virtualCanvas.line(getDynamic(position), vecTarget, \"#ff0000\");\n  }\n\n  getBasisComponent(): Component | null {\n    return RotationDebugComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    set.add(RotationComponent);\n    return set;\n  }\n}\n","import { PositionComponent } from \"../components/data/Position\";\nimport { RotationComponent } from \"../components/data/Rotation\";\nimport {\n  RotationTargetComponent,\n  RotationTargetEntity,\n} from \"../components/behavior/RotationTarget\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport Vector2 from \"../geometry/Vector2\";\nimport { Basis } from \"../ecs/decorators/Basis\";\nimport { Required } from \"../ecs/decorators/Required\";\n\n@Basis(RotationTargetComponent)\n@Required([RotationComponent, PositionComponent])\nexport class RotationTargetSystem extends BaseSystem {\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as RotationTargetEntity;\n    const position = targetEntity.data.position;\n    const rotationTarget = targetEntity.data.rotationTarget;\n    const rotation = targetEntity.data.rotation;\n\n    if (\n      rotationTarget === undefined ||\n      getDynamic(rotationTarget.target) === undefined\n    ) {\n      return;\n    }\n\n    // Getting some important values\n    const relativeTarget = getDynamic(rotationTarget.target).subtract(\n      getDynamic(position.position)\n    );\n    const currentRotation = ((getDynamic(rotation.rotation) % 360) + 360) % 360;\n    const currentRotationVector = Vector2.fromAngle(currentRotation);\n    const targetRotation = (relativeTarget.toAngle() + 360) % 360;\n    rotationTarget.targetRotation = targetRotation;\n\n    // Figure out which direction we're rotating in, and how much we need to rotate by.\n    const rotationDirection = Math.sign(\n      currentRotationVector.determinant(relativeTarget)\n    );\n    const desiredRotation = Math.abs(currentRotation - targetRotation);\n    const deltaRotation = Math.min(\n      rotationTarget.turnRate * deltaTime,\n      desiredRotation\n    );\n    rotation.rotation =\n      (((getDynamic(rotation.rotation) + deltaRotation * rotationDirection) %\n        360) +\n        360) %\n      360;\n\n    if (Math.abs(desiredRotation) < rotationTarget.strictness) {\n      this.manager.emitEvent(\"rotationTarget:reached\", targetEntity);\n    }\n  }\n\n  private checkRelativeThreshold(\n    a: number,\n    b: number,\n    threshold: number\n  ): boolean {\n    return (\n      Math.abs(a - b) < threshold ||\n      Math.abs(a + 360 - b) < threshold ||\n      Math.abs(a - (b + 360)) < threshold\n    );\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"../data/Position\";\nimport { RangeEntity } from \"../data/Range\";\n\nexport interface SelectionDisplayData extends Record<string, unknown> {\n  strokeStyle: string;\n  fillStyle: string;\n  lineWidth: number;\n  offset: DynamicConstant<Vector2>;\n  radius: DynamicConstant<number>;\n}\n\nexport type SelectionDisplayEntity = Entity &\n  PositionEntity &\n  RangeEntity & { data: { selectionDisplay: SelectionDisplayData } };\n\nexport class SelectionDisplay extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): SelectionDisplayData {\n    return {\n      range: 1,\n      strokeStyle: \"#ff0000ff\",\n      fillStyle: \"#ffffff00\",\n      lineWidth: 0,\n      offset: Vector2.ZERO,\n      radius: 1,\n    };\n  }\n}\n\nexport const SelectionDisplayComponent = new SelectionDisplay();\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport { Component } from \"../ecs/Component\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport {\n  SelectionDisplayComponent,\n  SelectionDisplayEntity,\n} from \"../components/rendering/SelectionDisplay\";\n\nexport class SelectionSystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as SelectionDisplayEntity;\n    const { position, selectionDisplay } = targetEntity.data;\n    this.virtualCanvas.drawCircle(\n      getDynamic(position.position),\n      getDynamic(selectionDisplay.radius),\n      selectionDisplay.fillStyle,\n      selectionDisplay.strokeStyle,\n      selectionDisplay.lineWidth\n    );\n  }\n\n  getBasisComponent(): Component | null {\n    return SelectionDisplayComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport { EntityProducer } from \"../../ecs/EntityProducer\";\nimport { IntervalStorage } from \"../../ecs/System\";\nimport { PositionEntity } from \"../data/Position\";\n\nexport interface SpawnerData extends Record<string, unknown>, IntervalStorage {\n  producer: EntityProducer;\n  rate: number; // entities per second\n  elapsed: number;\n  count: number;\n  limit: number;\n  total: number;\n}\n\nexport interface ChildDataGenerator {\n  (componentName: string, parent: Entity): Record<string, unknown>;\n}\n\nexport type SpawnerEntity = PositionEntity & { data: { spawner: SpawnerData } };\n\nexport class Spawner extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): SpawnerData {\n    return {\n      rate: 1,\n      elapsed: 0,\n      count: 1,\n      producer: () => {\n        return;\n      },\n      limit: -1,\n      total: 0,\n    };\n  }\n}\n\nexport const SpawnerComponent = new Spawner();\nexport default SpawnerComponent;\n","import { PositionComponent } from \"../components/data/Position\";\nimport SpawnerComponent, {\n  SpawnerEntity,\n} from \"../components/behavior/Spawner\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class SpawnerSystem extends BaseSystem {\n  protected updateEntity(elapsedTime: number, entity: Entity): void {\n    const targetEntity = entity as SpawnerEntity;\n    const { spawner } = targetEntity.data;\n    while (this.checkInterval(elapsedTime, spawner)) {\n      for (let spawn = 0; spawn < spawner.count; spawn++) {\n        if (spawner.limit < 0 || spawner.total < spawner.limit) {\n          spawner.total++;\n          spawner.producer(targetEntity, this.manager);\n        }\n      }\n    }\n  }\n\n  getBasisComponent(): Component {\n    return SpawnerComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport SpriteComponent, { SpriteEntity } from \"../components/rendering/Sprite\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { RotationComponent } from \"../components/data/Rotation\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Basis } from \"../ecs/decorators/Basis\";\nimport { Required } from \"../ecs/decorators/Required\";\n\n@Basis(SpriteComponent)\n@Required([PositionComponent, RotationComponent])\nexport class SpriteRenderSystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const spriteEntity = entity as SpriteEntity;\n    const { sprite, rotation, position } = spriteEntity.data;\n    this.virtualCanvas.drawImage(\n      sprite.source,\n      getDynamic(position.position).add(getDynamic(sprite.offset)),\n      sprite.size,\n      getDynamic(rotation.rotation) + getDynamic(sprite.rotationOffset),\n      getDynamic(sprite.opacity)\n    );\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport Vector2 from \"../../geometry/Vector2\";\nimport { PositionEntity } from \"../data/Position\";\n\nexport interface StackData extends Record<string, unknown> {\n  offset: DynamicConstant<Vector2>; // virtual coordinate units\n  parent: StackEntity;\n  child: StackEntity;\n  index: number;\n}\n\nexport type StackEntity = PositionEntity & { data: { stack: StackData } };\n\nexport class Stack extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): StackData {\n    return { offset: Vector2.ZERO, parent: null, child: null, index: 0 };\n  }\n}\n\nexport const StackComponent = new Stack();\n","import { StackComponent, StackEntity } from \"../components/behavior/Stack\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class StackSystem extends BaseSystem {\n  protected onManagerAwake(): void {\n    this.listen(\"stack:attach\", false);\n    this.listen(\"stack:detach\");\n    this.listen(\"stack:swap\");\n  }\n\n  protected onEvent(\n    event: string,\n    entity: Entity,\n    extra?: Record<string, unknown>\n  ): void {\n    if (event === \"stack:attach\") {\n      this.handleAttach(entity, extra);\n    }\n    if (event === \"stack:detach\") {\n      this.handleDetach(entity);\n    }\n    if (event === \"stack:swap\") {\n      this.handleSwap(entity);\n    }\n  }\n\n  private handleAttach(entity: Entity, extra?: Record<string, unknown>): void {\n    const indexOffset = (extra[\"indexOffset\"] as number) || 0;\n    let parent = this.manager.getEntity(\n      extra[\"parent\"] as number\n    ) as StackEntity;\n    const originalParent = parent;\n    if (parent === undefined || parent === null) {\n      return;\n    }\n    // Find lowest.\n    while (parent !== null && parent.data.stack.child !== null) {\n      parent = parent.data.stack.child as StackEntity;\n    }\n    // Allow offset.\n    if (parent !== null) {\n      for (let i = 0; i < indexOffset; i++) {\n        parent = parent.data.stack.parent as StackEntity;\n      }\n    }\n\n    if (parent === null) {\n      if (originalParent !== null) {\n        this.manager.emitEvent(\"stack:attach\", entity, {\n          parent: originalParent,\n        });\n      }\n      return;\n    }\n\n    const { position: parentPosition, stack: parentStack } = parent.data;\n    if (!(\"stack\" in entity.data)) {\n      this.manager.addComponent(entity, StackComponent, {\n        offset: parentStack.offset,\n        index: parentStack.index + 1,\n      });\n    }\n    const targetEntity = entity as StackEntity;\n    const { position, stack } = targetEntity.data;\n    position.position = getDynamic(parentPosition.position).add(\n      getDynamic(parentStack.offset)\n    );\n    stack.parent = parent;\n    this.manager.emitEvent(\"stack:attached\", entity, { parent });\n  }\n\n  private handleSwap(entity: Entity): void {\n    const targetEntity = entity as StackEntity;\n    const { stack } = targetEntity.data;\n    const parent = stack.parent;\n    if (parent === null) {\n      return;\n    }\n    const { stack: parentStack } = parent.data;\n    stack.parent = parent.data.stack.parent;\n    parentStack.child = stack.child;\n    stack.child = parent;\n    stack.index--;\n    parentStack.index++;\n    parentStack.parent = targetEntity;\n    if (stack.parent !== null) {\n      stack.parent.data.stack.child = targetEntity;\n    }\n    if (parentStack.child !== null) {\n      parentStack.child.data.stack.parent = parent;\n    }\n  }\n\n  private handleDetach(entity: Entity): void {\n    if (!(\"stack\" in entity.data)) {\n      return;\n    }\n    const targetEntity = entity as StackEntity;\n    const { stack } = targetEntity.data;\n    if (stack.parent === null) {\n      return;\n    }\n    const oldParent = stack.parent;\n    stack.parent = null;\n    stack.index = 0;\n    oldParent.data.stack.child = null;\n    this.manager.emitEvent(\"stack:detached\", entity, { oldParent });\n  }\n\n  public updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as StackEntity;\n    const { position, stack } = targetEntity.data;\n    if (stack.parent === null) {\n      return;\n    }\n    const { position: parentPosition } = stack.parent.data;\n    position.position = getDynamic(parentPosition.position).add(\n      getDynamic(stack.offset)\n    );\n  }\n\n  getBasisComponent(): Component {\n    return StackComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport { PositionEntity } from \"../data/Position\";\n\nexport interface TextRenderData extends Record<string, unknown> {\n  text: DynamicConstant<string>; // virtual coordinate units per second,\n  style: string;\n  size: number;\n  font: string;\n  align: CanvasTextAlign;\n}\n\nexport type TextRenderEntity = Entity &\n  PositionEntity & { data: { textRender: TextRenderData } };\n\nexport class TextRender extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): TextRenderData {\n    return {\n      text: \"Sample text\",\n      style: \"#000000ff\",\n      size: 1,\n      font: \"Montserrat\",\n      align: \"center\",\n    };\n  }\n}\n\nexport const TextRenderComponent = new TextRender();\nexport default TextRenderComponent;\n","import { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport TextRenderComponent, {\n  TextRenderEntity,\n} from \"../components/ui/TextRender\";\nimport { Component } from \"../ecs/Component\";\nimport { PositionComponent } from \"../components/data/Position\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport { getDynamic } from \"../data/DynamicConstant\";\n\nexport class TextRenderSystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as TextRenderEntity;\n    const { textRender, position } = targetEntity.data;\n    this.virtualCanvas.drawText(\n      getDynamic(textRender.text),\n      getDynamic(position.position),\n      textRender.style,\n      textRender.size,\n      textRender.font,\n      textRender.align\n    );\n  }\n\n  getBasisComponent(): Component | null {\n    return TextRenderComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { PositionComponent } from \"../components/data/Position\";\nimport { VelocityComponent, VelocityEntity } from \"../components/data/Velocity\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\n\nexport class VelocitySystem extends BaseSystem {\n  protected updateEntity(elapsedTime: number, entity: Entity): void {\n    const targetEntity = entity as VelocityEntity;\n    const { position, velocity } = targetEntity.data;\n    position.position = getDynamic(position.position).addScaled(\n      getDynamic(velocity.velocity),\n      elapsedTime\n    );\n  }\n\n  getBasisComponent(): Component {\n    return VelocityComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    return set;\n  }\n}\n","import { PositionComponent } from \"../components/data/Position\";\nimport {\n  VelocityTargetComponent,\n  VelocityTargetEntity,\n} from \"../components/behavior/PositionTarget\";\nimport { VelocityComponent } from \"../components/data/Velocity\";\nimport { getDynamic } from \"../data/DynamicConstant\";\nimport { Component } from \"../ecs/Component\";\nimport { Entity } from \"../ecs/Entity\";\nimport { BaseSystem } from \"../ecs/System\";\nimport Vector2 from \"../geometry/Vector2\";\n\nexport class VelocityTargetSystem extends BaseSystem {\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as VelocityTargetEntity;\n    const { position, velocity, velocityTarget } = targetEntity.data;\n    const target = getDynamic(velocityTarget.target);\n\n    if (target === undefined) {\n      return;\n    }\n\n    const relativePosition = target.subtract(getDynamic(position.position));\n    const direction = relativePosition.normalize();\n    const perSecond = direction.normalize().scale(velocityTarget.velocity);\n\n    if (\n      this.checkRelativeThreshold(\n        target,\n        getDynamic(position.position),\n        perSecond.magnitude() * deltaTime\n      )\n    ) {\n      this.manager.emitEvent(\"velocityTarget:reached\", targetEntity);\n      position.position = target;\n      velocity.velocity = Vector2.ZERO;\n      return;\n    }\n\n    if (\n      this.checkRelativeThreshold(\n        target,\n        getDynamic(position.position),\n        velocityTarget.strictness\n      )\n    ) {\n      velocity.velocity = Vector2.ZERO;\n    } else {\n      velocity.velocity = perSecond;\n    }\n  }\n\n  private checkRelativeThreshold(\n    a: Vector2,\n    b: Vector2,\n    threshold: number\n  ): boolean {\n    return Math.abs(a.x - b.x) < threshold && Math.abs(a.y - b.y) < threshold;\n  }\n\n  getBasisComponent(): Component {\n    return VelocityTargetComponent;\n  }\n\n  getRequiredComponents(): Set<Component> {\n    const set = new Set<Component>();\n    set.add(PositionComponent);\n    set.add(VelocityComponent);\n    return set;\n  }\n}\n","import { Entity } from \"../../core/ecs/Entity\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { ECSManager, EntityEvent } from \"../ecs/ECSManager\";\nimport { Pathable } from \"./Pathable\";\n\nexport class GameMap implements Pathable {\n  private positions: Map<number, Entity>;\n  private owners: Map<number, Set<number>>;\n  private entities: Set<number>;\n  private minimumBound: Vector2;\n  private maximumBound: Vector2;\n  private yScale: number;\n\n  constructor(minimum: Vector2, maximum: Vector2, manager: ECSManager) {\n    this.positions = new Map();\n    this.owners = new Map();\n    this.entities = new Set();\n    this.minimumBound = minimum;\n    this.maximumBound = maximum;\n    this.yScale = this.maximumBound.x - this.minimumBound.x;\n    manager.listenEvent(\"ecs:delete\", this.listener.bind(this));\n  }\n\n  private getCoordinate(vector: Vector2): number {\n    const x = vector.x - this.minimumBound.x;\n    const y = vector.y - this.minimumBound.y;\n    return y * (this.maximumBound.x - this.minimumBound.x) + x;\n  }\n\n  private listener(entityEvent: EntityEvent) {\n    const entityID = entityEvent.entity.id;\n    if (this.owners.has(entityID)) {\n      const spaces = this.owners.get(entityID);\n      for (const space of spaces) {\n        this.positions.delete(space);\n      }\n      this.owners.delete(entityID);\n    }\n    this.entities.delete(entityID);\n  }\n\n  public clear(): void {\n    this.positions.clear();\n  }\n\n  public checkArea(northWest: Vector2, southEast: Vector2): boolean {\n    for (let y = northWest.y; y < southEast.y; y++) {\n      for (let x = northWest.x; x < southEast.x; x++) {\n        if (this.hasEntityAt(new Vector2(x, y))) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  public getEntityAt(position: Vector2): Entity | null {\n    const coord = this.getCoordinate(position);\n    if (this.positions.has(coord)) {\n      return this.positions.get(coord);\n    }\n    return null;\n  }\n\n  public hasEntityAt(position: Vector2): boolean {\n    const coord = this.getCoordinate(position);\n    return this.positions.has(coord);\n  }\n\n  public createEntityLink(position: Vector2, entity: Entity): void {\n    if (!this.hasEntityAt(position)) {\n      const coord = this.getCoordinate(position);\n      this.positions.set(coord, entity);\n      this.entities.add(entity.id);\n      if (!this.owners.has(entity.id)) {\n        this.owners.set(entity.id, new Set());\n      }\n      this.owners.get(entity.id).add(coord);\n    } else {\n      console.warn(`Overlapping entity at ${position.toString()}`);\n    }\n  }\n\n  public region(northWest: Vector2, southEast: Vector2, entity: Entity): void {\n    for (let y = northWest.y; y < southEast.y; y++) {\n      for (let x = northWest.x; x < southEast.x; x++) {\n        const loc = northWest.addConstant(x, y);\n        this.createEntityLink(loc, entity);\n      }\n    }\n  }\n\n  public getNeighbors(position: Vector2): Array<Entity> {\n    const { x, y } = position;\n    const results: Array<Entity> = [];\n    for (let dx = -1; dx <= 1; dx++) {\n      for (let dy = -1; dy <= 1; dy++) {\n        // Skip out of bounds\n        if (x + dx > this.maximumBound.x || x + dx < this.minimumBound.x) {\n          continue;\n        }\n        if (y + dy > this.maximumBound.y || y + dy < this.minimumBound.y) {\n          continue;\n        }\n        // Skip self\n        if (x == 0 && y == 0) {\n          continue;\n        }\n        const neighborCoordinate = new Vector2(x + dx, y + dy);\n        if (!this.hasEntityAt(neighborCoordinate)) {\n          continue;\n        }\n        results.push(this.getEntityAt(neighborCoordinate));\n      }\n    }\n    return results;\n  }\n\n  isBlocked(v: Vector2): boolean {\n    return this.hasEntityAt(v);\n  }\n}\n","import { RangeComponent } from \"../components/data/Range\";\nimport SelectedComponent from \"../components/marker/Selected\";\nimport { RangeDisplayComponent } from \"../components/rendering/RangeDisplay\";\nimport { ECSManager } from \"../ecs/ECSManager\";\nimport { Entity } from \"../ecs/Entity\";\nimport Vector2 from \"../geometry/Vector2\";\nimport { KeyboardInput, KeyboardInteraction } from \"../input/KeyboardInput\";\nimport { MouseInput, MouseInteraction } from \"../input/MouseInput\";\nimport { VirtualCanvas } from \"../rendering/VirtualCanvas\";\nimport { AbstractClickSystem } from \"../systems/AbstractClickSystem\";\nimport { AccelerationSystem } from \"../systems/AccelerationSystem\";\nimport { AnimatedSpriteRenderSystem } from \"../systems/AnimatedSpriteRenderSystem\";\nimport { ClickableDisplaySystem } from \"../systems/ClickableDisplaySystem\";\nimport { ClickableSystem } from \"../systems/ClickableSystem\";\nimport { ClickComponentAddSystem } from \"../systems/ClickComponentAddSystem\";\nimport { ClickComponentToggleMultipleSystem } from \"../systems/ClickComponentToggleMultipleSystem\";\nimport { ClickComponentToggleSystem } from \"../systems/ClickComponentToggleSystem\";\nimport { ClickDataMutateSystem } from \"../systems/ClickDataMutationSystem\";\nimport { DraggableSystem } from \"../systems/DraggableSystem\";\nimport { FootprintSystem } from \"../systems/FootprintSystem\";\nimport { HealthRenderSystem } from \"../systems/HealthDisplaySystem\";\nimport { HealthSystem } from \"../systems/HealthSystem\";\nimport { LifetimeRenderSystem } from \"../systems/LifetimeRenderSystem\";\nimport { LifetimeSystem } from \"../systems/LifetimeSystem\";\nimport { LowSpriteRenderSystem } from \"../systems/LowSpriteRenderSystem\";\nimport { MagnetSystem } from \"../systems/MagnetSystem\";\nimport { PathFollowerSystem } from \"../systems/PathFollowerSystem\";\nimport { PositionDebugSystem } from \"../systems/PositionDebugSystem\";\nimport { RangeDisplaySystem } from \"../systems/RangeDisplaySystem\";\nimport { RegionRenderSystem } from \"../systems/RegionRenderSystem\";\nimport { RotationDebugSystem } from \"../systems/RotationDebugSystem\";\nimport { RotationTargetSystem } from \"../systems/RotationTargetSystem\";\nimport { SelectionSystem } from \"../systems/SelectionRenderSystem\";\nimport { SpawnerSystem } from \"../systems/SpawnerSystem\";\nimport { SpriteRenderSystem } from \"../systems/SpriteRenderSystem\";\nimport { StackSystem } from \"../systems/StackSystem\";\nimport { TextRenderSystem } from \"../systems/TextRenderSystem\";\nimport { VelocitySystem } from \"../systems/VelocitySystem\";\nimport { VelocityTargetSystem } from \"../systems/VelocityTargetSystem\";\nimport { GameMap } from \"./GameMap\";\n\nexport abstract class BaseGameModel {\n  protected eventQueue: Array<string> = [];\n  protected ecs: ECSManager;\n  protected virtualCanvas: VirtualCanvas;\n  protected lastTime: number;\n  protected entityMap: GameMap;\n  protected running: boolean;\n  protected parentElement: HTMLElement;\n  protected readonly virtualSize: Vector2;\n  protected keys: KeyboardInput;\n  protected mouse: MouseInput;\n  protected paused = false;\n  protected timeScale = 1;\n  private keySet: Set<string>;\n  private mouseAction: string;\n  private clicksPerFrame: number;\n  protected actionSet: Set<string>;\n  private selection = -1;\n  private firstLoad = true;\n\n  protected invalidateSelection(): void {\n    this.selection = -1;\n  }\n\n  public getSelection(): Entity | null {\n    if (this.selection === -1) {\n      return null;\n    }\n    const entity = this.ecs.getEntity(this.selection, true);\n    if (entity === undefined || entity === null) {\n      return null;\n    }\n    return entity;\n  }\n\n  public setSelection(id: number): void {\n    this.selection = id;\n    const ids = this.ecs.getEntityIDsWithComponent(SelectedComponent);\n\n    for (let i = 0; i < ids.length; i++) {\n      this.ecs.removeComponent(ids[i], SelectedComponent);\n      // TODO: Move to its own function\n      if (this.ecs.hasComponent(ids[i], RangeComponent)) {\n        this.ecs.removeComponent(ids[i], RangeDisplayComponent);\n      }\n    }\n\n    if (id === -1) {\n      return;\n    }\n\n    this.ecs.addComponent(id, SelectedComponent);\n    if (this.ecs.hasComponent(id, RangeComponent)) {\n      this.ecs.addComponent(id, RangeDisplayComponent);\n    }\n  }\n\n  constructor(virtualSize: Vector2) {\n    this.virtualSize = virtualSize;\n    this.ecs = new ECSManager();\n    this.virtualCanvas = new VirtualCanvas(virtualSize);\n    this.entityMap = new GameMap(Vector2.ZERO, virtualSize, this.ecs);\n    this.running = true;\n    this.keySet = new Set();\n\n    this.keys = new KeyboardInput();\n\n    this.mouse = new MouseInput();\n\n    this.setSelection = this.setSelection.bind(this);\n    this.getSelection = this.getSelection.bind(this);\n  }\n\n  public findCanvas(): void {\n    this.virtualCanvas.findCanvas();\n  }\n\n  public getMousePosition(): Vector2 {\n    return this.mouse.getMousePosition();\n  }\n\n  getMouseAction(): string {\n    return this.mouseAction;\n  }\n\n  protected updateInput(_deltaTime: number): void {\n    this.mouseAction = \"none\";\n    this.clicksPerFrame = 0;\n    this.keySet.clear();\n    this.mouse.update();\n    this.keys.update();\n  }\n\n  clearMouse(): void {\n    this.mouseAction = \"none\";\n  }\n\n  public install(element: HTMLElement): void {\n    this.virtualCanvas.install(element);\n    this.lastTime = performance.now();\n    this.parentElement = element;\n    if (this.firstLoad) {\n      this.firstInit(element);\n    }\n  }\n\n  public onFirstInit(): void {\n    return;\n  }\n\n  public firstInit(element: HTMLElement): void {\n    this.firstLoad = false;\n    this.initSystems();\n    this.mouse.install(element, this.virtualCanvas);\n    this.keys.install();\n    this.mouse.addListener((interaction: MouseInteraction) => {\n      if (interaction.leftDown) {\n        this.mouseAction = \"click\";\n        this.clicksPerFrame++;\n      }\n    });\n    this.keys.addListener((interaction: KeyboardInteraction) => {\n      if (interaction.down) {\n        this.keySet.add(interaction.key);\n      }\n    });\n  }\n\n  public uninstall(): void {\n    this.virtualCanvas.uninstall();\n    this.keys.uninstall();\n    this.ecs.clear();\n    this.parentElement = null;\n  }\n\n  protected addSystems(): void {\n    return;\n  }\n\n  private initSystems() {\n    // Input-based modification\n    this.ecs.createSystem(new ClickableSystem(this.mouse.getMousePosition), -5);\n    this.ecs.createSystem(new ClickComponentAddSystem(), -5);\n    this.ecs.createSystem(new ClickComponentToggleSystem(), -5);\n    this.ecs.createSystem(new ClickComponentToggleMultipleSystem(), -5);\n    this.ecs.createSystem(new ClickDataMutateSystem(), -5);\n    this.ecs.createSystem(new AbstractClickSystem(), -5);\n\n    // Entity creation/deletion\n    this.ecs.createSystem(new HealthSystem(), -2);\n    this.ecs.createSystem(new SpawnerSystem(), -1);\n    this.ecs.createSystem(new LifetimeSystem(), -1);\n\n    // Modifying \"base\" components\n    this.ecs.createSystem(new PathFollowerSystem(), 0);\n    this.ecs.createSystem(new StackSystem(), 0);\n    this.ecs.createSystem(new VelocityTargetSystem(), 0);\n    this.ecs.createSystem(new RotationTargetSystem(), 0);\n    this.ecs.createSystem(new MagnetSystem(), 0);\n    this.ecs.createSystem(new DraggableSystem(this.mouse.getMousePosition), 0);\n    this.ecs.createSystem(new FootprintSystem(this.entityMap), 0);\n\n    // Base components\n    this.ecs.createSystem(new AccelerationSystem());\n    this.ecs.createSystem(new VelocitySystem());\n\n    // Rendering\n    this.ecs.createSystem(new LowSpriteRenderSystem(this.virtualCanvas), 41);\n    this.ecs.createSystem(new LifetimeRenderSystem(), 40);\n    this.ecs.createSystem(new RangeDisplaySystem(this.virtualCanvas), 49);\n    this.ecs.createSystem(new SpriteRenderSystem(this.virtualCanvas), 50);\n    this.ecs.createSystem(\n      new AnimatedSpriteRenderSystem(this.virtualCanvas),\n      50\n    );\n    this.ecs.createSystem(new HealthRenderSystem(this.virtualCanvas), 50);\n    this.ecs.createSystem(new RegionRenderSystem(this.virtualCanvas), 54);\n    this.ecs.createSystem(new TextRenderSystem(this.virtualCanvas), 55);\n    this.ecs.createSystem(\n      new ClickableDisplaySystem(\n        this.mouse.getMousePosition,\n        this.virtualCanvas\n      ),\n      59\n    );\n    this.ecs.createSystem(new SelectionSystem(this.virtualCanvas), 59);\n\n    // Debug\n    this.ecs.createSystem(new RotationDebugSystem(this.virtualCanvas), 60);\n    this.ecs.createSystem(new PositionDebugSystem(this.virtualCanvas), 60);\n\n    // User-defined\n    this.addSystems();\n  }\n\n  public updateLastTime(time: number): void {\n    this.lastTime = time;\n  }\n\n  public updateRawTime(time: number): void {\n    const deltaTime = time - this.lastTime;\n    this.lastTime = time;\n    this.update(deltaTime / 1000);\n  }\n\n  private update(deltaTime: number): void {\n    this.updateInput(deltaTime);\n    this.virtualCanvas.clear();\n    if (this.paused) {\n      this.ecs.update(0, this);\n    } else {\n      this.ecs.update(deltaTime * this.timeScale, this);\n    }\n    this.onUpdate(deltaTime * this.timeScale);\n  }\n\n  protected onUpdate(_deltaTime: number): void {\n    return;\n  }\n\n  public isRunning(): boolean {\n    return this.running;\n  }\n\n  public preStart(): void {\n    return;\n  }\n}\n","import Vector2 from \"../geometry/Vector2\";\nimport { Texture } from \"./Texture\";\nimport { VirtualCanvas } from \"./VirtualCanvas\";\n\nexport interface EffectCreator<T> {\n  create(position: Vector2, state: T): ParticleEffect;\n}\n\nexport interface EffectMutator<T> {\n  update(particleEffect: ParticleEffect, deltaTime: number, state: T): void;\n}\n\nexport interface EffectRenderer<T> {\n  draw(\n    particleEffect: ParticleEffect,\n    virtualCanvas: VirtualCanvas,\n    state: T\n  ): void;\n}\n\nexport interface EffectManager<T>\n  extends EffectCreator<T>,\n    EffectMutator<T>,\n    EffectRenderer<T> {}\n\nexport class ParticleManager<T> {\n  private creators: Map<string, EffectCreator<T>>;\n  private mutators: Map<string, EffectMutator<T>>;\n  private renderers: Map<string, EffectRenderer<T>>;\n  private particles: Map<number, ParticleEffect>;\n  private nextParticle = 0;\n  public addEffectManager(effectName: string, manager: EffectManager<T>) {\n    if (!this.creators.has(effectName)) {\n      this.creators.set(effectName, manager);\n    }\n    if (!this.mutators.has(effectName)) {\n      this.mutators.set(effectName, manager);\n    }\n    if (!this.renderers.has(effectName)) {\n      this.renderers.set(effectName, manager);\n    }\n  }\n  public addEffect(\n    effectName: string,\n    creator: EffectCreator<T>,\n    renderer: EffectRenderer<T>,\n    mutator: EffectMutator<T>\n  ) {\n    if (!this.creators.has(effectName)) {\n      this.creators.set(effectName, creator);\n    }\n    if (!this.mutators.has(effectName)) {\n      this.mutators.set(effectName, mutator);\n    }\n    if (!this.renderers.has(effectName)) {\n      this.renderers.set(effectName, renderer);\n    }\n  }\n  createEffect(effect: string, position: Vector2, state: T) {\n    this.particles.set(\n      this.nextParticle++,\n      this.creators.get(effect).create(position, state)\n    );\n  }\n  draw(virtualCanvas: VirtualCanvas, state: T): void {\n    for (const key of this.particles.keys()) {\n      const particle = this.particles.get(key);\n      const renderer = this.renderers.get(particle.effect);\n      renderer.draw(particle, virtualCanvas, state);\n    }\n  }\n\n  update(delta: number, state: T): void {\n    for (const key of this.particles.keys()) {\n      const particle = this.particles.get(key);\n      const mutator = this.mutators.get(particle.effect);\n      mutator.update(particle, delta, state);\n    }\n  }\n}\n\nexport class ParticleEffect {\n  readonly center: Vector2;\n  readonly direction: Vector2;\n  readonly velocity: Vector2;\n  readonly lifetime: number;\n  readonly rotation: number;\n  readonly elapsedLifetime: number;\n  readonly texture: Texture;\n  readonly size: Vector2;\n  readonly effect: string;\n  constructor(\n    center: Vector2,\n    velocity: Vector2,\n    lifetime: number,\n    rotation: number,\n    texture: Texture,\n    size: Vector2,\n    effect: string\n  ) {\n    this.center = center;\n    this.velocity = velocity;\n    this.lifetime = lifetime;\n    this.rotation = rotation;\n    this.texture = texture;\n    this.size = size;\n    this.elapsedLifetime = 0;\n    this.effect = effect;\n  }\n}\n","import { lowerFirst } from \"lodash\";\nimport { Component } from \"../../ecs/Component\";\n\nexport class Sellable extends Component {\n  protected defaultData(): Record<string, unknown> {\n    return {};\n  }\n\n  getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n}\n\nexport const SellableComponent = new Sellable();\nexport default SellableComponent;\n","import { lowerFirst } from \"lodash\";\nimport { FootprintEntity } from \"../../core/components/data/Footprint\";\nimport { PositionEntity } from \"../../core/components/data/Position\";\nimport { RotationEntity } from \"../../core/components/data/Rotation\";\nimport { DynamicConstant } from \"../../core/data/DynamicConstant\";\nimport { Component } from \"../../core/ecs/Component\";\nimport { AutoName } from \"../../core/ecs/decorators/AutoName\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { Texture } from \"../../core/rendering/Texture\";\n\nexport interface TurretBaseData extends Record<string, unknown> {\n  source: Texture;\n}\n\nexport type TurretBaseEntity = Entity &\n  PositionEntity &\n  FootprintEntity & { data: { turretBase: TurretBaseData } };\n\n@AutoName\nexport class TurretBase extends Component {\n  private static NO_TEXTURE: Texture = undefined;\n\n  constructor() {\n    super();\n    if (TurretBase.NO_TEXTURE === undefined) {\n      TurretBase.NO_TEXTURE = new Texture(\n        \"assets/notex.png\",\n        Vector2.matching(32)\n      );\n    }\n  }\n\n  protected defaultData(): TurretBaseData {\n    return { source: TurretBase.NO_TEXTURE, offset: Vector2.ZERO };\n  }\n}\n\nexport const TurretBaseComponent = new TurretBase();\nexport default TurretBaseComponent;\n","import { PositionComponent } from \"../../core/components/data/Position\";\nimport { getDynamic } from \"../../core/data/DynamicConstant\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport { BaseSystem } from \"../../core/ecs/System\";\nimport { VirtualCanvas } from \"../../core/rendering/VirtualCanvas\";\nimport TurretBaseComponent, {\n  TurretBaseEntity,\n} from \"../components/BaseComponent\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { FootprintComponent } from \"../../core/components/data/Footprint\";\nimport { Basis } from \"../../core/ecs/decorators/Basis\";\nimport { Required } from \"../../core/ecs/decorators/Required\";\n\n@Basis(TurretBaseComponent)\n@Required([FootprintComponent, PositionComponent])\nexport class TurretBaseRenderSystem extends BaseSystem {\n  private readonly virtualCanvas: VirtualCanvas;\n\n  constructor(virtualCanvas: VirtualCanvas) {\n    super();\n    this.virtualCanvas = virtualCanvas;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const spriteEntity = entity as TurretBaseEntity;\n    const { turretBase, footprint, position } = spriteEntity.data;\n    this.virtualCanvas.drawImage(\n      turretBase.source,\n      getDynamic(position.position),\n      Vector2.matching(footprint.size * 1.5)\n    );\n  }\n}\n","import { HealthEntity } from \"../../core/components/data/Health\";\n\nexport class ProjectileType {\n  public static readonly DEFAULT = new ProjectileType();\n  speed = 5; // units per second of projectile\n  damage = 5;\n  splashRadius = 0.01;\n}\n","import { RotationTargetEntity } from \"../../core/components/behavior/RotationTarget\";\nimport { PositionEntity } from \"../../core/components/data/Position\";\nimport { RangeEntity } from \"../../core/components/data/Range\";\nimport { Component } from \"../../core/ecs/Component\";\nimport { AutoName } from \"../../core/ecs/decorators/AutoName\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport { EntityProducer } from \"../../core/ecs/EntityProducer\";\nimport { IntervalStorage } from \"../../core/ecs/System\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { ProjectileType } from \"../types/ProjectileType\";\nimport { CreepEntity } from \"./Creep\";\n\nexport interface WeaponData extends Record<string, unknown>, IntervalStorage {\n  projectile: EntityProducer;\n  projectileType: ProjectileType;\n  rate: number; // entities per second\n  elapsed: number;\n  target: CreepEntity;\n  canFire: boolean;\n  barrelOffsets: Array<Vector2>;\n  barrel: number;\n  fireStrictness: number;\n  arcReached: boolean;\n  tags: Array<string>;\n}\n\nexport interface ChildDataGenerator {\n  (componentName: string, parent: Entity): Record<string, unknown>;\n}\n\nexport type WeaponEntity = RangeEntity &\n  RotationTargetEntity & { data: { weapon: WeaponData } };\n\n@AutoName\nexport class Weapon extends Component {\n  protected defaultData(): WeaponData {\n    return {\n      rate: 1,\n      elapsed: 0,\n      projectile: null,\n      target: null,\n      canFire: true,\n      barrelOffsets: [Vector2.ZERO],\n      barrel: 0,\n      fireStrictness: 1,\n      arcReached: false,\n      projectileType: ProjectileType.DEFAULT,\n      tags: [],\n    };\n  }\n}\n\nexport const WeaponComponent = new Weapon();\nexport default WeaponComponent;\n","import { PathFollowerEntity } from \"../../core/components/behavior/PathFollower\";\nimport { HealthEntity } from \"../../core/components/data/Health\";\nimport { PositionEntity } from \"../../core/components/data/Position\";\nimport { Component } from \"../../core/ecs/Component\";\nimport { AutoName } from \"../../core/ecs/decorators/AutoName\";\n\nexport type CreepEntity = PositionEntity &\n  HealthEntity &\n  PathFollowerEntity & { data: { creep: CreepData } };\n\nexport interface CreepData {\n  tags: Array<string>;\n}\n@AutoName\nexport class Creep extends Component {\n  defaultData(): Record<string, unknown> {\n    return { tags: [\"ground\"] };\n  }\n}\n\nexport const CreepComponent = new Creep();\nexport default CreepComponent;\n","import { getDynamic } from \"../../core/data/DynamicConstant\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport { BaseSystem } from \"../../core/ecs/System\";\nimport { Basis } from \"../../core/ecs/decorators/Basis\";\nimport WeaponComponent, { WeaponEntity } from \"../components/Weapon\";\nimport { Required } from \"../../core/ecs/decorators/Required\";\nimport { RotationTargetComponent } from \"../../core/components/behavior/RotationTarget\";\nimport CreepComponent, { CreepEntity } from \"../components/Creep\";\nimport { PointRadiusPointCollision as pointRadiusPointCollision } from \"../../core/geometry/Collision\";\nimport { intersection } from \"lodash\";\n\n@Basis(WeaponComponent)\n@Required([RotationTargetComponent])\nexport class WeaponSystem extends BaseSystem {\n  private creeps: Array<CreepEntity>;\n\n  onManagerAwake(): void {\n    this.listen(\"rotationTarget:reached\", true);\n  }\n\n  onEvent(eventName: string, entity: WeaponEntity): void {\n    entity.data.weapon.arcReached = true;\n  }\n\n  systemUpdate(): void {\n    this.creeps = this.manager.getEntitiesWithComponent(\n      CreepComponent\n    ) as Array<CreepEntity>;\n  }\n\n  protected updateEntity(deltaTime: number, entity: Entity): void {\n    const targetEntity = entity as WeaponEntity;\n    const { weapon, rotationTarget } = targetEntity.data;\n    if (!weapon.canFire && this.checkInterval(deltaTime, weapon)) {\n      weapon.canFire = true;\n    }\n\n    if (weapon.target === undefined) {\n      weapon.target = null;\n    }\n\n    let best = weapon.target;\n\n    const bestInRange = this.creepInRange(targetEntity, best, 1);\n    for (let creepIdx = 0; creepIdx < this.creeps.length; creepIdx++) {\n      const creep = this.creeps[creepIdx];\n      if (!this.isValidCreep(creep)) {\n        continue;\n      }\n\n      const tagIntersection = intersection(\n        targetEntity.data.weapon.tags,\n        creep.data.creep.tags\n      );\n      if (\n        this.creepInRange(targetEntity, creep, 1) &&\n        tagIntersection.length > 0\n      ) {\n        if (!this.isValidCreep(best) || !bestInRange) {\n          best = creep;\n        } else if (\n          creep.data.pathFollower.point > best.data.pathFollower.point\n        ) {\n          best = this.creeps[creepIdx];\n        }\n      }\n    }\n\n    weapon.target = best;\n    if (best === null || !best.active) {\n      return;\n    }\n\n    rotationTarget.target = best.data.position.position;\n\n    if (weapon.canFire && this.creepInRange(targetEntity, best)) {\n      // Fire\n      if (weapon.arcReached) {\n        weapon.projectile(targetEntity, this.manager);\n        weapon.canFire = false;\n        weapon.barrel = (weapon.barrel + 1) % weapon.barrelOffsets.length;\n        this.manager.emitEvent(\"weapon:fire\", targetEntity);\n      }\n    }\n    weapon.arcReached = false;\n  }\n\n  private creepInRange(\n    weapon: WeaponEntity,\n    creep: CreepEntity,\n    offset = 0\n  ): boolean {\n    if (!this.isValidCreep(creep)) {\n      return false;\n    }\n    const pos = getDynamic(weapon.data.position.position);\n    const creepPos = getDynamic(creep.data.position.position);\n    return pointRadiusPointCollision(\n      pos,\n      weapon.data.range.range + offset,\n      creepPos\n    );\n  }\n\n  private isValidCreep(entity: CreepEntity) {\n    return (\n      entity !== null &&\n      entity !== undefined &&\n      entity.active &&\n      entity.data.creep !== undefined\n    );\n  }\n}\n","import { RotationTargetEntity } from \"../../core/components/behavior/RotationTarget\";\nimport { RangeEntity } from \"../../core/components/data/Range\";\nimport { Component } from \"../../core/ecs/Component\";\nimport { AutoName } from \"../../core/ecs/decorators/AutoName\";\n\nexport interface DamageData extends Record<string, unknown> {\n  damage: number; // health units\n}\n\nexport type DamageEntity = RangeEntity &\n  RotationTargetEntity & { data: { damage: DamageData } };\n\n@AutoName\nexport class Damage extends Component {\n  protected defaultData(): DamageData {\n    return {\n      damage: 1,\n    };\n  }\n}\n\nexport const DamageComponent = new Damage();\nexport default DamageComponent;\n","import { VelocityTargetEntity } from \"../../core/components/behavior/PositionTarget\";\nimport { RotationTargetEntity } from \"../../core/components/behavior/RotationTarget\";\nimport { HealthEntity } from \"../../core/components/data/Health\";\nimport { RangeEntity } from \"../../core/components/data/Range\";\nimport { Component } from \"../../core/ecs/Component\";\nimport { AutoName } from \"../../core/ecs/decorators/AutoName\";\nimport { DamageEntity } from \"./Damage\";\n\nexport interface DamageTargetData extends Record<string, unknown> {\n  target: HealthEntity; // health units\n}\n\nexport type DamageTargetEntity = DamageEntity &\n  VelocityTargetEntity & { data: { damageTarget: DamageTargetData } };\n\n@AutoName\nexport class DamageTarget extends Component {\n  protected defaultData(): DamageTargetData {\n    return {\n      target: null,\n    };\n  }\n}\n\nexport const DamageTargetComponent = new DamageTarget();\nexport default DamageTargetComponent;\n","import { VelocityTargetComponent } from \"../../core/components/behavior/PositionTarget\";\nimport { Basis } from \"../../core/ecs/decorators/Basis\";\nimport { Required } from \"../../core/ecs/decorators/Required\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport { BaseSystem } from \"../../core/ecs/System\";\nimport DamageComponent from \"../components/Damage\";\nimport DamageTargetComponent, {\n  DamageTargetEntity,\n} from \"../components/DamageTarget\";\n\n@Basis(DamageTargetComponent)\n@Required([VelocityTargetComponent, DamageComponent])\nexport class DamageTargetSystem extends BaseSystem {\n  onManagerAwake() {\n    this.listen(\"velocityTarget:reached\");\n  }\n\n  onEvent(_: string, entity: DamageTargetEntity) {\n    if (!entity.active) {\n      this.manager.removeEntity(entity);\n      return;\n    }\n    const { damageTarget, damage } = entity.data;\n    damageTarget.target.data.health.health -= damage.damage;\n    this.manager.removeEntity(entity);\n  }\n}\n","class Random {\n  gaussian(count = 6): number {\n    let rand = 0;\n\n    for (let i = 0; i < count; i++) {\n      rand += Math.random();\n    }\n\n    return rand / count - 0.5;\n  }\n  withoutReplacement(top: number): Array<number> {\n    const arr: Array<number> = [];\n    for (let i = 1; i <= top; i++) {\n      arr[i - 1] = i;\n    }\n    this.shuffleArray(arr);\n    return arr;\n  }\n\n  withoutReplacementGenerator(top: number): Generator<number, number, number> {\n    const arr: Array<number> = [];\n    for (let i = 1; i <= top; i++) {\n      arr[i - 1] = i;\n    }\n    this.shuffleArray(arr);\n    return (function* () {\n      for (let i = 0; i < arr.length; i++) yield arr[i];\n      while (true) yield 0;\n    })();\n  }\n\n  shuffleArray<T>(array: Array<T>) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n}\n\nexport const random = new Random();\n","import { VelocityTargetEntity } from \"../../core/components/behavior/PositionTarget\";\nimport { HealthEntity } from \"../../core/components/data/Health\";\nimport { PositionEntity } from \"../../core/components/data/Position\";\nimport { Component } from \"../../core/ecs/Component\";\nimport { AutoName } from \"../../core/ecs/decorators/AutoName\";\nimport { DamageEntity } from \"./Damage\";\n\nexport interface DamageSplashData extends Record<string, unknown> {\n  radius: number; // virtual coordinate units\n  target: HealthEntity & PositionEntity;\n  tags: Array<string>;\n}\n\nexport type DamageSplashEntity = VelocityTargetEntity &\n  DamageEntity & { data: { splashDamage: DamageSplashData } };\n\n@AutoName\nexport class SplashDamage extends Component {\n  protected defaultData(): DamageSplashData {\n    return {\n      radius: 1,\n      target: null,\n      tags: [\"ground\"],\n    };\n  }\n}\n\nexport const SplashDamageComponent = new SplashDamage();\nexport default SplashDamageComponent;\n","import { intersection } from \"lodash\";\nimport { LifetimeComponent } from \"../../core/components/behavior/Lifetime\";\nimport { VelocityTargetComponent } from \"../../core/components/behavior/PositionTarget\";\nimport SpawnerComponent from \"../../core/components/behavior/Spawner\";\nimport { PositionComponent } from \"../../core/components/data/Position\";\nimport { RotationComponent } from \"../../core/components/data/Rotation\";\nimport { VelocityComponent } from \"../../core/components/data/Velocity\";\nimport LifetimeRenderComponent from \"../../core/components/rendering/LifetimeRender\";\nimport SpriteComponent from \"../../core/components/rendering/Sprite\";\nimport { DynamicConstant, getDynamic } from \"../../core/data/DynamicConstant\";\nimport { Basis } from \"../../core/ecs/decorators/Basis\";\nimport { Required } from \"../../core/ecs/decorators/Required\";\nimport { BaseSystem } from \"../../core/ecs/System\";\nimport { PointRadiusPointCollision } from \"../../core/geometry/Collision\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { random } from \"../../core/Random\";\nimport { Texture } from \"../../core/rendering/Texture\";\nimport CreepComponent, { CreepEntity } from \"../components/Creep\";\nimport DamageComponent from \"../components/Damage\";\nimport SplashDamageComponent, {\n  DamageSplashEntity,\n} from \"../components/SplashDamage\";\n\n@Basis(SplashDamageComponent)\n@Required([VelocityTargetComponent, DamageComponent])\nexport class SplashDamageSystem extends BaseSystem {\n  private targets: Array<CreepEntity> = [];\n  private fireTex = new Texture(\"assets/fire.png\");\n\n  onManagerAwake(): void {\n    this.listen(\"velocityTarget:reached\");\n  }\n\n  systemUpdate(): void {\n    this.targets = this.manager.getEntitiesWithComponent(\n      CreepComponent\n    ) as Array<CreepEntity>;\n  }\n\n  onEvent(_: string, entity: DamageSplashEntity): void {\n    if (!entity.active) {\n      this.manager.removeEntity(entity);\n      return;\n    }\n    const { splashDamage, damage } = entity.data;\n    for (let entityIdx = 0; entityIdx < this.targets.length; entityIdx++) {\n      const target = this.targets[entityIdx];\n      // Something got removed\n      if (!target.active || target.data.creep === undefined) {\n        continue;\n      }\n\n      // Whatever we were following died\n      if (\n        !splashDamage.target.active ||\n        splashDamage.target.data.position === undefined\n      ) {\n        if (\n          PointRadiusPointCollision(\n            getDynamic(entity.data.position.position),\n            splashDamage.radius,\n            getDynamic(target.data.position.position)\n          ) &&\n          intersection(splashDamage.tags, target.data.creep.tags).length > 0\n        ) {\n          target.data.health.health -= damage.damage;\n        }\n      }\n\n      // We arrived at our position\n      if (\n        PointRadiusPointCollision(\n          getDynamic(splashDamage.target.data.position.position),\n          splashDamage.radius,\n          getDynamic(target.data.position.position)\n        ) &&\n        intersection(splashDamage.tags, target.data.creep.tags).length > 0\n      ) {\n        target.data.health.health -= damage.damage;\n      }\n    }\n    this.createExplosion(entity.data.position.position, splashDamage.radius);\n    this.manager.removeEntity(entity);\n  }\n\n  private createExplosion(pos: DynamicConstant<Vector2>, radius: number) {\n    const position = getDynamic(pos);\n    const id = this.manager.createEntity();\n    this.manager.addComponent(id, PositionComponent, {\n      position,\n    });\n    this.manager.addComponent(id, LifetimeComponent, {\n      lifetime: 1,\n    });\n    this.manager.addComponent(id, SpawnerComponent, {\n      count: 5,\n      rate: 0.1,\n      producer: () => {\n        const id = this.manager.createEntity();\n        const rotVec = Vector2.fromAngle(random.gaussian() * 720, radius);\n        this.manager.addComponent(id, PositionComponent, {\n          position,\n        });\n        this.manager.addComponent(id, VelocityComponent, {\n          velocity: rotVec,\n        });\n        this.manager.addComponent(id, RotationComponent);\n        this.manager.addComponent(id, LifetimeComponent, {\n          lifetime: 1,\n        });\n        this.manager.addComponent(id, SpriteComponent, {\n          source: this.fireTex,\n          size: Vector2.matching(0.25),\n        });\n        this.manager.addComponent(id, LifetimeRenderComponent);\n      },\n    });\n  }\n}\n","import { Texture } from \"../../core/rendering/Texture\";\nimport { TowerType } from \"../types/TowerType\";\n\nconst t2 = new Texture(\"assets/turret-1-2.png\");\nconst t3 = new Texture(\"assets/turret-1-3.png\");\n\nexport const MinigunTower: TowerType = {\n  name: \"Rifle Tower\",\n  description: \"Short-range tower\",\n  size: 2,\n  range: 4,\n  rotationRate: 360,\n  fireRate: 1,\n  cost: 5,\n  projectile: {\n    speed: 50,\n    damage: 2,\n    splashRadius: 0,\n  },\n  levelSprites: [\"tower-1-1\", \"tower-1-2\", \"tower-1-3\"],\n  tags: [\"ground\"],\n  upgrades: [\n    {\n      cost: 10,\n      dataDelta: {\n        weapon: { projectileType: { damage: 5 }, rate: 0.8 },\n        sprite: { source: t2 },\n      },\n    },\n    {\n      cost: 20,\n      dataDelta: {\n        weapon: { projectileType: { damage: 7 } },\n        sprite: { source: t3 },\n        range: { range: 5 },\n      },\n    },\n  ],\n  projectileSpawner: \"bullet\",\n};\n","import { Texture } from \"../../core/rendering/Texture\";\nimport { TowerType } from \"../types/TowerType\";\n\nconst t2 = new Texture(\"assets/turret-2-2.png\");\nconst t3 = new Texture(\"assets/turret-2-3.png\");\n\nexport const MissileTower: TowerType = {\n  name: \"MissileTower\",\n  description: \"Long-range splash tower\",\n  size: 2,\n  range: 8,\n  rotationRate: 90,\n  fireRate: 1,\n  cost: 20,\n  projectile: {\n    speed: 20,\n    damage: 5,\n    splashRadius: 1,\n  },\n  levelSprites: [\"tower-2-1\", \"tower-2-2\", \"tower-2-3\"],\n  tags: [\"ground\"],\n  upgrades: [\n    {\n      cost: 20,\n      dataDelta: {\n        weapon: {\n          projectileType: {\n            damage: 10,\n            splashRadius: 1.25,\n          },\n        },\n        sprite: {\n          source: t2,\n        },\n      },\n    },\n    {\n      cost: 40,\n      dataDelta: {\n        weapon: {\n          projectileType: {\n            damage: 10,\n            splashRadius: 2,\n          },\n        },\n        sprite: {\n          source: t3,\n        },\n      },\n    },\n  ],\n  projectileSpawner: \"missile\",\n};\n","import Vector2 from \"../../core/geometry/Vector2\";\nimport { Texture } from \"../../core/rendering/Texture\";\nimport { TowerType } from \"../types/TowerType\";\n\nconst t2 = new Texture(\"assets/turret-3-2.png\");\nconst t3 = new Texture(\"assets/turret-3-3.png\");\n\nexport const SwarmerTower: TowerType = {\n  name: \"Swarmer Tower\",\n  description: \"Rapidfire Anti-Air Tower\",\n  size: 2,\n  range: 5,\n  rotationRate: 270,\n  fireRate: 0.5,\n  cost: 20,\n  projectile: {\n    speed: 20,\n    damage: 5,\n    splashRadius: 0.2,\n  },\n  barrels: [new Vector2(0.2, 0.1), new Vector2(0.2, 0.1)],\n  levelSprites: [\"tower-3-1\", \"tower-3-2\", \"tower-3-3\"],\n  tags: [\"air\"],\n  upgrades: [\n    {\n      cost: 25,\n      dataDelta: {\n        weapon: {\n          rate: 0.25,\n          range: 6,\n        },\n        sprite: {\n          source: t2,\n        },\n      },\n    },\n    {\n      cost: 50,\n      dataDelta: {\n        weapon: {\n          range: 7,\n          projectileType: {\n            damage: 10,\n          },\n        },\n        sprite: {\n          source: t3,\n        },\n        rotationTarget: {\n          turnRate: 360,\n        },\n      },\n    },\n  ],\n  projectileSpawner: \"swarmMissile\",\n};\n","import { Texture } from \"../../core/rendering/Texture\";\nimport { TowerType } from \"../types/TowerType\";\n\nconst t2 = new Texture(\"assets/turret-4-2.png\");\nconst t3 = new Texture(\"assets/turret-4-3.png\");\n\nexport const SniperTower: TowerType = {\n  name: \"Sniper Tower\",\n  description: \"Long-range slow-firing tower.\",\n  size: 2,\n  range: 12,\n  rotationRate: 45,\n  fireRate: 3.0,\n  cost: 40,\n  projectile: {\n    speed: 40,\n    damage: 10,\n    splashRadius: 0,\n  },\n  levelSprites: [\"tower-4-1\", \"tower-4-2\", \"tower-4-3\"],\n  tags: [\"air\", \"ground\"],\n  upgrades: [\n    {\n      cost: 50,\n      dataDelta: {\n        weapon: {\n          projectileType: { damage: 15 },\n          rate: 2.5,\n        },\n        rotationTarget: {\n          turnRate: 60,\n        },\n        range: {\n          range: 13,\n        },\n        sprite: {\n          source: t2,\n        },\n      },\n    },\n    {\n      cost: 100,\n      dataDelta: {\n        weapon: {\n          projectileType: { damage: 20, splashRadius: 0.5 },\n        },\n        rotationTarget: {\n          turnRate: 90,\n        },\n        range: {\n          range: 15,\n        },\n        sprite: {\n          source: t3,\n        },\n      },\n    },\n  ],\n  projectileSpawner: \"bullet\",\n};\n","import { AbstractClickComponent } from \"../core/components/behavior/click/AbstractClick\";\nimport { ClickableComponent } from \"../core/components/behavior/click/Clickable\";\nimport { PositionComponent } from \"../core/components/data/Position\";\nimport { ClickableDisplayComponent } from \"../core/components/ui/ClickableDisplay\";\nimport { RegionComponent } from \"../core/components/ui/RegionRender\";\nimport TextRenderComponent from \"../core/components/ui/TextRender\";\nimport { DynamicConstant } from \"../core/data/DynamicConstant\";\nimport { ECSManager } from \"../core/ecs/ECSManager\";\nimport { Entity } from \"../core/ecs/Entity\";\nimport Vector2 from \"../core/geometry/Vector2\";\nimport { WeaponData } from \"./components/Weapon\";\nimport { GameModel } from \"./GameModel\";\n\nfunction createUIText(\n  ecs: ECSManager,\n  position: Vector2,\n  text: DynamicConstant<string>,\n  style?: string,\n  size?: number,\n  align?: CanvasTextAlign\n) {\n  const el = ecs.createEntity();\n  ecs.addComponent(el, PositionComponent, {\n    position,\n  });\n  ecs.addComponent(el, TextRenderComponent, {\n    text,\n    style,\n    size,\n    align,\n  });\n}\n\nfunction createUIRegion(\n  ecs: ECSManager,\n  position: Vector2,\n  delta?: Vector2,\n  clickable = false,\n  action?: (entity: Entity) => void\n): number {\n  const el = ecs.createEntity();\n  ecs.addComponent(el, PositionComponent, {\n    position,\n  });\n  if (!clickable && delta) {\n    ecs.addComponent(el, RegionComponent, {\n      delta,\n    });\n  } else {\n    ecs.addComponent(el, ClickableComponent, {\n      delta,\n    });\n    ecs.addComponent(el, AbstractClickComponent, {\n      action,\n    });\n    ecs.addComponent(el, ClickableDisplayComponent, {});\n  }\n  return el;\n}\n\nexport function createUI(ecs: ECSManager, model: GameModel): void {\n  createUIRegion(ecs, new Vector2(5, 15), new Vector2(5, 15));\n  createUIText(ecs, new Vector2(5, 1), \"Tower Defense\", \"#ffffff\", 2);\n  createUIText(\n    ecs,\n    new Vector2(2.5, 2),\n    () => \"Lives: \" + model.lives.toFixed(0),\n    \"#ffffff\"\n  );\n  createUIText(\n    ecs,\n    new Vector2(7.5, 2),\n    () => \"Money: \" + model.money.toFixed(0),\n    \"#ffffff\"\n  );\n  createUIText(ecs, new Vector2(5, 4), \"Towers\", \"#ffffff\");\n  const tower1 = createUIRegion(\n    ecs,\n    new Vector2(2, 5),\n    new Vector2(0.5, 0.5),\n    true,\n    () => model.actionMap.invoke(\"setTower\", { tower: \"tower-1\" })\n  );\n  ecs.addComponent(tower1, TextRenderComponent, {\n    text: \"1\",\n    style: \"#ffffff\",\n  });\n  const tower2 = createUIRegion(\n    ecs,\n    new Vector2(4, 5),\n    new Vector2(0.5, 0.5),\n    true,\n    () => model.actionMap.invoke(\"setTower\", { tower: \"tower-2\" })\n  );\n  ecs.addComponent(tower2, TextRenderComponent, {\n    text: \"2\",\n    style: \"#ffffff\",\n  });\n  const tower3 = createUIRegion(\n    ecs,\n    new Vector2(6, 5),\n    new Vector2(0.5, 0.5),\n    true,\n    () => model.actionMap.invoke(\"setTower\", { tower: \"tower-3\" })\n  );\n  ecs.addComponent(tower3, TextRenderComponent, {\n    text: \"3\",\n    style: \"#ffffff\",\n  });\n  const tower4 = createUIRegion(\n    ecs,\n    new Vector2(8, 5),\n    new Vector2(0.5, 0.5),\n    true,\n    () => model.actionMap.invoke(\"setTower\", { tower: \"tower-4\" })\n  );\n  ecs.addComponent(tower4, TextRenderComponent, {\n    text: \"4\",\n    style: \"#ffffff\",\n  });\n  createUIText(ecs, new Vector2(5, 7), \"Selected\", \"#ffffff\");\n  createUIText(\n    ecs,\n    new Vector2(1, 8),\n    (): string => {\n      const sel = model.getSelection();\n      if (sel !== null) {\n        let val = \"\";\n        if (\"name\" in sel.data) {\n          val += (sel.data.name.name as string) + \"\\n\";\n        }\n        if (\"health\" in sel.data) {\n          val +=\n            \"Health: \" + (sel.data.health.health as number).toFixed(0) + \"\\n\";\n        }\n        if (\"value\" in sel.data) {\n          val += \"Value: \" + (sel.data.value.value as number).toFixed(0) + \"\\n\";\n        }\n        if (\"weapon\" in sel.data) {\n          const weapon = sel.data.weapon as WeaponData;\n          val += \"Ready to Fire: \" + weapon.canFire + \"\\n\";\n          val +=\n            \"Fire Rate: \" + (1 / weapon.rate).toFixed(2) + \" per second\" + \"\\n\";\n          val += \"Damage: \" + weapon.projectileType.damage.toFixed(2) + \"\\n\";\n          val +=\n            \"Can Target: \" + (weapon.tags as Array<string>).join(\", \") + \"\\n\";\n        }\n        if (\"upgrade\" in sel.data && sel.data.upgrade.cost > 0) {\n          val +=\n            \"Upgrade cost: \" +\n            (sel.data.upgrade.cost as number).toFixed(0) +\n            \"\\n\";\n        }\n        return val;\n      }\n      return \"\";\n    },\n    \"#ffffff\",\n    1,\n    \"left\"\n  );\n  const sellButton = createUIRegion(\n    ecs,\n    new Vector2(2.675, 24),\n    new Vector2(2.125, 1),\n    true,\n    () => model.actionMap.invoke(\"sell\")\n  );\n  ecs.addComponent(sellButton, TextRenderComponent, {\n    text: \"Sell\",\n    style: \"#ffffff\",\n  });\n  const upgradeButton = createUIRegion(\n    ecs,\n    new Vector2(7.375, 24),\n    new Vector2(2.125, 1),\n    true,\n    () => model.actionMap.invoke(\"upgrade\")\n  );\n  ecs.addComponent(upgradeButton, TextRenderComponent, {\n    text: \"Upgrade\",\n    style: \"#ffffff\",\n  });\n  const nextWave = createUIRegion(\n    ecs,\n    new Vector2(5, 26.5),\n    new Vector2(4.5, 1),\n    true,\n    () => model.actionMap.invoke(\"wave\")\n  );\n  ecs.addComponent(nextWave, TextRenderComponent, {\n    text: \"Send Next Wave\",\n    style: \"#ffffff\",\n  });\n  const exitButton = createUIRegion(\n    ecs,\n    new Vector2(5, 29),\n    new Vector2(4.5, 1),\n    true,\n    () => model.actionMap.invoke(\"exit\")\n  );\n  ecs.addComponent(exitButton, TextRenderComponent, {\n    text: \"Exit\",\n    style: \"#ffffff\",\n  });\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\nimport { PositionEntity } from \"../data/Position\";\n\nexport interface UpgradeData extends Record<string, unknown> {\n  cost: DynamicConstant<number>; // currency units\n  dataDelta: DynamicConstant<Record<string, Record<string, unknown>>>;\n}\n\nexport type UpgradeEntity = Entity &\n  PositionEntity & { data: { upgrade: UpgradeData } };\n\nexport class Upgrade extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n  protected defaultData(): UpgradeData {\n    return { cost: 0, dataDelta: {} };\n  }\n}\n\nexport const UpgradeComponent = new Upgrade();\nexport default UpgradeComponent;\n","import { LifetimeComponent } from \"../../core/components/behavior/Lifetime\";\nimport {\n  PositionComponent,\n  PositionEntity,\n} from \"../../core/components/data/Position\";\nimport { RotationComponent } from \"../../core/components/data/Rotation\";\nimport { VelocityComponent } from \"../../core/components/data/Velocity\";\nimport LifetimeRenderComponent from \"../../core/components/rendering/LifetimeRender\";\nimport SpriteComponent from \"../../core/components/rendering/Sprite\";\nimport { getDynamic } from \"../../core/data/DynamicConstant\";\nimport { ECSManager } from \"../../core/ecs/ECSManager\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { random } from \"../../core/Random\";\nimport { Texture } from \"../../core/rendering/Texture\";\n\nexport function makeBlood(parent: PositionEntity, manager: ECSManager): void {\n  const entity = manager.createEntity();\n  const offset = Vector2.fromAngle(random.gaussian() * 720).scale(\n    random.gaussian()\n  );\n  const ppos = getDynamic(parent.data.position.position);\n  manager.addComponent(entity, PositionComponent, {\n    position: ppos.add(offset),\n  });\n  manager.addComponent(entity, VelocityComponent, {\n    velocity: offset,\n  });\n  manager.addComponent(entity, RotationComponent, {\n    rotation: random.gaussian() * 720,\n  });\n  manager.addComponent(entity, SpriteComponent, {\n    size: Vector2.matching(0.5),\n    source: new Texture(\"assets/Gear.png\"),\n  });\n  manager.addComponent(entity, LifetimeComponent);\n  manager.addComponent(entity, LifetimeRenderComponent);\n}\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\n\nexport interface NameData extends Record<string, unknown> {\n  name: DynamicConstant<string>;\n}\n\nexport type NameEntity = Entity & { data: { name: NameData } };\n\nexport class Name extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): NameData {\n    return { name: \"Unknown\" };\n  }\n}\n\nexport const NameComponent = new Name();\n","import { lowerFirst } from \"lodash\";\nimport { DynamicConstant } from \"../../data/DynamicConstant\";\nimport { Component } from \"../../ecs/Component\";\nimport { Entity } from \"../../ecs/Entity\";\n\nexport interface ValueData extends Record<string, unknown> {\n  value: DynamicConstant<number>; // virtual coordinate units\n}\n\nexport type ValueEntity = Entity & { data: { value: ValueData } };\n\nexport class Value extends Component {\n  public getName(): string {\n    return lowerFirst(this.constructor.name);\n  }\n\n  protected defaultData(): ValueData {\n    return { value: 0 };\n  }\n}\n\nexport const ValueComponent = new Value();\n","import { LifetimeComponent } from \"../../core/components/behavior/Lifetime\";\nimport { VelocityTargetComponent } from \"../../core/components/behavior/PositionTarget\";\nimport { RotationTargetComponent } from \"../../core/components/behavior/RotationTarget\";\nimport SpawnerComponent from \"../../core/components/behavior/Spawner\";\nimport { PositionComponent } from \"../../core/components/data/Position\";\nimport { RotationComponent } from \"../../core/components/data/Rotation\";\nimport { VelocityComponent } from \"../../core/components/data/Velocity\";\nimport SpriteComponent from \"../../core/components/rendering/Sprite\";\nimport { getDynamic } from \"../../core/data/DynamicConstant\";\nimport { ECSManager } from \"../../core/ecs/ECSManager\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { makeSmokeTrail } from \"../../core/prefabs/SmokeParticle\";\nimport { Texture } from \"../../core/rendering/Texture\";\nimport DamageComponent from \"../components/Damage\";\nimport DamageTargetComponent from \"../components/DamageTarget\";\nimport SplashDamageComponent from \"../components/SplashDamage\";\nimport { WeaponEntity } from \"../components/Weapon\";\n\nconst tex = new Texture(\"assets/Bullet.png\");\n\nexport function bullet(parent: WeaponEntity, manager: ECSManager): Entity {\n  const id = manager.createEntity();\n  const entity = manager.getEntity(id);\n  const target = parent.data.weapon.target;\n  const { weapon, range } = parent.data;\n  let position = Vector2.ZERO;\n  position = position.add(\n    parent.data.weapon.barrelOffsets[parent.data.weapon.barrel]\n  );\n  position = position.rotate(getDynamic(parent.data.rotation.rotation));\n  position = position.add(getDynamic(parent.data.position.position));\n  manager.addComponent(entity, PositionComponent, {\n    position,\n  });\n  manager.addComponent(entity, RotationComponent, {\n    rotation: parent.data.rotation.rotation,\n  });\n  manager.addComponent(entity, RotationTargetComponent, {\n    target: () => {\n      if (!target.active) {\n        const pos = entity.data.position.position;\n        manager.removeEntity(entity);\n        return pos;\n      }\n      return target.data.position.position;\n    },\n  });\n  manager.addComponent(entity, VelocityComponent);\n  manager.addComponent(entity, VelocityTargetComponent, {\n    target: () => {\n      if (!target.active) {\n        const pos = entity.data.position.position;\n        manager.removeEntity(entity);\n        return pos;\n      }\n      return target.data.position.position;\n    },\n    velocity: parent.data.weapon.projectileType.speed,\n  });\n  manager.addComponent(entity, SpriteComponent, {\n    source: tex,\n    rotationOffset: 90,\n  });\n  manager.addComponent(entity, DamageComponent, {\n    damage: parent.data.weapon.projectileType.damage,\n  });\n  if (parent.data.weapon.projectileType.splashRadius >= 0.01) {\n    manager.addComponent(entity, SplashDamageComponent, {\n      target: weapon.target,\n      radius: weapon.projectileType.splashRadius,\n    });\n  } else {\n    manager.addComponent(entity, DamageTargetComponent, {\n      target: weapon.target,\n    });\n  }\n  manager.addComponent(entity, LifetimeComponent, {\n    lifetime: (range.range / weapon.projectileType.speed) * 1.2,\n  });\n  return entity;\n}\n","import { LifetimeComponent } from \"../components/behavior/Lifetime\";\nimport LifetimeRenderComponent from \"../components/rendering/LifetimeRender\";\nimport { PositionComponent, PositionEntity } from \"../components/data/Position\";\nimport { RangeComponent } from \"../components/data/Range\";\nimport { RangeDisplayComponent } from \"../components/rendering/RangeDisplay\";\nimport { RotationComponent } from \"../components/data/Rotation\";\nimport SpriteComponent from \"../components/rendering/Sprite\";\nimport { VelocityComponent } from \"../components/data/Velocity\";\nimport { DynamicConstant, getDynamic } from \"../data/DynamicConstant\";\nimport Vector2 from \"../geometry/Vector2\";\nimport { random } from \"../Random\";\nimport { Texture } from \"../rendering/Texture\";\nimport { ECSManager } from \"../ecs/ECSManager\";\nimport { Entity } from \"../ecs/Entity\";\n\nexport function makeSmokeTrail(\n  parent: PositionEntity,\n  manager: ECSManager\n): Entity {\n  let baseVelocity = Vector2.ZERO;\n  if (\"rotation\" in parent.data) {\n    baseVelocity = Vector2.fromAngle(\n      getDynamic<number>(\n        parent.data.rotation.rotation as DynamicConstant<number>\n      )\n    );\n  }\n  if (\"velocity\" in parent.data) {\n    baseVelocity = getDynamic<Vector2>(\n      parent.data.velocity.velocity as DynamicConstant<Vector2>\n    );\n  }\n  const vel = baseVelocity\n    .scale(-1)\n    .rotate(random.gaussian() * 30)\n    .scale(1 + random.gaussian() / 2);\n  if (vel.equals(Vector2.ZERO)) return;\n\n  const entity = manager.createEntity();\n  manager.addComponent(entity, PositionComponent, {\n    position: parent.data.position.position,\n  });\n  manager.addComponent(entity, RotationComponent);\n  manager.addComponent(entity, VelocityComponent, {\n    velocity: vel,\n  });\n  manager.addComponent(entity, LifetimeComponent);\n  manager.addComponent(entity, SpriteComponent, {\n    size: Vector2.matching(0.25),\n    source: new Texture(\"assets/smoke.png\"),\n  });\n  manager.addComponent(entity, LifetimeRenderComponent);\n  return manager.getEntity(entity);\n}\n","import { LifetimeComponent } from \"../../core/components/behavior/Lifetime\";\nimport { VelocityTargetComponent } from \"../../core/components/behavior/PositionTarget\";\nimport { RotationTargetComponent } from \"../../core/components/behavior/RotationTarget\";\nimport SpawnerComponent from \"../../core/components/behavior/Spawner\";\nimport { PositionComponent } from \"../../core/components/data/Position\";\nimport { RotationComponent } from \"../../core/components/data/Rotation\";\nimport { VelocityComponent } from \"../../core/components/data/Velocity\";\nimport SpriteComponent from \"../../core/components/rendering/Sprite\";\nimport { getDynamic } from \"../../core/data/DynamicConstant\";\nimport { ECSManager } from \"../../core/ecs/ECSManager\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { makeSmokeTrail } from \"../../core/prefabs/SmokeParticle\";\nimport { Texture } from \"../../core/rendering/Texture\";\nimport DamageComponent from \"../components/Damage\";\nimport DamageTargetComponent from \"../components/DamageTarget\";\nimport SplashDamageComponent from \"../components/SplashDamage\";\nimport { WeaponEntity } from \"../components/Weapon\";\n\nconst tex = new Texture(\"assets/Missile.png\");\n\nexport function missile(parent: WeaponEntity, manager: ECSManager): Entity {\n  const id = manager.createEntity();\n  const entity = manager.getEntity(id);\n  const target = parent.data.weapon.target;\n  const { weapon, range } = parent.data;\n  let position = Vector2.ZERO;\n  position = position.add(\n    parent.data.weapon.barrelOffsets[parent.data.weapon.barrel]\n  );\n  position = position.rotate(getDynamic(parent.data.rotation.rotation));\n  position = position.add(getDynamic(parent.data.position.position));\n  manager.addComponent(entity, PositionComponent, {\n    position,\n  });\n  manager.addComponent(entity, RotationComponent, {\n    rotation: parent.data.rotation.rotation,\n  });\n  manager.addComponent(entity, RotationTargetComponent, {\n    target: () => {\n      if (!target.active) {\n        const pos = entity.data.position.position;\n        manager.removeEntity(entity);\n        return pos;\n      }\n      return target.data.position.position;\n    },\n  });\n  manager.addComponent(entity, VelocityComponent);\n  manager.addComponent(entity, VelocityTargetComponent, {\n    target: () => {\n      if (!target.active) {\n        const pos = entity.data.position.position;\n        manager.removeEntity(entity);\n        return pos;\n      }\n      return target.data.position.position;\n    },\n    velocity: parent.data.weapon.projectileType.speed,\n  });\n  manager.addComponent(entity, SpriteComponent, {\n    source: tex,\n    rotationOffset: 90,\n  });\n  manager.addComponent(entity, SpawnerComponent, {\n    producer: makeSmokeTrail,\n    count: 1,\n    rate: 0.1,\n  });\n  manager.addComponent(entity, DamageComponent, {\n    damage: parent.data.weapon.projectileType.damage,\n  });\n  if (parent.data.weapon.projectileType.splashRadius >= 0.01) {\n    manager.addComponent(entity, SplashDamageComponent, {\n      target: weapon.target,\n      radius: weapon.projectileType.splashRadius,\n    });\n  } else {\n    manager.addComponent(entity, DamageTargetComponent, {\n      target: weapon.target,\n    });\n  }\n  manager.addComponent(entity, LifetimeComponent, {\n    lifetime: (range.range / weapon.projectileType.speed) * 1.2,\n  });\n  return entity;\n}\n","import { LifetimeComponent } from \"../../core/components/behavior/Lifetime\";\nimport { VelocityTargetComponent } from \"../../core/components/behavior/PositionTarget\";\nimport { RotationTargetComponent } from \"../../core/components/behavior/RotationTarget\";\nimport SpawnerComponent from \"../../core/components/behavior/Spawner\";\nimport { PositionComponent } from \"../../core/components/data/Position\";\nimport { RotationComponent } from \"../../core/components/data/Rotation\";\nimport { VelocityComponent } from \"../../core/components/data/Velocity\";\nimport SpriteComponent from \"../../core/components/rendering/Sprite\";\nimport { getDynamic } from \"../../core/data/DynamicConstant\";\nimport { ECSManager } from \"../../core/ecs/ECSManager\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { makeSmokeTrail } from \"../../core/prefabs/SmokeParticle\";\nimport { Texture } from \"../../core/rendering/Texture\";\nimport DamageComponent from \"../components/Damage\";\nimport DamageTargetComponent from \"../components/DamageTarget\";\nimport SplashDamageComponent from \"../components/SplashDamage\";\nimport { WeaponEntity } from \"../components/Weapon\";\n\nconst tex = new Texture(\"assets/SwarmMissile.png\");\n\nexport function swarmMissile(\n  parent: WeaponEntity,\n  manager: ECSManager\n): Entity {\n  const id = manager.createEntity();\n  const entity = manager.getEntity(id);\n  const target = parent.data.weapon.target;\n  const { weapon, range } = parent.data;\n  let position = Vector2.ZERO;\n  position = position.add(\n    parent.data.weapon.barrelOffsets[parent.data.weapon.barrel]\n  );\n  position = position.rotate(getDynamic(parent.data.rotation.rotation));\n  position = position.add(getDynamic(parent.data.position.position));\n  manager.addComponent(entity, PositionComponent, {\n    position,\n  });\n  manager.addComponent(entity, RotationComponent, {\n    rotation: parent.data.rotation.rotation,\n  });\n  manager.addComponent(entity, RotationTargetComponent, {\n    target: () => {\n      if (!target.active) {\n        const pos = entity.data.position.position;\n        manager.removeEntity(entity);\n        return pos;\n      }\n      return target.data.position.position;\n    },\n  });\n  manager.addComponent(entity, VelocityComponent);\n  manager.addComponent(entity, VelocityTargetComponent, {\n    target: () => {\n      if (!target.active) {\n        const pos = entity.data.position.position;\n        manager.removeEntity(entity);\n        return pos;\n      }\n      return target.data.position.position;\n    },\n    velocity: parent.data.weapon.projectileType.speed,\n  });\n  manager.addComponent(entity, SpriteComponent, {\n    source: tex,\n    rotationOffset: 90,\n  });\n  manager.addComponent(entity, SpawnerComponent, {\n    producer: makeSmokeTrail,\n    count: 1,\n    rate: 0.1,\n  });\n  manager.addComponent(entity, DamageComponent, {\n    damage: parent.data.weapon.projectileType.damage,\n  });\n  if (parent.data.weapon.projectileType.splashRadius >= 0.01) {\n    manager.addComponent(entity, SplashDamageComponent, {\n      target: weapon.target,\n      radius: weapon.projectileType.splashRadius,\n    });\n  } else {\n    manager.addComponent(entity, DamageTargetComponent, {\n      target: weapon.target,\n    });\n  }\n  manager.addComponent(entity, LifetimeComponent, {\n    lifetime: (range.range / weapon.projectileType.speed) * 1.2,\n  });\n  return entity;\n}\n","import { AbstractClickComponent } from \"../../core/components/behavior/click/AbstractClick\";\nimport { ClickableComponent } from \"../../core/components/behavior/click/Clickable\";\nimport { RotationTargetComponent } from \"../../core/components/behavior/RotationTarget\";\nimport { FootprintComponent } from \"../../core/components/data/Footprint\";\nimport { NameComponent } from \"../../core/components/data/Name\";\nimport { PositionComponent } from \"../../core/components/data/Position\";\nimport { RangeComponent } from \"../../core/components/data/Range\";\nimport { RotationComponent } from \"../../core/components/data/Rotation\";\nimport { ValueComponent } from \"../../core/components/data/Value\";\nimport SellableComponent from \"../../core/components/marker/Sellable\";\nimport SpriteComponent from \"../../core/components/rendering/Sprite\";\nimport { DynamicConstant, getDynamic } from \"../../core/data/DynamicConstant\";\nimport { ECSManager } from \"../../core/ecs/ECSManager\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport TurretBaseComponent from \"../components/BaseComponent\";\nimport WeaponComponent from \"../components/Weapon\";\nimport { GameModel } from \"../GameModel\";\nimport { bullet } from \"../prefabs/Bullet\";\nimport { TowerType } from \"../types/TowerType\";\nimport { Texture } from \"../../core/rendering/Texture\";\nimport { EntityProducer } from \"../../core/ecs/EntityProducer\";\nimport { missile } from \"../prefabs/Rocket\";\nimport { RangeDisplayComponent } from \"../../core/components/rendering/RangeDisplay\";\nimport CreepComponent, { CreepEntity } from \"../components/Creep\";\nimport { swarmMissile } from \"../prefabs/SwarmMissile\";\nimport UpgradeComponent from \"../../core/components/behavior/Upgrade\";\nimport { cloneDeep } from \"lodash\";\n\nexport class TowerManager {\n  private towerTextures: Record<string, Texture> = {\n    \"tower-1-1\": new Texture(\"assets/turret-1-1.png\"),\n    \"tower-1-2\": new Texture(\"assets/turret-1-2.png\"),\n    \"tower-1-3\": new Texture(\"assets/turret-1-3.png\"),\n    \"tower-2-1\": new Texture(\"assets/turret-2-1.png\"),\n    \"tower-2-2\": new Texture(\"assets/turret-2-2.png\"),\n    \"tower-2-3\": new Texture(\"assets/turret-2-3.png\"),\n    \"tower-3-1\": new Texture(\"assets/turret-3-1.png\"),\n    \"tower-3-2\": new Texture(\"assets/turret-3-2.png\"),\n    \"tower-3-3\": new Texture(\"assets/turret-3-3.png\"),\n    \"tower-4-1\": new Texture(\"assets/turret-4-1.png\"),\n    \"tower-4-2\": new Texture(\"assets/turret-4-2.png\"),\n    \"tower-4-3\": new Texture(\"assets/turret-4-3.png\"),\n  };\n  private towers: Map<string, TowerType> = new Map();\n  private upgrades: Map<string, any> = new Map();\n\n  private projectileSpawners: Record<string, EntityProducer> = {\n    bullet,\n    missile,\n    swarmMissile,\n  };\n\n  private baseSprite = new Texture(\"assets/turret-base.gif\");\n\n  constructor(private model: GameModel, private ecs: ECSManager) {}\n\n  public add(name: string, towerType: TowerType): void {\n    this.towers.set(name, towerType);\n    this.upgrades.set(name, this.combineUpgrades(towerType));\n  }\n\n  public getTower(name: string): TowerType {\n    return this.towers.get(name);\n  }\n\n  public createDemoTower(\n    position: DynamicConstant<Vector2>,\n    towerName: string\n  ): number {\n    const tower = this.towers.get(towerName);\n    const id = this.ecs.createEntity();\n    this.ecs.addComponent(id, PositionComponent, {\n      position: () =>\n        this.model\n          .getMousePosition()\n          .ceil()\n          .addConstant((1 - tower.size) / 2, (1 - tower.size) / 2),\n    });\n    this.ecs.addComponent(id, RangeComponent, {\n      range: tower.range,\n    });\n    this.ecs.addComponent(id, RotationComponent);\n    const offset = tower.size % 2 === 0 ? Vector2.matching(-0.5) : Vector2.ZERO;\n    this.ecs.addComponent(id, RangeDisplayComponent, {\n      // strokeStyle: \"#ffff\"\n      offset: offset.addConstant(0.5, 0.5),\n    });\n    this.ecs.addComponent(id, SpriteComponent, {\n      source: this.towerTextures[tower.levelSprites[0]],\n      size: Vector2.matching(tower.size),\n    });\n    this.ecs.addComponent(id, ValueComponent, {\n      value: tower.cost,\n    });\n    this.ecs.addComponent(id, WeaponComponent, {\n      projectile: bullet,\n      rate: tower.fireRate,\n      damage: tower.projectile.damage,\n      tags: tower.tags,\n      elapsed: -1,\n    });\n    return id;\n  }\n\n  public createTower(position: Vector2, towerName: string): number {\n    const tower = this.towers.get(towerName);\n    const id = this.ecs.createEntity();\n    const entity = this.ecs.getEntity(id);\n    this.ecs.addComponent(entity, PositionComponent, {\n      position,\n    });\n    this.ecs.addComponent(id, PositionComponent, {\n      position: getDynamic(position)\n        .ceil()\n        .addConstant((1 - tower.size) / 2, (1 - tower.size) / 2),\n    });\n    this.ecs.addComponent(id, RangeComponent, {\n      range: tower.range,\n    });\n    this.ecs.addComponent(id, RotationComponent);\n    this.ecs.addComponent(id, RotationTargetComponent, {\n      turnRate: tower.rotationRate,\n      strictness: 1,\n    });\n    this.ecs.addComponent(id, NameComponent, {\n      name: tower.name,\n    });\n\n    this.ecs.addComponent(id, ClickableComponent, {\n      delta: Vector2.matching(tower.size / 2),\n      offset: Vector2.matching(-0.5),\n    });\n    this.ecs.addComponent(id, AbstractClickComponent, {\n      action: () => {\n        this.model.setSelection(id);\n      },\n    });\n    this.ecs.addComponent(id, SpriteComponent, {\n      source: this.towerTextures[tower.levelSprites[0]],\n      size: Vector2.matching(tower.size),\n      rotationOffset: 90,\n    });\n    this.ecs.addComponent(id, FootprintComponent, {\n      source: this.towerTextures[tower.levelSprites[0]],\n      size: tower.size,\n    });\n    this.ecs.addComponent(id, TurretBaseComponent, {\n      source: this.baseSprite,\n    });\n    this.ecs.addComponent(id, WeaponComponent, {\n      projectile: this.projectileSpawners[tower.projectileSpawner],\n      rate: tower.fireRate,\n      damage: tower.projectile.damage,\n      barrels: tower.barrels || [Vector2.ZERO],\n      tags: tower.tags,\n      projectileType: { ...tower.projectile },\n    });\n    this.ecs.addComponent(id, SellableComponent);\n    this.ecs.addComponent(id, ValueComponent, {\n      value: Math.floor(tower.cost * 0.8),\n    });\n    this.ecs.addComponent(id, UpgradeComponent, {\n      ...cloneDeep(this.upgrades.get(towerName)),\n    });\n    return id;\n  }\n  combineUpgrades(tower: TowerType): any {\n    const upgrades = tower.upgrades.slice();\n    const baseData: any = {};\n    let dataLayer = baseData;\n    for (const upgrade of upgrades) {\n      Object.assign(dataLayer, upgrade);\n      dataLayer.dataDelta = { ...dataLayer.dataDelta };\n      dataLayer.dataDelta.upgrade = { ...dataLayer.dataDelta.upgrade };\n      dataLayer = dataLayer.dataDelta.upgrade;\n    }\n    dataLayer.cost = 0;\n    return baseData;\n  }\n\n  public canPlace(\n    position: Vector2,\n    towerName: string,\n    dryRun = false\n  ): boolean {\n    const tower = this.towers.get(towerName);\n    if (tower === null || tower === undefined) {\n      return false;\n    }\n\n    if (this.model.money < tower.cost) {\n      return false;\n    }\n\n    if (position.x < 11 || position.x + tower.size > 40) {\n      return false;\n    }\n\n    if (position.y < 1 || position.y + tower.size > 30) {\n      return false;\n    }\n\n    // Check for collisions with other towers.\n    const { collides, blocked } = this.checkCollision(position.floor(), tower);\n    if (collides) {\n      return false;\n    }\n\n    // Find and check paths\n    const eastWestPath = this.model.getPath().findEastWest(blocked);\n    if (eastWestPath.length == 0) {\n      return false;\n    }\n\n    const northSouthPath = this.model.getPath().findNorthSouth(blocked);\n    if (northSouthPath.length == 0) {\n      return false;\n    }\n\n    // Update model\n    if (!dryRun) {\n      this.model.setEastWestPath(eastWestPath);\n      this.model.setNorthSouthPath(northSouthPath);\n      this.ecs\n        .getEntitiesWithComponent(CreepComponent)\n        .forEach((it: CreepEntity) => {\n          if (it !== undefined) {\n            it.data.pathFollower.invalidated = true;\n          }\n        });\n    }\n    return true;\n  }\n\n  private checkCollision(position: Vector2, tower: TowerType) {\n    const nwOffset = Math.floor((tower.size - 1) / 2);\n    const northWest = new Vector2(position.x - nwOffset, position.y - nwOffset);\n    const swOffset = Math.floor(tower.size / 2);\n    const southEast = new Vector2(position.x + swOffset, position.y + swOffset);\n    const blocked = new Set<Vector2>();\n    for (let x = northWest.x; x <= southEast.x; x++) {\n      for (let y = northWest.y; y <= southEast.y; y++) {\n        const checkVector = new Vector2(x, y);\n        if (this.model.getMap().hasEntityAt(checkVector)) {\n          blocked.clear();\n          return { collides: true, blocked };\n        }\n        blocked.add(new Vector2(x, y));\n      }\n    }\n    return { collides: false, blocked };\n  }\n}\n","import Vector2 from \"./Vector2\";\n\nexport class Direction {\n  static readonly NORTH = new Direction(new Vector2(0, -1));\n  static readonly NORTHEAST = new Direction(new Vector2(1, -1));\n  static readonly EAST = new Direction(new Vector2(1, 0));\n  static readonly SOUTHEAST = new Direction(new Vector2(1, 1));\n  static readonly SOUTH = new Direction(new Vector2(0, 1));\n  static readonly SOUTHWEST = new Direction(new Vector2(-1, 1));\n  static readonly WEST = new Direction(new Vector2(-1, 0));\n  static readonly NORTHWEST = new Direction(new Vector2(-1, -1));\n\n  public readonly offset: Vector2;\n  private constructor(offset: Vector2) {\n    this.offset = offset;\n  }\n\n  private static all: Set<Direction> = undefined;\n  private static cardinal: Set<Direction> = undefined;\n\n  public static getAllCardinal(): Set<Direction> {\n    if (this.cardinal === undefined) {\n      this.cardinal = new Set();\n      this.cardinal.add(this.NORTH);\n      this.cardinal.add(this.EAST);\n      this.cardinal.add(this.SOUTH);\n      this.cardinal.add(this.WEST);\n    }\n    return this.cardinal;\n  }\n\n  public static getAllDirections(): Set<Direction> {\n    if (this.all === undefined) {\n      this.all = new Set();\n      this.all.add(this.NORTH);\n      this.all.add(this.NORTHEAST);\n      this.all.add(this.EAST);\n      this.all.add(this.SOUTHEAST);\n      this.all.add(this.SOUTH);\n      this.all.add(this.SOUTHWEST);\n      this.all.add(this.WEST);\n      this.all.add(this.NORTHWEST);\n    }\n    return this.all;\n  }\n}\n","import Vector2 from \"../geometry/Vector2\";\nimport { Direction } from \"../geometry/Direction\";\nimport { Pathable } from \"./Pathable\";\n\nclass PathNode {\n  public readonly parent: PathNode;\n  public readonly position: Vector2;\n\n  constructor(parent: PathNode, position: Vector2) {\n    this.parent = parent;\n    this.position = position;\n  }\n}\n\nexport class Pathfinder {\n  // TODO: Replace me with A*.\n  static findPath(\n    pathable: Pathable,\n    startingPosition: Vector2,\n    endingPositions: Set<Vector2>,\n    allowedDirections = Direction.getAllCardinal(),\n    nwBound?: Vector2,\n    seBound?: Vector2,\n    blocked?: Set<Vector2>,\n    compress = true\n  ): Array<Vector2> {\n    const queue = [new PathNode(null, startingPosition)];\n    const newEndingPositions = new Set<string>();\n    const newBlocked = new Set<string>();\n    if (blocked) {\n      blocked.forEach((it) => newBlocked.add(it.toString()));\n    }\n    endingPositions.forEach((it) => newEndingPositions.add(it.toString()));\n    let visited: Set<string> = new Set<string>();\n    visited = visited.add(startingPosition.toString());\n    while (queue.length > 0) {\n      const node = queue.splice(0, 1)[0];\n      const { position } = node;\n      for (const dir of allowedDirections) {\n        const child = position.add(dir.offset);\n        if (child === undefined) {\n          console.error(\"Something went wrong:\");\n          console.error(JSON.stringify(node));\n          console.error(JSON.stringify(dir));\n          console.error(queue);\n          continue;\n        }\n\n        if (visited.has(child.toString())) {\n          continue;\n        }\n        visited.add(child.toString());\n\n        if ((nwBound && child.x < nwBound.x) || child.y < nwBound.y) {\n          continue;\n        }\n\n        if ((seBound && child.x > seBound.x) || child.y > seBound.y) {\n          continue;\n        }\n\n        if (pathable.isBlocked(child) || newBlocked.has(child.toString())) {\n          continue;\n        }\n\n        const path = new PathNode(node, child);\n        if (newEndingPositions.has(child.toString())) {\n          return Pathfinder.fromPath(path, compress);\n        }\n        visited = visited.add(child.toString());\n        queue.push(path);\n      }\n    }\n    return [];\n  }\n\n  private static fromPath(path: PathNode, compress: boolean): Array<Vector2> {\n    let current = path;\n    let res: Array<Vector2> = [];\n    while (current != null) {\n      res = [current.position, ...res];\n      current = current.parent;\n    }\n    if (compress) {\n      const newSolution = [res[0]];\n      for (let i = 1; i < res.length - 1; i++) {\n        const prev = newSolution[newSolution.length - 1];\n        const curr = res[i];\n        const next = res[i + 1];\n        const prevDelta = curr.subtract(prev).normalize();\n        const newDelta = next.subtract(curr).normalize();\n        // Same direction?\n        if (!prevDelta.equals(newDelta)) {\n          newSolution.push(curr);\n          i++;\n        }\n      }\n      newSolution.push(res[res.length - 1]);\n      return newSolution;\n    }\n    return res;\n  }\n}\n","import { Pathfinder } from \"../core/data/Pathfinder\";\nimport { Direction } from \"../core/geometry/Direction\";\nimport Vector2 from \"../core/geometry/Vector2\";\nimport { GameModel } from \"./GameModel\";\n\nexport class PathChecker {\n  private southEnd = new Set<Vector2>();\n  private eastEnd = new Set<Vector2>();\n\n  constructor(private model: GameModel) {\n    this.southEnd.add(new Vector2(19, 30));\n    this.southEnd.add(new Vector2(20, 30));\n    this.southEnd.add(new Vector2(21, 30));\n    this.southEnd.add(new Vector2(22, 30));\n    this.southEnd.add(new Vector2(23, 30));\n    this.eastEnd.add(new Vector2(39, 13));\n    this.eastEnd.add(new Vector2(39, 14));\n    this.eastEnd.add(new Vector2(39, 15));\n    this.eastEnd.add(new Vector2(39, 16));\n    this.eastEnd.add(new Vector2(39, 17));\n  }\n\n  findEastWest(blocked: Set<Vector2>, compress = false): Array<Vector2> {\n    const eastWestPath = Pathfinder.findPath(\n      this.model.getMap(),\n      new Vector2(10, 15),\n      this.eastEnd,\n      Direction.getAllCardinal(),\n      new Vector2(10, 0),\n      this.model.getVirtualSize(),\n      blocked,\n      compress\n    );\n    return eastWestPath;\n  }\n\n  findNorthSouth(blocked: Set<Vector2>, compress = false): Array<Vector2> {\n    const northSouthPath = Pathfinder.findPath(\n      this.model.getMap(),\n      new Vector2(25, 0),\n      this.southEnd,\n      Direction.getAllCardinal(),\n      new Vector2(10, 0),\n      this.model.getVirtualSize(),\n      blocked,\n      compress\n    );\n    return northSouthPath;\n  }\n}\n","import { AbstractClickComponent } from \"../../core/components/behavior/click/AbstractClick\";\nimport { ClickableComponent } from \"../../core/components/behavior/click/Clickable\";\nimport { PathFollowerComponent } from \"../../core/components/behavior/PathFollower\";\nimport { VelocityTargetComponent } from \"../../core/components/behavior/PositionTarget\";\nimport { RotationTargetComponent } from \"../../core/components/behavior/RotationTarget\";\nimport { SpawnerEntity } from \"../../core/components/behavior/Spawner\";\nimport { HealthComponent } from \"../../core/components/data/Health\";\nimport { NameComponent } from \"../../core/components/data/Name\";\nimport { PositionComponent } from \"../../core/components/data/Position\";\nimport { RotationComponent } from \"../../core/components/data/Rotation\";\nimport { VelocityComponent } from \"../../core/components/data/Velocity\";\nimport HealthDisplayComponent from \"../../core/components/marker/HealthDisplay\";\nimport AnimatedSpriteComponent from \"../../core/components/rendering/AnimatedSprite\";\nimport { DynamicConstant, getDynamic } from \"../../core/data/DynamicConstant\";\nimport { ECSManager } from \"../../core/ecs/ECSManager\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport { EntityProducer } from \"../../core/ecs/EntityProducer\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { Texture } from \"../../core/rendering/Texture\";\nimport CreepComponent from \"../components/Creep\";\nimport { GameModel } from \"../GameModel\";\n\nexport function makeFastCreepProducer(\n  path: DynamicConstant<Array<Vector2>>,\n  model: GameModel,\n  statModifier: DynamicConstant<number>\n): EntityProducer {\n  return function (parent: SpawnerEntity, ecs: ECSManager): void {\n    const position = getDynamic(parent.data.position.position);\n    const entityID = ecs.createEntity();\n    const modifier = getDynamic(statModifier);\n    ecs.addComponent(entityID, PositionComponent, {\n      position,\n    });\n    ecs.addComponent(entityID, VelocityComponent, {\n      velocity: new Vector2(0, 0),\n    });\n    ecs.addComponent(entityID, RotationComponent);\n    ecs.addComponent(entityID, VelocityTargetComponent, {\n      velocity: 5 + 1.2 * modifier,\n    });\n    ecs.addComponent(entityID, RotationTargetComponent, {\n      turnRate: 720,\n    });\n    ecs.addComponent(entityID, PathFollowerComponent, {\n      path: path,\n    });\n    ecs.addComponent(entityID, ClickableComponent, {\n      delta: Vector2.matching(0.5),\n      offset: Vector2.matching(-0.5),\n    });\n    ecs.addComponent(entityID, AbstractClickComponent, {\n      action: (entity: Entity) => model.setSelection(entity.id),\n    });\n    ecs.addComponent(entityID, AnimatedSpriteComponent, {\n      source: new Texture(\"assets/Fast.png\"),\n      frames: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1],\n      size: Vector2.matching(2),\n      frameSize: new Vector2(64, 64),\n    });\n    ecs.addComponent(entityID, HealthComponent, {\n      health: Math.floor(8 * modifier),\n      maxHealth: Math.floor(8 * modifier),\n    });\n    ecs.addComponent(entityID, HealthDisplayComponent);\n    ecs.addComponent(entityID, CreepComponent, {\n      tags: [\"ground\"],\n    });\n    ecs.addComponent(entityID, NameComponent, {\n      name: \"Normal Creep\",\n    });\n  };\n}\n","import { AbstractClickComponent } from \"../../core/components/behavior/click/AbstractClick\";\nimport { ClickableComponent } from \"../../core/components/behavior/click/Clickable\";\nimport { PathFollowerComponent } from \"../../core/components/behavior/PathFollower\";\nimport { VelocityTargetComponent } from \"../../core/components/behavior/PositionTarget\";\nimport { RotationTargetComponent } from \"../../core/components/behavior/RotationTarget\";\nimport { SpawnerEntity } from \"../../core/components/behavior/Spawner\";\nimport { HealthComponent } from \"../../core/components/data/Health\";\nimport { NameComponent } from \"../../core/components/data/Name\";\nimport { PositionComponent } from \"../../core/components/data/Position\";\nimport { RotationComponent } from \"../../core/components/data/Rotation\";\nimport { VelocityComponent } from \"../../core/components/data/Velocity\";\nimport HealthDisplayComponent from \"../../core/components/marker/HealthDisplay\";\nimport AnimatedSpriteComponent from \"../../core/components/rendering/AnimatedSprite\";\nimport { DynamicConstant, getDynamic } from \"../../core/data/DynamicConstant\";\nimport { ECSManager } from \"../../core/ecs/ECSManager\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport { EntityProducer } from \"../../core/ecs/EntityProducer\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { Texture } from \"../../core/rendering/Texture\";\nimport CreepComponent from \"../components/Creep\";\nimport { GameModel } from \"../GameModel\";\n\nexport function makeFlyingCreepProducer(\n  path: DynamicConstant<Array<Vector2>>,\n  model: GameModel,\n  statModifier: DynamicConstant<number>\n): EntityProducer {\n  return function (parent: SpawnerEntity, ecs: ECSManager): void {\n    const position = getDynamic(parent.data.position.position);\n    const entityID = ecs.createEntity();\n    const modifier = getDynamic(statModifier);\n    ecs.addComponent(entityID, PositionComponent, {\n      position,\n    });\n    ecs.addComponent(entityID, VelocityComponent, {\n      velocity: new Vector2(0, 0),\n    });\n    ecs.addComponent(entityID, RotationComponent);\n    ecs.addComponent(entityID, VelocityTargetComponent, {\n      velocity: 4 + 0.8 * modifier,\n    });\n    ecs.addComponent(entityID, RotationTargetComponent);\n    ecs.addComponent(entityID, PathFollowerComponent, {\n      path: path,\n    });\n    ecs.addComponent(entityID, ClickableComponent, {\n      delta: Vector2.matching(0.5),\n      offset: Vector2.matching(-0.5),\n    });\n    ecs.addComponent(entityID, AbstractClickComponent, {\n      action: (entity: Entity) => model.setSelection(entity.id),\n    });\n    ecs.addComponent(entityID, AnimatedSpriteComponent, {\n      source: new Texture(\"assets/Flying.png\"),\n      frames: [0.1, 0.1, 0.1],\n      size: Vector2.matching(3.0),\n      frameSize: new Vector2(64, 64),\n    });\n    ecs.addComponent(entityID, HealthComponent, {\n      health: Math.floor(10 * (0.8 * modifier)),\n      maxHealth: Math.floor(10 * (0.8 * modifier)),\n    });\n    ecs.addComponent(entityID, HealthDisplayComponent);\n    ecs.addComponent(entityID, CreepComponent, {\n      tags: [\"air\"],\n    });\n    ecs.addComponent(entityID, NameComponent, {\n      name: \"Flying Creep\",\n    });\n  };\n}\n","import { AbstractClickComponent } from \"../../core/components/behavior/click/AbstractClick\";\nimport { ClickableComponent } from \"../../core/components/behavior/click/Clickable\";\nimport { PathFollowerComponent } from \"../../core/components/behavior/PathFollower\";\nimport { VelocityTargetComponent } from \"../../core/components/behavior/PositionTarget\";\nimport { RotationTargetComponent } from \"../../core/components/behavior/RotationTarget\";\nimport { SpawnerEntity } from \"../../core/components/behavior/Spawner\";\nimport { HealthComponent } from \"../../core/components/data/Health\";\nimport { NameComponent } from \"../../core/components/data/Name\";\nimport { PositionComponent } from \"../../core/components/data/Position\";\nimport { RotationComponent } from \"../../core/components/data/Rotation\";\nimport { VelocityComponent } from \"../../core/components/data/Velocity\";\nimport HealthDisplayComponent from \"../../core/components/marker/HealthDisplay\";\nimport AnimatedSpriteComponent from \"../../core/components/rendering/AnimatedSprite\";\nimport { DynamicConstant, getDynamic } from \"../../core/data/DynamicConstant\";\nimport { ECSManager } from \"../../core/ecs/ECSManager\";\nimport { Entity } from \"../../core/ecs/Entity\";\nimport { EntityProducer } from \"../../core/ecs/EntityProducer\";\nimport Vector2 from \"../../core/geometry/Vector2\";\nimport { Texture } from \"../../core/rendering/Texture\";\nimport CreepComponent from \"../components/Creep\";\nimport { GameModel } from \"../GameModel\";\n\nexport function makeNormalCreepProducer(\n  path: DynamicConstant<Array<Vector2>>,\n  model: GameModel,\n  statModifier: DynamicConstant<number>\n): EntityProducer {\n  return function (parent: SpawnerEntity, ecs: ECSManager): void {\n    const position = getDynamic(parent.data.position.position);\n    const entityID = ecs.createEntity();\n    const modifier = getDynamic(statModifier);\n    ecs.addComponent(entityID, PositionComponent, {\n      position,\n    });\n    ecs.addComponent(entityID, VelocityComponent, {\n      velocity: new Vector2(0, 0),\n    });\n    ecs.addComponent(entityID, RotationComponent);\n    ecs.addComponent(entityID, VelocityTargetComponent, {\n      velocity: 3 + modifier,\n    });\n    ecs.addComponent(entityID, RotationTargetComponent, {\n      turnRate: 360,\n    });\n    ecs.addComponent(entityID, PathFollowerComponent, {\n      path: path,\n    });\n    ecs.addComponent(entityID, ClickableComponent, {\n      delta: Vector2.matching(0.5),\n      offset: Vector2.matching(-0.5),\n    });\n    ecs.addComponent(entityID, AbstractClickComponent, {\n      action: (entity: Entity) => model.setSelection(entity.id),\n    });\n    ecs.addComponent(entityID, AnimatedSpriteComponent, {\n      source: new Texture(\"assets/Normal.png\"),\n      frames: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1],\n      size: Vector2.matching(2),\n      frameSize: Vector2.matching(64),\n    });\n    ecs.addComponent(entityID, HealthComponent, {\n      health: Math.floor(10 * modifier),\n      maxHealth: Math.floor(10 * modifier),\n    });\n    ecs.addComponent(entityID, HealthDisplayComponent);\n    ecs.addComponent(entityID, CreepComponent, {\n      tags: [\"ground\"],\n    });\n    ecs.addComponent(entityID, NameComponent, {\n      name: \"Normal Creep\",\n    });\n  };\n}\n","import Vector2 from \"../../core/geometry/Vector2\";\nimport { GameModel } from \"../GameModel\";\nimport { Wave } from \"./Wave\";\nimport { makeFastCreepProducer } from \"./Fast\";\nimport { makeFlyingCreepProducer } from \"./Flying\";\nimport { makeNormalCreepProducer } from \"./Normal\";\n\nexport class CreepManager {\n  private northNormalCreepGenerator;\n  private eastNormalCreepGenerator;\n  private northNormalPlusCreepGenerator;\n  private eastNormalPlusCreepGenerator;\n  private northFastCreepGenerator;\n  private eastFastCreepGenerator;\n  private northFlyingCreepGenerator;\n  private eastFlyingCreepGenerator;\n  private statModifier = 1;\n  private wave = 0;\n  public getStatModifier: () => number;\n\n  constructor(private model: GameModel) {\n    this.getStatModifier = this._getStatModifier.bind(this);\n    this.northNormalCreepGenerator = makeNormalCreepProducer(\n      model.getNorthSouthPath,\n      model,\n      this.getStatModifier\n    );\n    this.eastNormalCreepGenerator = makeNormalCreepProducer(\n      model.getEastWestPath,\n      model,\n      this.getStatModifier\n    );\n    this.eastNormalPlusCreepGenerator = makeNormalCreepProducer(\n      model.getEastWestPath,\n      model,\n      () => this.getStatModifier() * 1.5\n    );\n    this.northNormalPlusCreepGenerator = makeNormalCreepProducer(\n      model.getNorthSouthPath,\n      model,\n      () => this.getStatModifier() * 1.5\n    );\n    this.northFastCreepGenerator = makeFastCreepProducer(\n      model.getNorthSouthPath,\n      model,\n      this.getStatModifier\n    );\n    this.eastFastCreepGenerator = makeFastCreepProducer(\n      model.getEastWestPath,\n      model,\n      this.getStatModifier\n    );\n    this.northFlyingCreepGenerator = makeFlyingCreepProducer(\n      [new Vector2(25, 0), new Vector2(25, 30)],\n      model,\n      this.getStatModifier\n    );\n    this.eastFlyingCreepGenerator = makeFlyingCreepProducer(\n      [new Vector2(10, 15), new Vector2(40, 15)],\n      model,\n      this.getStatModifier\n    );\n  }\n\n  public nextWave(): void {\n    this.wave++;\n    this.statModifier = 1 + 0.1 * this.wave;\n  }\n\n  public getNorthWave(): Wave {\n    const waveType = this.wave % 5;\n    const count = 20 + 10 * Math.floor(this.wave / 10);\n    if (this.isNorthWave()) {\n      switch (waveType) {\n        case 0:\n        case 1:\n          return { count, entity: this.northNormalCreepGenerator };\n        case 2:\n          return { count, entity: this.northFastCreepGenerator };\n        case 3:\n          return { count, entity: this.northNormalPlusCreepGenerator };\n        case 4:\n          return { count, entity: this.northFlyingCreepGenerator };\n      }\n    }\n    return { count: 0, entity: this.northNormalCreepGenerator };\n  }\n\n  public getEastWave(): Wave {\n    const waveType = this.wave % 5;\n    const count = 20 + 10 * Math.floor(this.wave / 10);\n    if (this.isEastWave()) {\n      switch (waveType) {\n        case 0:\n        case 1:\n          return { count, entity: this.eastNormalCreepGenerator };\n        case 2:\n          return { count, entity: this.eastFastCreepGenerator };\n        case 3:\n          return { count, entity: this.eastNormalPlusCreepGenerator };\n        case 4:\n          return { count, entity: this.eastFlyingCreepGenerator };\n      }\n    }\n    return { count: 0, entity: this.eastNormalCreepGenerator };\n  }\n\n  private isNorthWave(): boolean {\n    return this.wave % 3 !== 0;\n  }\n\n  private isEastWave(): boolean {\n    return this.wave % 3 !== 1;\n  }\n\n  private _getStatModifier(): number {\n    return this.statModifier;\n  }\n\n  public nextNorth(): boolean {\n    return (this.wave + 1) % 3 !== 0;\n  }\n\n  public nextEast(): boolean {\n    return (this.wave + 1) % 3 !== 1;\n  }\n}\n","export class SoundEffect {\n  private el: HTMLAudioElement;\n  private ready = false;\n  private continue = false;\n  private loop = false;\n  private start = 0;\n  private end = 0;\n  private _playing = false;\n  private cutoff = 0;\n  private currentCutoffTimeout: ReturnType<typeof setTimeout>;\n  private currentLoopTimeout: ReturnType<typeof setTimeout>;\n  private currentDurationTimeout: ReturnType<typeof setTimeout>;\n  constructor(\n    source: string,\n    cutoff?: number,\n    loop = false,\n    start = 0,\n    onLoad = (duration: number) => {\n      return;\n    }\n  ) {\n    this.el = new Audio(source);\n    this.el.addEventListener(\n      \"load\",\n      (() => {\n        this.ready = true;\n        this.end = Math.min(cutoff, this.el.duration);\n        onLoad(this.getDuration());\n      }).bind(this)\n    );\n    if (cutoff) {\n      this.cutoff = cutoff;\n    }\n    this.start = start;\n    this.loop = loop;\n  }\n\n  public getDuration(): number {\n    return this.end - this.start;\n  }\n\n  play(): void {\n    this.el.play();\n    this.continue = true;\n    this.el.currentTime = this.start;\n    this._playing = true;\n    if (this.loop) {\n      this.currentLoopTimeout = setTimeout(() => {\n        if (!this.continue) return;\n        this.el.currentTime = this.start;\n        this.playRec();\n      }, this.cutoff * 1000);\n    } else if (this.cutoff > 0) {\n      clearTimeout(this.currentCutoffTimeout);\n      this.currentCutoffTimeout = setTimeout(() => {\n        this.stop();\n      }, this.cutoff * 1000);\n    } else {\n      clearTimeout(this.currentDurationTimeout);\n      this.currentDurationTimeout = setTimeout(\n        () => (this._playing = false),\n        this.el.duration * 1000\n      );\n    }\n  }\n\n  playRec(): void {\n    this.currentLoopTimeout = setTimeout(() => {\n      if (!this.continue) return;\n      this.el.currentTime = 0;\n      this.playRec();\n    }, this.cutoff * 1000);\n  }\n\n  stop(): void {\n    this.el.pause();\n    this.continue = false;\n    this._playing = false;\n    this.el.currentTime = 0;\n  }\n\n  public get playing(): boolean {\n    return this._playing;\n  }\n}\n","import { globalState } from \"..\";\n\nexport function isAudioEnabled(): boolean {\n  return globalState.getData().audio;\n}\n","import { SoundEffect } from \"./SoundEffect\";\n\nexport class SoundEffectPool {\n  private pool: SoundEffect[];\n  private ids: number[];\n  private duration: number;\n  constructor(poolSize: number, effect: string, start = 0, end = 0) {\n    const baseEffect = new SoundEffect(\n      effect,\n      end,\n      false,\n      start,\n      (duration) => {\n        this.duration = duration;\n      }\n    );\n    this.pool = [baseEffect];\n    this.ids = [];\n    for (let i = 1; i < poolSize; i++) {\n      this.pool.push(new SoundEffect(effect, end, false, start));\n      this.ids.push(i);\n    }\n  }\n\n  public play() {\n    const nextId = this.ids.splice(1, 1)[0];\n    if (nextId === undefined) {\n      return; // No available elements to play\n    }\n    this.pool[nextId].play();\n    setTimeout(() => {\n      this.ids.push(nextId);\n    }, this.duration);\n  }\n}\n","import {\n  PositionComponent,\n  PositionData,\n} from \"../core/components/data/Position\";\nimport { RotationComponent } from \"../core/components/data/Rotation\";\nimport { ActionMap, ImmutableActionMap } from \"../core/data/ActionMap\";\nimport { BaseGameModel } from \"../core/data/BaseGameModel\";\nimport Vector2 from \"../core/geometry/Vector2\";\nimport { ParticleManager } from \"../core/rendering/ParticleManager\";\nimport { Texture } from \"../core/rendering/Texture\";\nimport { WaveManifest } from \"./types/WaveManifest\";\nimport { PersistenceManager } from \"../core/data/Persistence\";\nimport { PersistedData } from \"./PersistedData\";\nimport { FootprintComponent } from \"../core/components/data/Footprint\";\nimport SpriteComponent, {\n  SpriteEntity,\n} from \"../core/components/rendering/Sprite\";\nimport { LifetimeComponent } from \"../core/components/behavior/Lifetime\";\nimport { Entity } from \"../core/ecs/Entity\";\nimport { DynamicConstant, getDynamic } from \"../core/data/DynamicConstant\";\nimport SellableComponent from \"../core/components/marker/Sellable\";\nimport { ValueEntity } from \"../core/components/data/Value\";\nimport { TurretBaseRenderSystem } from \"./systems/BaseRenderSystem\";\nimport { WeaponSystem } from \"./systems/WeaponSystem\";\nimport { MouseInteraction } from \"../core/input/MouseInput\";\nimport { DamageTargetSystem } from \"./systems/DamageTargetSystem\";\nimport { SplashDamageSystem } from \"./systems/SplashDamageSystem\";\nimport { MinigunTower } from \"./towers/MinigunTower\";\nimport { MissileTower } from \"./towers/MissileTower\";\nimport { SwarmerTower } from \"./towers/SwarmerTower\";\nimport { SniperTower } from \"./towers/SniperTower\";\nimport { createUI } from \"./GameUI\";\nimport UpgradeComponent, {\n  UpgradeEntity,\n} from \"../core/components/behavior/Upgrade\";\nimport { merge } from \"lodash\";\nimport SpawnerComponent, {\n  SpawnerEntity,\n} from \"../core/components/behavior/Spawner\";\nimport { makeBlood } from \"./particles/Blood\";\nimport { TowerManager } from \"./towers/TowerManager\";\nimport { GameMap } from \"../core/data/GameMap\";\nimport { PathChecker } from \"./PathChecker\";\nimport LowSpriteComponent from \"../core/components/rendering/LowSprite\";\nimport { CreepManager } from \"./creeps/CreepManager\";\nimport { globalState } from \"..\";\nimport { VelocityComponent } from \"../core/components/data/Velocity\";\nimport TextRenderComponent from \"../core/components/ui/TextRender\";\nimport { SoundEffect } from \"../core/SoundEffect\";\nimport { isAudioEnabled } from \"./GlobalUtil\";\nimport { SoundEffectPool } from \"../core/SoundEffectPool\";\n\nexport class GameModel extends BaseGameModel {\n  private particleManager: ParticleManager<GameModel>;\n  private unstructured: Map<string, unknown>;\n  public lives = 20;\n  public money = 30;\n  public wave: number;\n  public waveSet: Array<WaveManifest>;\n  public persistence: PersistenceManager<GameModel, PersistedData>;\n  private _actionMap: ActionMap;\n  private eastWestPath: Array<Vector2> = [];\n  private northSouthPath: Array<Vector2>;\n  private actionQueue: Array<string>;\n  private mouseEntity: Entity = null;\n  private towerManager: TowerManager;\n  private pathChecker: PathChecker;\n  private floorTile: Texture = new Texture(\"assets/FloorTile.png\");\n  private creepManager: CreepManager;\n  activeTower: string = null;\n  private northSpawnerID = -1;\n  private eastSpawnerID = -1;\n  public score = 0;\n  private arrow = new Texture(\"assets/Arrow.png\");\n  public getEastWestPath: () => Vector2[];\n  public getNorthSouthPath: () => Vector2[];\n  private first = true;\n  private audioLoop = new SoundEffect(\"assets/loop.mp3\", 147, true);\n  private turretFireSound = new SoundEffectPool(10, \"assets/gun.mp3\", 0.6, 2);\n  private sellSound = new SoundEffectPool(5, \"assets/sell.mp3\", 0, 3);\n  private creepDeathSound = new SoundEffectPool(5, \"assets/crunch.mp3\", 0, 1);\n  private creepEscapeSound = new SoundEffectPool(3, \"assets/escape.mp3\", 0, 1);\n  private buildSound = new SoundEffect(\"assets/construction.mp3\", 2);\n\n  constructor() {\n    super(new Vector2(40, 30));\n    this._actionMap = new ActionMap();\n    this.initActions();\n    this.towerManager = new TowerManager(this, this.ecs);\n    this.pathChecker = new PathChecker(this);\n\n    this.getEastWestPath = this._getEastWestPath.bind(this);\n    this.getNorthSouthPath = this._getNorthSouthPath.bind(this);\n    this.creepManager = new CreepManager(this);\n\n    this.particleManager = new ParticleManager();\n    this.initParticleEffects();\n\n    this.mouse.addListener(this.handleClick.bind(this));\n\n    this.towerManager.add(\"tower-1\", MinigunTower);\n    this.towerManager.add(\"tower-2\", MissileTower);\n    this.towerManager.add(\"tower-3\", SwarmerTower);\n    this.towerManager.add(\"tower-4\", SniperTower);\n\n    this.ecs.listenEvent(\"weapon:fire\", (evt) => {\n      if (isAudioEnabled()) {\n        this.turretFireSound.play();\n      }\n    });\n\n    this.ecs.listenEvent(\"sellable:sell\", (evt) => {\n      const { extra } = evt;\n      const { position } = extra;\n      const ent = this.ecs.createEntity();\n      this.ecs.addComponent(ent, PositionComponent, {\n        position: (position as PositionData).position,\n      });\n      this.ecs.addComponent(ent, SpawnerComponent, {\n        producer: makeBlood,\n        rate: 10,\n        elapsed: 10,\n        count: 30,\n      });\n      this.ecs.addComponent(ent, LifetimeComponent, {\n        lifetime: 1.5,\n      });\n      if (isAudioEnabled()) {\n        this.sellSound.play();\n      }\n    });\n\n    this.ecs.listenEvent(\"pathFollower:done\", (evt) => {\n      this.lives--;\n      this.ecs.removeEntity(evt.entity);\n      if (isAudioEnabled()) {\n        this.creepEscapeSound.play();\n      }\n      if (this.lives <= 0) {\n        this.running = false;\n        this.entityMap.clear();\n        this.audioLoop.stop();\n        this.ecs.clear();\n        globalState.router.requestTransition(\"scores\", false, {\n          score: this.score,\n        });\n      }\n    });\n\n    this.ecs.listenEvent(\"health:die\", (evt) => {\n      const { extra } = evt;\n      const { position } = extra;\n      this.money += 5;\n      this.score += 5;\n      const ent = this.ecs.createEntity();\n      this.ecs.addComponent(ent, PositionComponent, {\n        position: (position as PositionData).position,\n      });\n      this.ecs.addComponent(ent, VelocityComponent, {\n        velocity: new Vector2(0, -0.5),\n      });\n      this.ecs.addComponent(ent, TextRenderComponent, {\n        text: \"+5\",\n        style: \"#ffffff\",\n      });\n      this.ecs.addComponent(ent, SpawnerComponent, {\n        producer: makeBlood,\n        rate: 10,\n        elapsed: 10,\n        count: 30,\n      });\n      this.ecs.addComponent(ent, LifetimeComponent, {\n        lifetime: 1.5,\n      });\n      if (isAudioEnabled()) {\n        this.creepDeathSound.play();\n      }\n    });\n  }\n\n  private sendWave() {\n    const northSpawner = this.ecs.getEntity(\n      this.northSpawnerID\n    ) as SpawnerEntity & SpriteEntity;\n    const eastSpawner = this.ecs.getEntity(\n      this.eastSpawnerID\n    ) as SpawnerEntity & SpriteEntity;\n    const {\n      spawner: northSpawnerData,\n      sprite: northSprite,\n    } = northSpawner.data;\n    const { spawner: eastSpawnerData, sprite: eastSprite } = eastSpawner.data;\n    if (northSpawnerData.total < northSpawnerData.limit) {\n      return;\n    }\n    if (eastSpawnerData.total < eastSpawnerData.limit) {\n      return;\n    }\n\n    const {\n      count: eastCount,\n      entity: eastEntity,\n    } = this.creepManager.getEastWave();\n    eastSpawnerData.producer = eastEntity;\n    eastSpawnerData.rate = 1 / this.creepManager.getStatModifier();\n    eastSpawnerData.total = 0;\n    eastSpawnerData.limit = eastCount;\n    if (this.creepManager.nextEast()) {\n      eastSprite.size = Vector2.ONES;\n    } else {\n      eastSprite.size = Vector2.ZERO;\n    }\n\n    const {\n      count: northCount,\n      entity: northEntity,\n    } = this.creepManager.getNorthWave();\n    northSpawnerData.producer = northEntity;\n    northSpawnerData.rate = 1 / this.creepManager.getStatModifier();\n    northSpawnerData.total = 0;\n    northSpawnerData.limit = northCount;\n    if (this.creepManager.nextNorth()) {\n      northSprite.size = Vector2.ONES;\n    } else {\n      northSprite.size = Vector2.ZERO;\n    }\n    this.creepManager.nextWave();\n  }\n\n  private initActions() {\n    this._actionMap.createAction(\"upgrade\", true);\n    this._actionMap.createAction(\"sell\", true);\n    this._actionMap.createAction(\"wave\", true);\n    this._actionMap.createAction(\"clear\");\n    this._actionMap.createAction(\"setTower\");\n    this._actionMap.createAction(\"exit\");\n  }\n\n  private initParticleEffects() {\n    this.particleManager.addEffectManager;\n  }\n\n  private createSpawner(position: Vector2, east: boolean): number {\n    const eid = this.ecs.createEntity();\n    this.ecs.addComponent(eid, PositionComponent, {\n      position,\n    });\n    this.ecs.addComponent(eid, SpawnerComponent, {\n      limit: 0,\n      rate: 1,\n      count: 1,\n    });\n    this.ecs.addComponent(eid, RotationComponent);\n    this.ecs.addComponent(eid, SpriteComponent, {\n      source: this.arrow,\n      size: east ? Vector2.ONES : Vector2.ZERO,\n      rotationOffset: east ? 0 : 90,\n    });\n    return eid;\n  }\n\n  public preStart(): void {\n    const persistedData = globalState.persistence.get(this);\n\n    const { keyMap } = persistedData;\n    this._actionMap.clearListeners();\n    this.keys.clearListeners();\n    for (const action of Object.keys(keyMap)) {\n      this.keys.addKeyListener(keyMap[action], (evt) => {\n        if (!evt.down) return;\n        this._actionMap.invoke(action);\n      });\n    }\n    this.keys.addKeyListener(\"escape\", () => {\n      this._actionMap.invoke(\"clear\");\n    });\n    this.keys.addKeyListener(\"]\", (evt) => {\n      if (!evt.down) return;\n      this.paused = !this.paused;\n    });\n    this.timeScale = 1;\n    this.keys.addKeyListener(\"[\", (evt) => {\n      if (!evt.down) return;\n      if (this.timeScale < 2) {\n        this.timeScale = 2;\n      } else {\n        this.timeScale = 1;\n      }\n    });\n\n    this._actionMap.addHandler(\"sell\", this.attemptSell.bind(this));\n    this._actionMap.addHandler(\"wave\", this.sendWave.bind(this));\n    this._actionMap.addHandler(\"upgrade\", this.attemptUpgrade.bind(this));\n    this._actionMap.addHandler(\"clear\", this.clearMouseMode.bind(this));\n    this._actionMap.addHandler(\"setTower\", this.setMouseMode.bind(this));\n    this._actionMap.addHandler(\"exit\", () => {\n      this.running = false;\n      this.entityMap.clear();\n      this.audioLoop.stop();\n      this.ecs.clear();\n      globalState.router.requestTransition(\"home\");\n    });\n\n    this.entityMap.clear();\n    this.running = true;\n    this.ecs.clear();\n    this.money = 30;\n    this.lives = 20;\n    this.score = 0;\n    if (isAudioEnabled()) {\n      this.audioLoop.play();\n    }\n\n    // if (!this.first) {\n    //   return;\n    // }\n    this.first = false;\n    createUI(this.ecs, this);\n\n    this.northSouthPath = this.getPath().findNorthSouth(new Set());\n    this.eastWestPath = this.getPath().findEastWest(new Set());\n\n    this.northSpawnerID = this.createSpawner(new Vector2(25, 0), false);\n    this.eastSpawnerID = this.createSpawner(new Vector2(10, 15), true);\n\n    for (let y = 0; y < 30; y++) {\n      for (let x = 10; x < 40; x++) {\n        const floorTile = this.ecs.createEntity();\n        this.ecs.addComponent(floorTile, PositionComponent, {\n          position: new Vector2(x, y),\n        });\n        this.ecs.addComponent(floorTile, RotationComponent);\n        this.ecs.addComponent(floorTile, LowSpriteComponent, {\n          source: this.floorTile,\n        });\n      }\n    }\n\n    for (let i = 10; i < 40; i++) {\n      if (i >= 23 && i <= 27) continue;\n      this.createBlocker(new Vector2(i, 0));\n      this.createBlocker(new Vector2(i, 29));\n    }\n\n    for (let i = 1; i < 29; i++) {\n      if (i >= 13 && i <= 17) continue;\n      this.createBlocker(new Vector2(10, i));\n      this.createBlocker(new Vector2(39, i));\n    }\n  }\n\n  public addSystems(): void {\n    this.ecs.createSystem(new WeaponSystem(), -1);\n    this.ecs.createSystem(new TurretBaseRenderSystem(this.virtualCanvas), 47);\n    this.ecs.createSystem(new DamageTargetSystem());\n    this.ecs.createSystem(new SplashDamageSystem());\n  }\n\n  private handleClick(interaction: MouseInteraction): void {\n    if (this.activeTower === null || !interaction.leftDown) return;\n    this.buildTower(interaction.coordinate, this.activeTower);\n  }\n\n  private clearMouseMode() {\n    if (this.mouseEntity === null) {\n      return;\n    }\n    this.setSelection(-1);\n    this.ecs.removeEntity(this.mouseEntity.id);\n    this.mouseEntity = null;\n    this.activeTower = null;\n  }\n\n  private setMouseMode(_action: string, data: Record<string, unknown>) {\n    const towerName = data[\"tower\"] as string;\n    this.activeTower = towerName;\n    if (this.mouseEntity !== null) {\n      this.clearMouseMode();\n    }\n    const id = this.towerManager.createDemoTower(\n      this.getMousePosition,\n      towerName\n    );\n    this.mouseEntity = this.ecs.getEntity(id);\n    this.setSelection(id);\n  }\n\n  private attemptSell() {\n    const entity = this.getSelection();\n    if (entity === null) {\n      return;\n    }\n    if (this.ecs.hasComponent(entity.id, SellableComponent)) {\n      const value = (entity as ValueEntity).data.value.value;\n      this.ecs.emitEvent(\"sellable:sell\", entity, { ...entity.data });\n      this.money += getDynamic(value);\n      this.ecs.removeEntity(entity.id);\n      this.invalidateSelection();\n    }\n  }\n\n  private attemptUpgrade() {\n    const entity = this.getSelection();\n    if (entity === null) {\n      return;\n    }\n    if (!this.ecs.hasComponent(entity, UpgradeComponent)) {\n      return;\n    }\n    const targetEntity = entity as UpgradeEntity;\n    const cost = getDynamic<number>(\n      entity.data.upgrade.cost as DynamicConstant<number>\n    );\n    if (cost > this.money) {\n      return;\n    }\n    this.money -= cost;\n    targetEntity.data = merge(targetEntity.data, entity.data.upgrade.dataDelta);\n  }\n\n  public buildTower(position: DynamicConstant<Vector2>, tower: string): void {\n    if (this.towerManager.canPlace(getDynamic(position), tower)) {\n      this.towerManager.createTower(getDynamic(position), tower);\n      this.money -= this.towerManager.getTower(tower).cost;\n      if (isAudioEnabled()) {\n        this.buildSound.play();\n      }\n    }\n  }\n\n  public createBlocker(position: Vector2): void {\n    const blockerID = this.ecs.createEntity();\n    this.ecs.addComponent(blockerID, PositionComponent, {\n      position: position.floor(),\n    });\n    this.ecs.addComponent(blockerID, RotationComponent);\n    this.ecs.addComponent(blockerID, SpriteComponent, {\n      source: new Texture(\"assets/blocker.png\"),\n    });\n    this.ecs.addComponent(blockerID, FootprintComponent, {\n      size: 1,\n    });\n  }\n\n  public get actionMap(): ImmutableActionMap {\n    return this._actionMap.asImmutable();\n  }\n\n  getMap(): GameMap {\n    return this.entityMap;\n  }\n\n  getVirtualSize(): Vector2 {\n    return this.virtualSize;\n  }\n\n  setNorthSouthPath(northSouthPath: Vector2[]): void {\n    this.northSouthPath = northSouthPath;\n  }\n\n  setEastWestPath(eastWestPath: Vector2[]): void {\n    this.eastWestPath = eastWestPath;\n  }\n\n  public _getEastWestPath(): Vector2[] {\n    return this.eastWestPath;\n  }\n\n  public _getNorthSouthPath(): Vector2[] {\n    return this.northSouthPath;\n  }\n\n  public getPath(): PathChecker {\n    return this.pathChecker;\n  }\n}\n"],"sourceRoot":""}